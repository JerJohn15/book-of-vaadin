# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2014-05-20 12:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: chapter-mobile.xml:11
#, no-c-format
msgid "Mobile Applications with TouchKit"
msgstr ""

#. Tag: primary
#: chapter-mobile.xml:14
#, no-c-format
msgid "TouchKit"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:17
#, no-c-format
msgid "This chapter describes how to create mobile applications using the Vaadin TouchKit."
msgstr ""

#. Tag: emphasis
#: chapter-mobile.xml:22
#, no-c-format
msgid "This book edition covers TouchKit 4, but is based on a prerelease version available at the time of writing. The final release may have changes that are not covered in the documentation given here."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:28
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:30
#, no-c-format
msgid "Web browsing is becoming ever increasingly mobile and web applications need to satisfy users with both desktop computers and mobile devices, such as phones and tablets. While the mobile browsers can show the pages just like in regular browsers, the screen size, finger accuracy, and mobile browser features need to be considered to make the experience more pleasant. Vaadin TouchKit gives the power of Vaadin for creating mobile user interfaces that complement the regular web user interfaces of your applications. Just like the purpose of the Vaadin Framework is to make desktop-like web applications, the purpose of TouchKit is to allow creation of web applications that give the look and feel of native mobile applications."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:44
#, no-c-format
msgid "The Parking Demo for Vaadin TouchKit"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:55
#, no-c-format
msgid "Creating a mobile UI is much like creating a regular Vaadin UI. You can use all the regular Vaadin components and add-ons available from Vaadin Directory, but most importantly, you can use the special TouchKit components that are optimized for mobile devices."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:62
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[@Theme(\"mobiletheme\")\n"
      "@Widgetset(\"com.example.myapp.MyAppWidgetSet\")\n"
      "@Title(\"My Mobile App\")\n"
      "public class SimplePhoneUI extends UI {\n"
      "    @Override\n"
      "    protected void init(VaadinRequest request) {\n"
      "        // Define a view\n"
      "        class MyView extends NavigationView {\n"
      "            public MyView() {\n"
      "                super(\"Planet Details\");\n"
      "\n"
      "                CssLayout content = new CssLayout();\n"
      "                setContent(content);\n"
      "\n"
      "                VerticalComponentGroup group =\n"
      "                        new VerticalComponentGroup();\n"
      "                content.addComponent(group);\n"
      "\n"
      "                group.addComponent(new TextField(\"Planet\"));\n"
      "                group.addComponent(new NumberField(\"Found\"));\n"
      "                group.addComponent(new Switch(\"Probed\"));\n"
      "\n"
      "                setRightComponent(new Button(\"OK\"));\n"
      "            }\n"
      "        }\n"
      "        \n"
      "        // Use it as the content root\n"
      "        setContent(new MyView());\n"
      "    }\n"
      "    ...\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:64
#, no-c-format
msgid "The above example omits the definition of the servlet class, does not have any UI logic yet, and you would normally implement some views, etc. The resulting UI is shown in <xref linkend=\"figure.mobile.overview.example\"/>."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:71
#, no-c-format
msgid "Simple TouchKit UI"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:79
#, no-c-format
msgid "TouchKit supports many special mobile browser features, such as geolocation, context-specific input fields, and home screen launching. On iOS, special features such as splash screen and web app mode are supported."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:85
#, no-c-format
msgid "In addition to developing regular server-side UIs, TouchKit allows a special <emphasis>offline mode</emphasis>, which is a client-side Vaadin UI that is stored in the browser cache and switched to automatically when the network connection is not available, either when starting the application or while using it. For more information, see <xref linkend=\"mobile.offline\"/>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:93
#, no-c-format
msgid "In this chapter, we first consider some special aspects of mobile browsing. Then, we look how to create a project that uses TouchKit. TouchKit offers a number of specialized mobile components, which are described in a dedicated section. We treat phone and tablet applications separately, and discuss testing briefly."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:102
#, no-c-format
msgid "TouchKit Demos"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:104
#, no-c-format
msgid "Parking demo showcases the most important TouchKit features in a mobile location-based business application - for writing parking tickets on the streets. It uses geolocation, image acquisition from the camera of the mobile device, map navigation, data visualization with Vaadin Charts, and dynamic themeing with the Responsive add-on. You can try it out at <link xlink:href=\"http://demo.vaadin.com/parking\">http://demo.vaadin.com/parking</link>. <phrase condition=\"web\">The <link xlink:href=\"https://github.com/vaadin/parking-demo\">source code is available and browseable at Github</link>.</phrase>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:117
#, no-c-format
msgid "The Mobile Mail is another demo application, which shows how to implement browsing of deep category trees and make forms. You can try it out at <link xlink:href=\"http://demo.vaadin.com/mobilemail\">http://demo.vaadin.com/mobilemail</link>. <phrase condition=\"web\">You can <link xlink:href=\"http://dev.vaadin.com/browser/svn/demo/mobilemail\">browse the source code</link> of the demo at Vaadin developer site.</phrase>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:128
#, no-c-format
msgid "The Vornitologist is a yet another demo application that showcases most of the features in TouchKit. You can try it out at <link xlink:href=\"http://demo.vaadin.com/vornitologist\">http://demo.vaadin.com/vornitologist</link> with your TouchKit-compatible device. You can read the sources on-line or check them out from the repository and import them in Eclipse as described in <xref linkend=\"mobile.installation.vornitologist\"/>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:137
#, no-c-format
msgid "Some of the examples given in this chapter can be seen in action at <link xlink:href=\"http://demo.vaadin.com/book-examples-vaadin7/touchkitcomponents/\">http://demo.vaadin.com/book-examples-vaadin7/touchkitcomponents</link>. <phrase condition=\"web\">You can browse the source code at the <link xlink:href=\"http://dev.vaadin.com/browser/svn/doc/book-examples/branches/vaadin-7/src/com/vaadin/book/examples/addons/touchkit\">source repository of the Book Examples</link>.</phrase>"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:148
#, no-c-format
msgid "Licensing"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:150
#, no-c-format
msgid "Vaadin TouchKit is a commercial product licensed under a dual-licensing scheme. The AGPL license allows open-source development, while the CVAL license needs to be purchased for closed-source use, including web deployments and internal use. Commercial licenses can be purchased from the Vaadin Directory, where you can also find the license details and download Vaadin TouchKit."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:162
#, no-c-format
msgid "Considerations Regarding Mobile Browsing"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:164
#, no-c-format
msgid "When developing web applications that support mobile browsing, you need to consider various issues that are different from non-mobile use. TouchKit is designed to help with these issues."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:171
#, no-c-format
msgid "Mobile Human Interface"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:173
#, no-c-format
msgid "Mobile devices use very different human interfaces than regular computers. For example, the screen can be rotated easily to switch between portrait and landscape views. This does not just change the dimensions of the display, but also affects the most useful layout. In addition to TouchKit, the Responsive add-on helps in allowing the flexibility, as described in <xref linkend=\"themes.responsive\"/>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:182
#, no-c-format
msgid "The user interface is used with a finger instead of a mouse, so there are no features such as \"right-finger-button\". Double-tap is not normally used in mobile user interfaces, unlike the double-click with a mouse. Instead, a \"long tap\" usually has the same meaning as the double click. Finger gestures also play a large role, such as using a vertical swipe gesture for scrolling instead of a scroll bar. Some browsers also allow using two- or multiple-finger gestures."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:192
#, no-c-format
msgid "There is normally no physical but a virtual keyboard, and the keyboard can change depending on the context. You also need to ensure that it does not hide the input field to which the user is trying to enter data when it pops up. This should be handled by the browser, but is among the issues that requires special testing."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:202
#, no-c-format
msgid "Bandwidth and Performance"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:204
#, no-c-format
msgid "Mobile Internet connections are often significantly slower than with fixed lines. With a low-end mobile connection, such as 384 kbps, just loading the Vaadin client-side engine can take several seconds. This can be helped by compiling a widget set that includes only the widgets for the used components, as described in <xref linkend=\"mobile.optimization\"/>, by compiling the theme into the widget set, and so forth."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:213
#, no-c-format
msgid "Even with mobile broadband, the latency can be significant factor, especially with highly interactive rich applications. The latency is usually almost unnoticeable in fixed lines, typically less than 100 ms, while mobile Edge connections typically have latency around 500 ms, and sometimes much higher during hiccups. You may need to limit the use of the immediate mode, text change events, and polling. The latency compensation in some components, such as <classname>NavigationManager</classname>, allows view change animations to occur while the server request to display the result is being made."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:225
#, no-c-format
msgid "Further, the choise of components affects performance. TouchKit components are designed to be light-weight. Of the other Vaadin components, some are more light-weight than others. Especially, most other layout components have a more deeper DOM structure and are slower to render than the light-weight <classname>CssLayout</classname>. TouchKit also includes special styling for <classname>CssLayout</classname>."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:236
#, no-c-format
msgid "Mobile Features"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:238
#, no-c-format
msgid "Phones and tablets have many integrated features that are often available in the browser interface as well. Location-awareness is one of the most recent features. And of course, you can also make phone calls."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:246
#, no-c-format
msgid "Compatibility"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:248
#, no-c-format
msgid "The mobile browsing field is currently evolving at fast pace and the special conventions that are introduced by leading manufacturers may, in the next few years, stabilize as new web standards. The browser support in TouchKit concentrates on WebKit, which appears to be emerging as the leading mobile browser core. In addition to Apple's products, also the default browser in Android uses WebKit as the layout engine. Yet they have differences, as the Android's JavaScript engine, which is highly relevant for Vaadin, is the Google Chrome's V8 engine. In addition to WebKit-based browsers, also Internet Explorer in Windows Phone is supported."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:260
#, no-c-format
msgid "For the list of devices supported by the latest TouchKit version, see the <link xlink:href=\"https://vaadin.com/add-ons/touchkit\">TouchKit product page</link> at the Vaadin site."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:266
#, no-c-format
msgid "Vaadin TouchKit aims to follow the quickly evolving APIs of these major platforms, with the assumption that other browsers will follow their lead in standardization. Other platforms will be supported if they rise in popularity."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:274
#, no-c-format
msgid "Back Button"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:276
#, no-c-format
msgid "Some mobile devices, especially Android devices, have a dedicated back button, while iOS devices in particular do not. TouchKit does not provide any particular support for the button, but as it is a regular browser back button, you can handle it with URI fragments<phrase condition=\"web\">, as described in <xref linkend=\"advanced.urifu\"/></phrase>. For iOS, the browser back button is hidden if the user adds the application to the home screen, in which case you need to implement application-specific logic for the back-navigation."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:291
#, no-c-format
msgid "Installing Vaadin TouchKit"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:293
#, no-c-format
msgid "You can download and install TouchKit from the Vaadin Directory at <link xlink:href=\"https://vaadin.com/addon/vaadin-touchkit\">https://vaadin.com/addon/vaadin-touchkit</link> as an installation package, or get it with Maven or Ivy. If your project requires the use of the CVAL license, licences can be purchased from the Directory."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:301
#, no-c-format
msgid "Add-on installation is described in detail in <xref linkend=\"addons\"/>. The add-on includes a widget set, so you need to compile the widget set for your project."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:308
#, no-c-format
msgid "Installing as Ivy Dependency"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:310
#, no-c-format
msgid "If you use the add-on in an Eclipse project created with the Vaadin Plugin for Eclipse, you can define an Ivy dependency to automatically download the library. Include the following declaration inside the <literal>dependencies</literal> section in the <filename>ivy.xml</filename>:"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:318
#, no-c-format
msgid ""
      "&lt;dependency org=\"com.vaadin.addon\"\n"
      "               name=\"vaadin-touchkit-agpl\"\n"
      "               rev=\"<emphasis role=\"bold\">3.0.0</emphasis>\"\n"
      "               conf=\"default->default\" /&gt;"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:320
#, no-c-format
msgid "You can use <literal>latest.release</literal> revision tag to always use the latest release. IvyDE should resolve the dependency immediately as you save the file. See <xref linkend=\"addons.eclipse\"/> for further details."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:328
#, no-c-format
msgid "Installing the Zip Package"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:330
#, no-c-format
msgid "Vaadin TouchKit is distributed as a Zip package that contains the TouchKit JAR, a JavaDoc JAR, license texts, and other documentation. You can download the Zip package from the Vaadin Directory. A different package is provided for each of the two licenses, and the Directory asks for your choice."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:338
#, no-c-format
msgid "The TouchKit JAR in the package should be put in the <filename>WEB-INF/lib</filename> folder of the web application."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:343
#, no-c-format
msgid "Please see the <filename>README.html</filename> for more information about the package contents."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:350
#, no-c-format
msgid "Defining the Maven Dependency"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:352
#, no-c-format
msgid "You can install Vaadin TouchKit in a Maven project by adding it a dependency, as described below, or by using the Maven archetype, as described in the next section."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:358
#, no-c-format
msgid "To use TouchKit in a Vaadin project, you need to include the following dependency in the POM. The <literal>artifactId</literal> should be <literal>vaadin-touchkit-agpl</literal> or <literal>vaadin-touchkit-cval</literal>, depending on your choise for the license."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:366
#, no-c-format
msgid ""
      "&lt;dependency&gt;\n"
      "   &lt;groupId&gt;com.vaadin.addon&lt;/groupId&gt;\n"
      "   &lt;artifactId&gt;vaadin-touchkit-<emphasis role=\"bold\">agpl</emphasis>&lt;/artifactId&gt;\n"
      "   &lt;version&gt;<emphasis role=\"bold\">LATEST</emphasis>&lt;/version&gt;\n"
      "&lt;/dependency&gt;"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:368
#, no-c-format
msgid "You can use the <parameter>LATEST</parameter> version as shown above or a specific version by its version number."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:373
#, no-c-format
msgid "You also need to define the repository for the Vaadin add-ons under the <literal>&lt;repositories&gt;</literal> element:"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:378
#, no-c-format
msgid ""
      "<![CDATA[<repository>\n"
      "   <id>vaadin-addons</id>\n"
      "   <url>http://maven.vaadin.com/vaadin-addons</url>\n"
      "</repository>]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:380
#, no-c-format
msgid "You also need to enable the widget set compilation in the POM, as described in <xref linkend=\"addons.maven.widgetset\"/>, and compile it."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:389
#, no-c-format
msgid "Importing the Vornitologist Demo"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:391
#, no-c-format
msgid "The Vornitologist demo, illustrated in <xref linkend=\"figure.mobile.overview.touchkit\"/> in the overview, showcases most of the functionality in Vaadin TouchKit. You can try the demo on-line with a TouchKit-compatible browser at <link xlink:href=\"http://demo.vaadin.com/vornitologist/\">http://demo.vaadin.com/vornitologist/</link>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:399
#, no-c-format
msgid "You can browse the sources on-line or, more conveniently, import the project in Eclipse (or other IDE). As the project is Maven-based, eclipse users need to install the m2e (or m2eclipse for older versions) plugin to be able to import Maven projects, as well as Subclipse for making SVN access easier. Once they are installed, you should be able to import Vornitologist as follows."
msgstr ""

#. Tag: listitem
#: chapter-mobile.xml:408
#, no-c-format
msgid "Select <menuchoice><guimenu>File</guimenu><guimenuitem>Import</guimenuitem></menuchoice>"
msgstr ""

#. Tag: listitem
#: chapter-mobile.xml:409
#, no-c-format
msgid "Select <menuchoice><guimenu>Maven</guimenu><guimenuitem>Check out Maven Project from SCM</guimenuitem></menuchoice>, and click <guibutton>Next</guibutton>."
msgstr ""

#. Tag: listitem
#: chapter-mobile.xml:411
#, no-c-format
msgid "In <guilabel>SCM URL</guilabel>, select <guilabel>svn</guilabel> and enter URL for the repository. You can find the current repository URL from the TouchKit add-on page at <link xlink:href=\"https://vaadin.com/directory#addon/vaadin-touchkit\">https://vaadin.com/directory#addon/vaadin-touchkit</link>."
msgstr ""

#. Tag: listitem
#: chapter-mobile.xml:418
#, no-c-format
msgid "Click <guibutton>Finish</guibutton>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:421
#, no-c-format
msgid "Instead of using Subclipse, you can check out the project with another Subversion tool and then import it in Eclipse as a Maven project."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:428
#, no-c-format
msgid "Creating a New TouchKit Project"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:430
#, no-c-format
msgid "The easiest ways to create a new TouchKit application project are to either use the Maven archetype or create the project as a regular Vaadin project with the Vaadin Plugin for Eclipse and then modify it for TouchKit."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:437
#, no-c-format
msgid "Using the Maven Archetype"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:439
#, no-c-format
msgid "You can create a new TouchKit application project using the Maven <parameter>vaadin-archetype-touchkit</parameter> archetype. Creating Vaadin projects with Maven is described in more detail in <xref linkend=\"getting-started.maven\"/>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:446
#, no-c-format
msgid "For example, from command-line, you could do:"
msgstr ""

#. Tag: screen
#: chapter-mobile.xml:450
#, no-c-format
msgid ""
      "<prompt>$</prompt> <command>mvn</command> archetype:generate \\\n"
      "  -DarchetypeGroupId=com.vaadin \\\n"
      "  -DarchetypeArtifactId=vaadin-archetype-touchkit \\\n"
      "  -DarchetypeVersion=<replaceable>3.0.0</replaceable> \\\n"
      "  -DgroupId=<replaceable>example.com</replaceable> -DartifactId=<replaceable>myproject</replaceable> \\\n"
      "  -Dversion=<replaceable>0.1.0</replaceable> -Dpackaging=war"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:452
#, no-c-format
msgid "The generated project has the following source files:"
msgstr ""

#. Tag: filename
#: chapter-mobile.xml:458
#, no-c-format
msgid "MyTouchKitUI.java"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:460
#, no-c-format
msgid "The mobile UI for the TouchKit application. See <xref linkend=\"mobile.elements.ui\"/> for the basics of a TouchKit UI."
msgstr ""

#. Tag: filename
#: chapter-mobile.xml:467
#, no-c-format
msgid "MyFallbackUI.java"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:469
#, no-c-format
msgid "A fallback UI for browsers unsupported by TouchKit, such as regular desktop browsers. See <xref linkend=\"mobile.features.fallback\"/> for more information about fallback UIs."
msgstr ""

#. Tag: filename
#: chapter-mobile.xml:478
#, no-c-format
msgid "MyServlet.java"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:480
#, no-c-format
msgid "The servlet class for the UI, defined using the <literal>@WebServlet</literal> annotation in Servlet API 3.0. The generated servlet customizes TouchKit to define the <classname>MyUIProvider</classname>, which sets the fallback UI. See <xref linkend=\"mobile.elements.servlet\"/> for more details about defining a custom servlet to customize TouchKit."
msgstr ""

#. Tag: filename
#: chapter-mobile.xml:491
#, no-c-format
msgid "MyUIProvider.java"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:493
#, no-c-format
msgid "Creates either the <classname>MyTouchKitUI</classname> for supported mobile browsers or <classname>MyFallBackUI</classname> for unsupported browsers. See <xref linkend=\"mobile.features.fallback\"/> for more information about fallback UIs."
msgstr ""

#. Tag: filename
#: chapter-mobile.xml:503
#, no-c-format
msgid "gwt/AppWidgetSet.gwt.xml"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:505
#, no-c-format
msgid "Widget set descriptor for the project."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:512
#, no-c-format
msgid "To compile the project and launch it in a Jetty web server (port 8080), do:"
msgstr ""

#. Tag: screen
#: chapter-mobile.xml:517
#, no-c-format
msgid ""
      "<prompt>$</prompt> <command>mvn</command> package\n"
      "<prompt>$</prompt> <command>mvn</command> jetty:run"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:519
#, no-c-format
msgid "Note that a project generated by the archetype defines the servlet with the <literal>@WebServlet</literal> annotation defined in Servlet API 3.0. The application server must support Servlet 3.0. For example, if you use Tomcat, you need at least Tomcat 7."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:528
#, no-c-format
msgid "Starting from a New Eclipse Project"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:530
#, no-c-format
msgid "You can create a new TouchKit project from a regular Vaadin project created with the Vaadin Plugin for Eclipse (see <xref linkend=\"getting-started.first-project\"/>)."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:536
#, no-c-format
msgid "After creating the project, you need to do the following tasks:"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:542
#, no-c-format
msgid "Install the TouchKit library in the project by including it in the <filename>ivy.xml</filename><phrase condition=\"web\">, as described in <xref linkend=\"mobile.elements.ivy\"/>,</phrase> and compile the widget set."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:551
#, no-c-format
msgid "Extend <classname>TouchkitServlet</classname> instead of <classname>VaadinServlet</classname> in the servlet class, as described in <xref linkend=\"mobile.elements.servlet\"/>. It is recommended that you extract the static inner class created by the wizard to a regular class, as you most probably need to do additional configuration in it."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:560
#, no-c-format
msgid ""
      "<?pocket-size 70% ?>@WebServlet(value = \"/*\",\n"
      "            asyncSupported = true)\n"
      "@VaadinServletConfiguration(\n"
      "        productionMode = false,\n"
      "        ui = MyMobileUI.class)\n"
      "public class MyProjectServlet extends <emphasis role=\"bold\">TouchKitServlet</emphasis> {\n"
      "}"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:564
#, no-c-format
msgid "If you intend to define a fallback UI later, as described in <xref linkend=\"mobile.features.fallback\"/>, you may want to copy the original UI class stub to use it as a fallback UI class."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:572
#, no-c-format
msgid "To get started quickly, disable the use of custom theme by using <literal>@Theme(\"touchkit\")</literal> in the UI class. To create a custom mobile theme later, see <xref linkend=\"mobile.elements.theme\"/>."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:579
#, no-c-format
msgid ""
      "<?pocket-size 75% ?>@Theme(\"<emphasis role=\"bold\">touchkit</emphasis>\")\n"
      "public class MyMobileUI extends UI {"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:583
#, no-c-format
msgid "Build the mobile UI preferring TouchKit components instead of the core Vaadin components, as described in <xref linkend=\"mobile.elements.ui\"/>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:591
#, no-c-format
msgid "We cover these and various other tasks in more detail in <xref linkend=\"mobile.elements\"/>."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:599
#, no-c-format
msgid "Elements of a TouchKit Application"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:601
#, no-c-format
msgid "At minimum, a TouchKit application requires a UI class, which is defined in a deployment descriptor, as usual for Vaadin applications. You usually define a servlet class, where you can also do some TouchKit-specific configuration. You may also need to have a custom theme. These and other tasks are described in the following subsections."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:610
#, no-c-format
msgid "The Servlet Class"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:612
#, no-c-format
msgid "When using a Servlet 3.0 compatible application server, you usually define the UI and make basic configuration with a servlet class with the <literal>@WebServlet</literal> annotation. Vaadin Plugin for Eclipse creates the servlet class as a static inner class of the UI class, while the Maven archetype creates it as a separate class, which is usually the preferred way."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:621
#, no-c-format
msgid "The servlet class must define the UI class as usual. Additionally, you can configure the following TouchKit features in the servlet class:"
msgstr ""

#. Tag: listitem
#: chapter-mobile.xml:627
#, no-c-format
msgid "Customize bookmark or home screen icon"
msgstr ""

#. Tag: listitem
#: chapter-mobile.xml:628
#, no-c-format
msgid "Customize splash screen image"
msgstr ""

#. Tag: listitem
#: chapter-mobile.xml:629
#, no-c-format
msgid "Customize status bar in iOS"
msgstr ""

#. Tag: listitem
#: chapter-mobile.xml:630
#, no-c-format
msgid "Use special web app mode in iOS"
msgstr ""

#. Tag: listitem
#: chapter-mobile.xml:631
#, no-c-format
msgid "Provide a fallback UI (<xref linkend=\"mobile.features.fallback\"/>)"
msgstr ""

#. Tag: listitem
#: chapter-mobile.xml:632
#, no-c-format
msgid "Enable offline mode"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:635
#, no-c-format
msgid "A custom servlet should normally extend the <classname>TouchKitServlet</classname>. You should place your code in <methodname>servletInitialized()</methodname> and call the super method in the beginning."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:642
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class MyServlet extends TouchKitServlet {\n"
      "    @Override\n"
      "    protected void servletInitialized() throws ServletException {\n"
      "        super.servletInitialized();\n"
      "\n"
      "        ... customization ...\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:644
#, no-c-format
msgid "If you need to rather extend some other servlet, possibly in another add-on, it should be trivial to reimplement the functionality of <classname>TouchKitServlet</classname>, which is just to manage the TouchKit settings object."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:651
#, no-c-format
msgid "If using <filename>web.xml</filename> deployment descriptor instead of the <classname>@WebServlet</classname>, you only need to implement custom servlet class if you need to do any of the above configuration, which you typically need to do."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:660
#, no-c-format
msgid "Defining Servlet and UI with <filename>web.xml</filename> Deployment Descriptor"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:662
#, no-c-format
msgid "If using an old style <filename>web.xml</filename> deployment descriptor, you need to define the special <classname>TouchKitServlet</classname> class instead of the regular <classname>VaadinServlet</classname> in the <filename>web.xml</filename> deployment descriptor. Often you need to make some configuration or add special logic in a custom servlet, as described in the previous section, in which case you need to define your servlet in the deployment descriptor."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:672
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>&lt;servlet&gt;\n"
      "  &lt;servlet-name&gt;Vaadin UI Servlet&lt;/servlet-name&gt;\n"
      "  &lt;servlet-class&gt;\n"
      "    <emphasis role=\"bold\">com.vaadin.addon.touchkit.server.TouchKitServlet</emphasis>\n"
      "  &lt;/servlet-class&gt;\n"
      "  &lt;init-param&gt;\n"
      "    &lt;description&gt;Vaadin UI class to start&lt;/description&gt;\n"
      "    &lt;param-name&gt;ui&lt;/param-name&gt;\n"
      "    &lt;param-value&gt;<emphasis role=\"bold\">com.example.myapp.MyMobileUI</emphasis>&lt;/param-value&gt;\n"
      "  &lt;/init-param&gt;\n"
      "&lt;/servlet&gt;"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:676
#, no-c-format
msgid "TouchKit Settings"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:678
#, no-c-format
msgid "TouchKit has a number of settings that you can customize for your needs. The <classname>TouchKitSettings</classname> configuration object is managed by <classname>TouchKitServlet</classname>, so if you make any modifications to it, you need to implement a custom servlet, as described earlier."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:686
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class MyServlet extends TouchKitServlet {\n"
      "    @Override\n"
      "    protected void servletInitialized() throws ServletException {\n"
      "        super.servletInitialized();\n"
      "\n"
      "        TouchKitSettings s = getTouchKitSettings();\n"
      "        ...\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:688
#, no-c-format
msgid "The settings include special settings for iOS devices, which are contained in a separate <classname>IosWebAppSettings</classname> object, available from the TouchKit settings with <methodname>getIosWebAppSettings()</methodname>."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:696
#, no-c-format
msgid "Application Icons"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:698
#, no-c-format
msgid "The location bar, bookmarks, and other places can display an icon for the web application. You can set the icon, or more exactly icons, in an <classname>ApplicationIcons</classname> object, which manages icons for different resolutions. The most properly sized icon for the context is used. iOS devices prefer icons with 57&#215;57, 72&#215;72, and 144&#215;144 pixels, and Android devices 36&#215;36, 48&#215;48, 72&#215;72, and 96&#215;96 pixels."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:708
#, no-c-format
msgid "You can add an icon to the application icons collection with <methodname>addApplicationIcon()</methodname>. You can acquire the base URL for your application from the servlet context, as shown in the following example."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:715
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[TouchKitSettings s = getTouchKitSettings();\n"
      "String contextPath = getServletConfig()\n"
      "    .getServletContext().getContextPath();\n"
      "s.getApplicationIcons().addApplicationIcon(\n"
      "    contextPath + \"VAADIN/themes/mytheme/icon.png\");]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:717
#, no-c-format
msgid "The basic method just takes the icon name, while the other one lets you define its size. It also has a <parameter>preComposed</parameter> parameter, which when true, instructs Safari from adding effects to the icon in iOS."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:726
#, no-c-format
msgid "Viewport Settings"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:728
#, no-c-format
msgid "The <classname>ViewPortSettings</classname> object, which you can get from the TouchKit settings with <methodname>getViewPortSettings()</methodname>, manages settings related to the display, most importantly the scaling limitations."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:735
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[TouchKitSettings s = getTouchKitSettings();\n"
      "ViewPortSettings vp = s.getViewPortSettings();\n"
      "vp.setViewPortUserScalable(true);\n"
      "...]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:737 chapter-mobile.xml:775
#, no-c-format
msgid "See the <link xlink:href=\"http://developer.apple.com/library/safari/\">Safari Development Library</link> at the Apple developer's site for more details regarding the functionality in the iOS browser."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:746
#, no-c-format
msgid "Startup Image for iOS"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:748
#, no-c-format
msgid "iOS browser supports a startup (splash) image that is shown while the application is loading. You can set it in the <classname>IosWebAppSettings</classname> object with <methodname>setStartupImage()</methodname>. You can acquire the base URL for your application from the servlet context, as shown in the following example."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:757
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[TouchKitSettings s = getTouchKitSettings();\n"
      "String contextPath = getServletConfig().getServletContext()\n"
      "    .getContextPath();\n"
      "s.getIosWebAppSettings().setStartupImage(\n"
      "    contextPath + \"VAADIN/themes/mytheme/startup.png\");]]>"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:762
#, no-c-format
msgid "Web App Capability for iOS"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:764
#, no-c-format
msgid "iOS supports a special web app mode for bookmarks added and started from the home screen. With the mode enabled, the client may, among other things, hide the browser's own UI to give more space for the web application. The mode is enabled by a header that tells the browser whether the application is designed to be used as a web application rather than a web page."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:773
#, no-c-format
msgid ""
      "<![CDATA[TouchKitSettings s = getTouchKitSettings();\n"
      "s.getIosWebAppSettings().setWebAppCapable(true);]]>"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:784
#, no-c-format
msgid "Cache Manifest"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:786
#, no-c-format
msgid "The <classname>ApplicationCacheSettings</classname> object manages the cache manifest, which is used to configure how the browser caches the page and other resources for the web app. See <xref linkend=\"mobile.offline\"/> for more details about its use."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:796
#, no-c-format
msgid "The UI"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:798
#, no-c-format
msgid "Mobile UIs extend the <classname>UI</classname> class as usual and construct the user interface from components."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:803
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[@Theme(\"mobiletheme\")\n"
      "@Widgetset(\"com.example.myapp.MyAppWidgetSet\")\n"
      "@Title(\"My Simple App\")\n"
      "public class SimplePhoneUI extends UI {\n"
      "    @Override\n"
      "    protected void init(VaadinRequest request) {\n"
      "        // Create the content root layout for the UI\n"
      "        TabBarView mainView = new TabBarView();\n"
      "        setContent(mainView);\n"
      "\n"
      "        ...\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:805
#, no-c-format
msgid "As TouchKit comes with a custom widget set, you need to use a combining widget set for your project, defined with the <literal>@Widgetset</literal> annotation for the UI. The combining widget set descriptor is automatically generated by the Vaadin Plugin for Eclipse and in Maven when you install or define the TouchKit add-on."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:813
#, no-c-format
msgid "Most commonly, you will use a combination of the major three TouchKit components as the basis of the UI: <classname>TabBarView</classname>, <classname>NavigationView</classname>, or <classname>NavigationManager</classname>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:820
#, no-c-format
msgid "If a offline UI is provided, it needs to be enabled in the initialization of the UI, as described in <xref linkend=\"mobile.offline\"/>."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:839
#, no-c-format
msgid "Mobile Widget Set"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:841
#, no-c-format
msgid "TouchKit includes a widget set and therefore requires compiling a project widget set that includes it, as described in <xref linkend=\"addons\"/>. The project widget set descriptor is automatically generated during the compilation process, whether you use Maven or the Eclipse plugin."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:849
#, no-c-format
msgid "Note that if you have a TouchKit UI in the same project as a non-TouchKit UI, you probably do not want to compile the TouchKit widget set into its widget set. As the automatic generation of the descriptor includes all the widget sets that it finds from the class path, the result can be unwanted, and you need to edit the widget set descriptor manually."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:859
#, no-c-format
msgid "Mobile Theme"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:861
#, no-c-format
msgid "You can use both Sass and CSS themes for TouchKit applications, although they are defined a bit differently from regular Vaadin themes. To optimize how a theme is loaded, you can build it into a GWT client bundle."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:868
#, no-c-format
msgid "Defining a Regular Theme"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:870
#, no-c-format
msgid "Using plain CSS is often the easiest way to define a simple theme for a mobile application, as using Sass would not yield all the same benefits as in a regular Vaadin application. TouchKit includes its own base theme in its widget set, so you do not need to <literal>@import</literal> it explicitly."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:878
#, no-c-format
msgid "A CSS theme is defined in a file located at <filename>VAADIN/themes/mymobiletheme/styles.css</filename>. As importing the base does not need to (and should not) be done, it could simply be as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:885
#, no-c-format
msgid ""
      "<![CDATA[.stylishlabel {\n"
      "    color: red;\n"
      "    font-style: italic;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:887
#, no-c-format
msgid "You need to set the theme with the <literal>@Theme(\"mymobiletheme\")</literal> annotation for your UI class, as usual."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:893
#, no-c-format
msgid "You can also use Sass by creating a <filename>styles.scss</filename> and then compiling it to CSS with the Vaadin theme compiler. However, as above, you should not include a base theme. The rules do not need to be wrapped in a selector with the theme name, as is recommended for regular Vaadin themes."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:903
#, no-c-format
msgid "Responsive Mobile Themes"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:905
#, no-c-format
msgid "The Responsive add-on is especially useful for mobile themes, as it makes it easy to adapt a layout for phones and tablets and for changing the screen orientation. With the add-on, changing the UI layout according to screen orientation is handled entirely on the client-side by the add-on, using special CSS selectors in the theme. See <xref linkend=\"themes.responsive\"/> for details about the add-on."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:915
#, no-c-format
msgid "The Parking demo uses the add-on. From its source code, which is available at Github, you can learn how the conditional selectors are used in the <link xlink:href=\"https://github.com/vaadin/parking-demo/tree/master/src/main/resources/com/vaadin/demo/parking/widgetset/client/theme\">CSS defined in a GWT client bundle</link>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:923
#, no-c-format
msgid "For example, the CSS for the <guilabel>Stats</guilabel> tab in the demo defines a responsive selector as follows, to allow fitting two charts side-by-side if there is enough room horizontally:"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:929
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[.stats .statschart {\n"
      "    margin-bottom: 30px;\n"
      "    float: left;\n"
      "    width: 100%;\n"
      "}\n"
      "\n"
      ".v-ui[width-range~=\"801px-\"] .stats .statschart {\n"
      "    width: 48% !important;\n"
      "    margin: 0 1%;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:931
#, no-c-format
msgid "Normally, if there's 800 pixels or less space horizontally, each chart takes 100% of the screen width, causing the second one to wrap to the next line in the containing <classname>CssLayout</classname>. If there is more space, the two charts are shown in 48% width, so that both can fit in the same line. <phrase condition=\"web\">This follows the flexible wrapping pattern described in <xref linkend=\"themes.responsive.wrap\"/>.</phrase>"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:943
#, no-c-format
msgid "Defining a Theme in a GWT Client Bundle"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:945
#, no-c-format
msgid "Using a GWT theme instead of a regular Vaadin theme offers several performance benefits on mobile devices by reducing the number of resources loaded separately. All the resources, such as images and stylesheets, can be loaded with the widget set. Images can be handled as sprites tiled in bundle images."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:953
#, no-c-format
msgid "The GWT CSS classes have their own special format, a bit similar to Sass themes. See <link xlink:href=\"https://developers.google.com/web-toolkit/doc/latest/DevGuideClientBundle\">GWT Developer's Guide for detailed information about client bundles</link> and how to define image, CSS, and other resources."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:961
#, no-c-format
msgid "To use a GWT client bundle in a TouchKit application, you need to define a <emphasis>theme loader</emphasis> that extends the TouchKit <classname>ThemeLoader</classname> and implements the <methodname>load()</methodname> method to inject the bundle. The theme loader and the client bundle are a client-side classes that are compiled into the widget set, and must therefore be defined under the <filename>client</filename> directory."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:971
#, no-c-format
msgid "For example, in Vornitologist we have as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:975
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class VornitologistThemeLoader extends ThemeLoader {\n"
      "    @Override\n"
      "    public void load() {\n"
      "        // Load default TouchKit theme\n"
      "        super.load();\n"
      "\n"
      "        // Load Vornitologist specific additions from\n"
      "        // its client bundle\n"
      "        VornitologistBundle.INSTANCE.css().ensureInjected();\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:977
#, no-c-format
msgid "You can call <methodname>super.load()</methodname> to load the default TouchKit theme, but you can omit the call if you do not want to use it. In such case, your GWT theme should import the Vaadin base theme explicitly."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:984
#, no-c-format
msgid "The theme loader must be defined in the <filename>.gwt.xml</filename> widget set descriptor as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:989
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>&lt;replace-with\n"
      "    class=\"<emphasis role=\"bold\">com.vornitologist.widgetset.client.theme.VornitologistThemeLoader</emphasis>\"&gt;\n"
      "    &lt;when-type-is\n"
      "        class=\"com.vaadin.addon.touchkit.gwt.client.ThemeLoader\" /&gt;\n"
      "&lt;/replace-with&gt;"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:991
#, no-c-format
msgid "See the Vornitologist demo sources for a complete example of defining a GWT theme."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1000
#, no-c-format
msgid "Mobile User Interface Components"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1002
#, no-c-format
msgid "TouchKit introduces a number of components special to mobile user interfaces to give better user interaction and to utilize the special features in mobile devices."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:1010 chapter-mobile.xml:1119
#, no-c-format
msgid "NavigationView"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1012
#, no-c-format
msgid "A view with a navigation bar (<classname>NavigationBar</classname> for navigating back and forth in a <classname>NavigationManager</classname>."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:1020 chapter-mobile.xml:1217
#, no-c-format
msgid "<classname>Toolbar</classname>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1022
#, no-c-format
msgid "A horizontal layout especially for buttons. A sub-component of <classname>TabBarView</classname> or <classname>NavigationView</classname>."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:1030 chapter-mobile.xml:1247
#, no-c-format
msgid "NavigationManager"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1032
#, no-c-format
msgid "A component container that enables slide animations between the components while the server request is being made for the purpose of latency compensation. The components are typically <classname>NavigationView</classname>s or <classname>SwipeView</classname>s."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:1042 chapter-mobile.xml:1366
#, no-c-format
msgid "NavigationButton"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1044
#, no-c-format
msgid "A special button for initiating view change in a <classname>NavigationManager</classname> on the client-side, for the purpose of latency compensation."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:1052 chapter-mobile.xml:1469
#, no-c-format
msgid "Popover"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1054
#, no-c-format
msgid "A floating pop-up frame that can be positioned relative to a component."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:1060 chapter-mobile.xml:1567
#, no-c-format
msgid "SwipeView"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1062
#, no-c-format
msgid "A view for navigating back and forth in a <classname>NavigationManager</classname> using horizontal swipe gestures."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:1070 chapter-mobile.xml:1606 chapter-mobile.xml:1630
#, no-c-format
msgid "Switch"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1072
#, no-c-format
msgid "A sliding on/off toggle for boolean values."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:1078 chapter-mobile.xml:1651 chapter-mobile.xml:1669
#, no-c-format
msgid "VerticalComponentGroup"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1080
#, no-c-format
msgid "A vertical layout for grouping components."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:1086 chapter-mobile.xml:1691 chapter-mobile.xml:1707
#, no-c-format
msgid "HorizontalButtonGroup"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1088
#, no-c-format
msgid "A horizontal layout for grouping especially buttons."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:1094 chapter-mobile.xml:1744
#, no-c-format
msgid "TabBarView"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1096
#, no-c-format
msgid "A tabbed view with a content area on the top and a <classname>Toolbar</classname> for navigating between sub-views on the bottom."
msgstr ""

#. Tag: term
#: chapter-mobile.xml:1104
#, no-c-format
msgid "<classname>EmailField</classname>, <classname>NumberField</classname>, and <classname>UrlField</classname>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1106
#, no-c-format
msgid "Text fields for inputting specifically email addresses, numbers, and URLs, respectively, with a specific virtual keyboard."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1114
#, no-c-format
msgid "The components are detailed in the following subsections."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1121
#, no-c-format
msgid "The <classname>NavigationView</classname> is a layout component that consists of a navigation bar and a content area. The content area is scrollable, so there is no need to use an inner panel component. In addition, there can be an optional toolbar component at the bottom of the view. A <classname>NavigationView</classname> is often used inside a <classname>NavigationManager</classname> to get view change animations."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1131
#, no-c-format
msgid "Layout of the <classname>NavigationView</classname>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1142
#, no-c-format
msgid "<classname>NavigationView</classname> has a full size by default. The content area is expanding, so that it takes all the space left over from the navigation bar and toolbar."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1149
#, no-c-format
msgid "Navigation Bar"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1151
#, no-c-format
msgid "The navigation bar at the top of <classname>NavigationView</classname> is a separate <classname>NavigationBar</classname> component. It has two component slots, with one on the left and one on the right. The caption is displayed in the middle. The <classname>NavigationBar</classname> component can be used independently as well."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1160
#, no-c-format
msgid "When the <classname>NavigationBar</classname> is used for navigation and you set the previous component with <methodname>setPreviousComponent()</methodname>, the left slot is automatically filled with a <guibutton>Back</guibutton> button. This is done automatically if you use the <classname>NavigationView</classname> inside a <classname>NavigationManager</classname>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1169
#, no-c-format
msgid "You can get access to the navigation bar component with <methodname>getNavigationBar()</methodname> to use its manipulator methods directly, but <classname>NavigationView</classname> also offers some shorthand methods: <methodname>setLeftComponent()</methodname>, <methodname>setRightComponent()</methodname>, and a setter and a getter for the caption."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1180
#, no-c-format
msgid "<title>Toolbar</title>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1182
#, no-c-format
msgid "A slot for an optional toolbar is located at the bottom of the <classname>NavigationView</classname>. The toolbar can be any component, but a <classname>Toolbar</classname> component made for this purpose is included in TouchKit. It is described in <xref linkend=\"mobile.components.toolbar\"/>. You could also use a <classname>HorizontalLayout</classname> or <classname>CssLayout</classname>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1192
#, no-c-format
msgid "You usually fill the tool bar with <classname>Button</classname> components with an icon and no textual caption. You set the toolbar with <methodname>setToolbar()</methodname>."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1200 chapter-mobile.xml:1235 chapter-mobile.xml:1442 chapter-mobile.xml:1553 chapter-mobile.xml:1639 chapter-mobile.xml:1678 chapter-mobile.xml:1730 chapter-mobile.xml:1800 chapter-mobile.xml:1836 chapter-mobile.xml:1870 chapter-mobile.xml:1897
#, no-c-format
msgid "Styling with CSS"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1202
#, no-c-format
msgid ""
      "<![CDATA[.v-touchkit-navview { }\n"
      "  .v-touchkit-navview-wrapper {}\n"
      "  .v-touchkit-navview-toolbar {}\n"
      ".v-touchkit-navview .v-touchkit-navview-notoolbar {}]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1204
#, no-c-format
msgid "The root element has the <literal>v-touchkit-navview</literal> class. The content area is wrapped inside a <literal>v-touchkit-navview-wrapper</literal> element. If the view has a toolbar, the toolbar slot has the <literal>v-touchkit-navview-toolbar</literal> style, but if not, the top-level element has the <literal>v-touchkit-navview-notoolbar</literal> style."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1219
#, no-c-format
msgid "The <classname>Toolbar</classname> is a horizontal layout component intended for containing <classname>Button</classname> components. The toolbar has by default 100% horizontal width and a fixed height. The components are spread evenly in the horizontal direction. <classname>Toolbar</classname> is used in a <classname>TabBarView</classname>, as described in <xref linkend=\"mobile.components.tabbarview\" xrefstyle=\"select:label\"/>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1229
#, no-c-format
msgid "For a description of the inherited features, please refer to <xref linkend=\"layout.orderedlayout\"/>."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1237
#, no-c-format
msgid "<![CDATA[.v-touchkit-toolbar { }]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1239
#, no-c-format
msgid "The component has an overall <literal>v-touchkit-toolbar</literal> style."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1249
#, no-c-format
msgid "The <classname>NavigationManager</classname> is a visual effect component that gives sliding animation when switching between views. You can register three components: the currently displayed component, the previous one on the left, and the next component on the right. You can set these components with <methodname>setCurrentComponent()</methodname>, <methodname>setPreviousComponent()</methodname>, and <methodname>setNextComponent()</methodname>, respectively."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1259
#, no-c-format
msgid "The <classname>NavigationManager</classname> component is illustrated in <xref linkend=\"figure.mobile.components.navigationpanel\"/>."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1265
#, no-c-format
msgid "<classname>NavigationManager</classname> with Three <classname>NavigationView</classname>s"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1276
#, no-c-format
msgid "The navigation manager is important for responsiveness, because the previous and next components are cached and the slide animation started before server is contacted to load the new next or previous views."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1282
#, no-c-format
msgid "You give the initial view as a parameter for the constructor. Typically, you use a navigation manager as the UI content or inside a <classname>TabBarView</classname>."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1288
#, no-c-format
msgid ""
      "<![CDATA[public class MyUI extends UI {\n"
      "    @Override\n"
      "    protected void init(VaadinRequest request) {\n"
      "        NavigationManager manager =\n"
      "               new NavigationManager(new MainView());\n"
      "        setContent(manager);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1291
#, no-c-format
msgid "Changing Views"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1293
#, no-c-format
msgid "Switching between the views (components) is normally done with predefined navigation targets to enhance responsiveness. Clicking a <classname>NavigationButton</classname> or a button in a navigation bar starts navigation automatically without a server roundtrip. Swipe gestures are supported with the <classname>SwipeView</classname> component."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1302
#, no-c-format
msgid "Navigation can also be done programmatically with the <methodname>navigateTo()</methodname> method. If breadcrumbs are enabled, the current view is also pushed to the breadcrumb stack. To navigate back, you can call <methodname>navigateBack()</methodname>, which is also called implicitly if a <guibutton>Back</guibutton> button is clicked in a <classname>NavigationView</classname>. Also, if navigation is done to the \"previous\" component, <methodname>navigateBack()</methodname> is done implicitly."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1313
#, no-c-format
msgid "When navigation occurs, the current component is moved as the previous or next component, according to the direction of the navigation."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1320
#, no-c-format
msgid "Handling View Changes"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1322
#, no-c-format
msgid "While you can put any components in the manager, some special features are enabled when using the <classname>NavigationView</classname>. When a view becomes visible, the <methodname>onBecomingVisible()</methodname> method in the view is called. You can override it, just remember to call the superclass method."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1330
#, no-c-format
msgid ""
      "<![CDATA[@Override\n"
      "protected void onBecomingVisible() {\n"
      "    super.onBecomingVisible();\n"
      "\n"
      "    ...\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1332
#, no-c-format
msgid "Otherwise, you can handle navigation changes in the manager with a <interfacename>NavigationListener</interfacename>. The <parameter>direction</parameter> property tells whether the navigation was done forward or backward in the breadcrumb stack, that is, whether navigation was done with <methodname>navigateTo()</methodname> or <methodname>navigateBack</methodname>. The current component, accessible with <methodname>getCurrentComponent()</methodname>, refers to the navigation target component."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1343
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[manager.addNavigationListener(new NavigationListener() {\n"
      "    @Override\n"
      "    public void navigate(NavigationEvent event) {\n"
      "        if (event.getDirection() ==\n"
      "                NavigationEvent.Direction.BACK) {\n"
      "            // Do something\n"
      "            Notification.show(\"You came back to \" +\n"
      "                manager.getCurrentComponent().getCaption());\n"
      "        }\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1347
#, no-c-format
msgid "Tracking Breadcrumbs"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1349
#, no-c-format
msgid "<classname>NavigationManager</classname> also handles <emphasis>breadcrumb</emphasis> tracking. The <methodname>navigateTo()</methodname> pushes the current view on the top of the breadcrumb stack and <methodname>navigateBack()</methodname> can be called to return to the previous breadcrumb level."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1357
#, no-c-format
msgid "Notice that calling <methodname>navigateTo()</methodname> with the \"previous\" component is equivalent to calling <methodname>navigateBack()</methodname>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1368
#, no-c-format
msgid "The <classname>NavigationButton</classname> is a special version of the regular <classname>Button</classname> component, designed for navigation inside a <classname>NavigationManager</classname> (see <xref linkend=\"mobile.components.navigationpanel\"/>). Clicking a navigation button will automatically navigate to the defined target view. The view change animation does not need to make a server request first, but starts immediately after clicking the button. If you leave the target view empty, an empty placeholder view is shown in the animation. The view is filled after it gets the content from the server."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1380
#, no-c-format
msgid "A navigation button does not have a particular border by default, because multiple navigation buttons are typically used inside a <classname>VerticalComponentGroup</classname> to create menus, as illustrated in <xref linkend=\"figure.mobile.components.navigationbutton\"/>."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1389
#, no-c-format
msgid "<classname>NavigationButton</classname>s Inside a Vertical Component Group"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1397
#, no-c-format
msgid "A navigation button has a caption and can have a description and an icon. If not given explicitly, the caption is taken from the caption of the navigation view if it is initialized before the button. The icon is positioned left of the caption, and the description is aligned on the right side of the button."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1405
#, no-c-format
msgid "You can give the target view either in the constructor or with <methodname>setTargetView()</methodname>, or create it later by handling the button click."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1411
#, no-c-format
msgid ""
      "<?pocket-size 70% ?><![CDATA[// Button caption comes from the view caption\n"
      "box.addComponent(new NavigationButton(new PopoverView()));\n"
      "\n"
      "// Give button caption explicitly\n"
      "box.addComponent(new NavigationButton(\"Decorated Popover\",\n"
      "                   new DecoratedPopoverView()));]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1413
#, no-c-format
msgid "If the target view is not created or initialized before the button is clicked, it does not yet have a caption during the animation. The default is to use the button caption as a temporary target view caption, but you can set it explicitly with <methodname>setTargetViewCaption()</methodname>. The temporary caption is shown during the slide animation and until the content for the view has been received from the server. It is then replaced with the proper caption of the view, and you normally want to have it the same. The temporary caption is also used as the caption of button if it is not given explicitly."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1426
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[\n"
      "final NavigationButton navButton = new NavigationButton();\n"
      "navButton.setTargetViewCaption(\"Text Input Fields\");\n"
      "navButton.addClickListener(\n"
      "    new NavigationButtonClickListener() {\n"
      "\n"
      "    @Override\n"
      "    public void buttonClick(NavigationButtonClickEvent event) {\n"
      "        navButton.getNavigationManager()\n"
      "            .navigateTo(new FieldView());\n"
      "    }\n"
      "});\n"
      "box.addComponent(navButton);]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1428
#, no-c-format
msgid "Creating views dynamically this way is recommended to reduce the memory footprint."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1433
#, no-c-format
msgid "Notice that the automatic navigation will only work if the button is inside a <classname>NavigationManager</classname> (in a view managed by it). If you just want to use the button as a visual element, you can use it like a regular <classname>Button</classname> and handle the click events with a <classname>ClickListener</classname>."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1444
#, no-c-format
msgid ""
      "<![CDATA[.v-touchkit-navbutton { }\n"
      "  .v-touchkit-navbutton-desc { }\n"
      "  .v-icon { }]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1446
#, no-c-format
msgid "The component has an overall <literal>v-touchkit-navbutton</literal> style. If the component description is set with <methodname>setDescription()</methodname>, it is shown in a separate <literal>&lt;span&gt;</literal> element with the <literal>v-touchkit-navbutton-desc</literal> style. The description has an alternative <literal>emphasis</literal> style, as well as a stronger capsule-like <literal>pill</literal> style with rounded corners, which you can enable with <methodname>addStyleName()</methodname>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1458
#, no-c-format
msgid "The default style of the navigation button is designed for placing the buttons inside a <classname>VerticalComponentGroup</classname>. It has a different style when it is in a <classname>HorizontalButtonGroup</classname> and when in the left or right slot of the <classname>NavigationBar</classname>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1471
#, no-c-format
msgid "<classname>Popover</classname> is much like a regular Vaadin sub-window, useful for quickly displaying some options or a small form related to an action. Unlike regular sub-windows, it does not support dragging or resizing by the user. As sub-windows usually require a rather large screen size, the <classname>Popover</classname> is most useful for tablet devices. When used on smaller devices, such as phones, the <classname>Popover</classname> automatically fills the entire screen."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1482
#, no-c-format
msgid "<classname>Popover</classname> in a Phone"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1490
#, no-c-format
msgid "It is customary to use a <classname>NavigationView</classname> to have border decorations and caption. In the following, we subclass <classname>Popover</classname> to create the content."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1496
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[class DetailsPopover extends Popover {\n"
      "    public DetailsPopover() {\n"
      "        setWidth(\"350px\");\n"
      "        setHeight(\"65%\");\n"
      "\n"
      "        // Have some details to display\n"
      "        VerticalLayout layout = new VerticalLayout();\n"
      "        ...\n"
      "\n"
      "        NavigationView c = new NavigationView(layout);\n"
      "        c.setCaption(\"Details\");\n"
      "        setContent(c);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1498
#, no-c-format
msgid "A <classname>Popover</classname> can be opened relative to a component by calling <methodname>showRelativeTo()</methodname>. In the following example, we open the popover when a table item is clicked."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1504
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[\n"
      "Table table = new Table(\"Planets\", planetData());\n"
      "table.addItemClickListener(new ItemClickListener() {\n"
      "    @Override\n"
      "    public void itemClick(ItemClickEvent event) {\n"
      "        DetailsPopover popover = new DetailsPopover();\n"
      "\n"
      "        // Show it relative to the navigation bar of\n"
      "        // the current NavigationView.\n"
      "        popover.showRelativeTo(view.getNavigationBar());\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1506
#, no-c-format
msgid "You can also add the <classname>Popover</classname> to the <classname>UI</classname> with <methodname>addWindow()</methodname>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1511
#, no-c-format
msgid "A popover is shown in a tablet device as illustrated <xref linkend=\"figure.mobile.components.popover.tablet\"/>. In this example, we have a <classname>CssLayout</classname> with some buttons as the popover content."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1519
#, no-c-format
msgid "<classname>Popover</classname> in a Tablet Device"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1528
#, no-c-format
msgid "Closing a Popover"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1530
#, no-c-format
msgid "When <parameter>closable</parameter> is enabled in a <classname>Popover</classname>, as it is by default, it can be closed by clicking anywhere outside the popup area. This may not be enough if the popover fills the entire screen, in which case the user gets stuck. The popover can be closed programmatically by calling <methodname>close()</methodname>. You can, for example, add a <interfacename>MouseEvents.ClickListener</interfacename> to the popover to allow closing it by clicking anywhere inside it."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1541
#, no-c-format
msgid "If the popover has editable fields, you may want to have a close button in the navigation bar of the <classname>NavigationView</classname>. In the following example, we add a close button to the right slot of the navigation bar (you need to include the icon in your theme)."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1549
#, no-c-format
msgid ""
      "<?pocket-size 70% ?><![CDATA[class DetailsPopover extends Popover\n"
      "      implements Button.ClickListener {\n"
      "    public DetailsPopover(Table table, Object itemId) {\n"
      "        setWidth(\"350px\");\n"
      "        setHeight(\"65%\");\n"
      "        Layout layout = new FormLayout();\n"
      "        ... create the content ...\n"
      "\n"
      "        // Decorate with navigation view\n"
      "        NavigationView content = new NavigationView(layout);\n"
      "        content.setCaption(\"Details\");\n"
      "        setContent(content);\n"
      "\n"
      "        // Have a close button\n"
      "        Button close = new Button(null, this);\n"
      "        close.setIcon(new ThemeResource(\"close64.png\"));\n"
      "        content.setRightComponent(close);\n"
      "    }\n"
      "\n"
      "    public void buttonClick(ClickEvent event) {\n"
      "        close();\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1555
#, no-c-format
msgid ""
      "<![CDATA[.v-touchkit-popover .v-touchkit-fullscreen { }\n"
      "  .v-touchkit-popover .v-touchkit-relative { }\n"
      "  .v-touchkit-popover .v-touchkit-plain { }]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1557
#, no-c-format
msgid "The component has an overall <literal>v-touchkit-popover</literal> style. If full-screen, it also has the <literal>v-touchkit-fullscreen</literal> style, if positioned relatively it has <literal>v-touchkit-relative</literal>, and if not, the <literal>v-touchkit-plain</literal> style."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1569
#, no-c-format
msgid "The <classname>SwipeView</classname> is a wrapper that allows navigating between views by swiping them horizontally left or right. The component works together with a <classname>NavigationManager</classname> (see <xref linkend=\"mobile.components.swipeview\"/>) to change between the views when swiped, and to animate the change. A <classname>SwipeView</classname> should be an immediate child of the <classname>NavigationManager</classname>, but can contain a <classname>NavigationView</classname> to provide button navigation as well."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1581
#, no-c-format
msgid "Let us have a selection of photographs to browse. We extend <classname>NavigationManager</classname> that creates the slide effect and create actual image views dynamically. In the constructor, we create the two first ones."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1588
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[class SlideShow extends NavigationManager\n"
      "      implements NavigationListener {\n"
      "    String imageNames[] = {\"Mercury.jpg\", \"Venus.jpg\",\n"
      "        \"Earth.jpg\", \"Mars.jpg\", \"Jupiter.jpg\",\n"
      "        \"Saturn.jpg\", \"Uranus.jpg\", \"Neptune.jpg\"};\n"
      "    int pos = 0;\n"
      "\n"
      "    public SlideShow() {\n"
      "        // Set up the initial views\n"
      "        navigateTo(createView(pos));\n"
      "        setNextComponent(createView(pos+1));\n"
      "        \n"
      "        addNavigationListener(this);\n"
      "    }]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1590
#, no-c-format
msgid "The individual views have a <classname>SwipeView</classname> and the top."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1594
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[    SwipeView createView(int pos) {\n"
      "        SwipeView view = new SwipeView();\n"
      "        view.setSizeFull();\n"
      "        \n"
      "        // Use an inner layout to center the image\n"
      "        VerticalLayout layout = new VerticalLayout();\n"
      "        layout.setSizeFull();\n"
      "\n"
      "        Image image = new Image(null, new ThemeResource(\n"
      "            \"planets/\" + imageNames[pos]));\n"
      "        layout.addComponent(image);\n"
      "        layout.setComponentAlignment(image,\n"
      "            Alignment.MIDDLE_CENTER);\n"
      "\n"
      "        view.setContent(layout);\n"
      "        return view;\n"
      "    }]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1596
#, no-c-format
msgid "When the view is swiped to either direction, we need to set the next image in that direction dynamically in the <classname>NavigationManager</classname>."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1602
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[@Override\n"
      "public void navigate(NavigationEvent event) {\n"
      "    switch (event.getDirection()) {\n"
      "        case FORWARD:\n"
      "            if (++pos < imageNames.length-1)\n"
      "                setNextComponent(createView(pos+1));\n"
      "            break;\n"
      "        case BACK:\n"
      "            if (--pos > 0)\n"
      "                setPreviousComponent(createView(pos-1));\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1608
#, no-c-format
msgid "The <classname>Switch</classname> component is a two-state selector that can be toggled either by tapping or sliding and looks like the switch button in Apple iOS. It extends <classname>CheckBox</classname> and has therefore <classname>Boolean</classname> value type. The caption is managed by the containing layout."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1616
#, no-c-format
msgid ""
      "<![CDATA[VerticalComponentGroup group =\n"
      "        new VerticalComponentGroup();\n"
      "Switch myswitch = new Switch(\"To be or not to be?\");\n"
      "myswitch.setValue(true);\n"
      "group.addComponent(myswitch);]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1618
#, no-c-format
msgid "As with other field components, you can handle value changes with a <interfacename>ValueChangeListener</interfacename>. Use <methodname>setImmediate(true)</methodname> to get them immediately when toggled."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1625
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.mobile.components.switch\"/>."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1641
#, no-c-format
msgid ""
      "<![CDATA[.v-touchkit-switch { }\n"
      "  .v-touchkit-switch-slider { }]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1643
#, no-c-format
msgid "The component has an overall <literal>v-touchkit-switch</literal> style. The slider element has <literal>v-touchkit-switch-slider</literal> style."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1653
#, no-c-format
msgid "The <classname>VerticalComponentGroup</classname> is a layout component for grouping components in a vertical stack with a border. Component captions are placed left of the components, and the components are aligned right. The component group is typically used for forms or with <classname>NavigationButton</classname> to create navigation menus."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1661
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[VerticalComponentGroup group =\n"
      "    new VerticalComponentGroup(\"TouchKit Components\");\n"
      "group.setWidth(\"100%\");\n"
      "        \n"
      "// Navigation to sub-views\n"
      "group.addComponent(new NavigationButton(\n"
      "    new PopoverView()));\n"
      "group.addComponent(new NavigationButton(\n"
      "    new DecoratedPopoverView()));\n"
      "\n"
      "layout.addComponent(box);]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1663
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.mobile.components.verticalcomponentgroup\"/>."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1680
#, no-c-format
msgid "<![CDATA[.v-touchkit-verticalcomponentgroup { }]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1682
#, no-c-format
msgid "The component has an overall <literal>v-touchkit-verticalcomponentgroup</literal> style. If the component has a caption, the <literal>v-touchkit-has-caption</literal> style is added."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1692
#, no-c-format
msgid "The <classname>HorizontalButtonGroup</classname> is intended for grouping buttons inside the slots of a <classname>VerticalComponentGroup</classname> with a special button group style."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1699
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[VerticalComponentGroup vertical =\n"
      "        new VerticalComponentGroup();\n"
      "vertical.addComponent(new TextField(\"Name\"));\n"
      "\n"
      "HorizontalButtonGroup buttons =\n"
      "        new HorizontalButtonGroup();\n"
      "buttons.addComponent(new Button(\"OK\"));\n"
      "buttons.addComponent(new Button(\"Cancel\"));\n"
      "vertical.addComponent(buttons);]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1701
#, no-c-format
msgid "The result is shown in"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1715
#, no-c-format
msgid "You can also make single buttons prettier by wrapping them in the component. Also the <classname>Upload</classname> component has a button, and you can give it the <literal>v-button</literal> style to make it look like a button would in the group<phrase condition=\"web\">, as is done in <xref linkend=\"mobile.features.upload\"/></phrase>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1723
#, no-c-format
msgid "Despite the name, and the fact that the button group is intended for buttons, you can, in fact, put any components inside it. Whether the result is meaningful, depends on the component."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1732
#, no-c-format
msgid "<![CDATA[.v-touchkit-horizontalbuttongroup { }]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1734
#, no-c-format
msgid "The component has an overall <literal>v-touchkit-horizontalbuttongroup</literal> style. As noted above, the TouchKit style sheet includes special rules for components that have the <literal>v-button</literal> style inside the group."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1746
#, no-c-format
msgid "The <classname>TabBarView</classname> is a layout component that consist of a tab bar at the bottom of the screen and a content area. Each tab has a content component which is displayed when the tab is selected."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1753
#, no-c-format
msgid "<classname>TabBar</classname> with Four <classname>NavigationView</classname>s"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1764
#, no-c-format
msgid "<classname>TabBarView</classname> implements <interfacename>ComponentContainer</interfacename>, but uses its own specialized API for monipulating tabs. To add a new tab, you need to call <methodname>addTab()</methodname> with the content component. It creates the tab and returns a <classname>Tab</classname> object for managing it. You should set at least the caption and icon for a tab."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1773
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[TabBarView bar = new TabBarView();\n"
      "\n"
      "// Create some Vaadin component to use as content\n"
      "Label content = new Label(\"Really simple content\");\n"
      "\n"
      "// Create a tab for it\n"
      "Tab tab = bar.addTab(label);\n"
      "\n"
      "// Set tab name and/or icon\n"
      "tab.setCaption(\"tab name\");\n"
      "tab.setIcon(new ThemeResource(...));]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1775
#, no-c-format
msgid "A tab can be removed with <methodname>removeTab()</methodname>. Note that the <interfacename>ComponentContainer</interfacename> methods <methodname>addComponent()</methodname> and <methodname>removeComponent()</methodname> will throw an <classname>UnsupportedOperationException</classname> if used."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1784
#, no-c-format
msgid "Changing Tab Selection"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1786
#, no-c-format
msgid "Current tab selection can be accessed with <methodname>getSelectedTab()</methodname> and set with <methodname>setSelectedTab()</methodname>. Changing tab selection either by the user or programmatically causes a <interfacename>SelectedTabChangeEvent</interfacename>, which you can handle with a <interfacename>SelectedTabChangeListener</interfacename>."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1796
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[Tab selectedTab = bar.getSelectedTab();\n"
      "bar.setSelectedTab(selectedTab);]]>"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1802
#, no-c-format
msgid ""
      "<![CDATA[.v-touchkit-tabbar {} \n"
      ".v-touchkit-tabbar-wrapper {} \n"
      ".v-touchkit-tabbar-toolbar {} ]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1804
#, no-c-format
msgid "The component has overall <literal>v-touchkit-tabbar</literal> style. Content area is wrapped inside a <literal>v-touchkit-tabbar-wrapper</literal> element. Tab bar control area itself has the <literal>v-touchkit-tabbar-toolbar</literal> style."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:1815
#, no-c-format
msgid "EmailField"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1817
#, no-c-format
msgid "The <classname>EmailField</classname> is just like the regular <classname>TextField</classname>, except that it has automatic capitalization and correction turned off. Mobile devices also recognize the field as an email field and can offer a virtual keyboard for the purpose, so that it includes the at (<literal>@</literal>) and period (<literal>.</literal>) characters, and possibly a shorthand for <literal>.com</literal>."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1827
#, no-c-format
msgid "<classname>EmailField</classname> while editing"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1838 chapter-mobile.xml:1899
#, no-c-format
msgid ""
      "<![CDATA[.v-textfield {}\n"
      ".v-textfield.v-textfield-error {}]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1840
#, no-c-format
msgid "The <classname>EmailField</classname> has an overall <literal>v-textfield</literal> style, just like a regular <classname>TextField</classname> component would. It will get also the <literal>v-textfield-error</literal> if there is a component error, for example, from failed validation."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:1851
#, no-c-format
msgid "NumberField"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1853
#, no-c-format
msgid "The <classname>NumberField</classname> is just like the regular <classname>TextField</classname>, except that it is marked as a numeric input field for mobile devices, so that they will show a numeric virtual keyboard rather than the default alphanumeric."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1861
#, no-c-format
msgid "<classname>NumberField</classname> while editing"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1872
#, no-c-format
msgid ""
      "<![CDATA[.v-textfield {}\n"
      ".v-textfield.v-numberfield-error {}]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1874
#, no-c-format
msgid "The <classname>NumberField</classname> has an overall <literal>v-textfield</literal> style, just like a regular <classname>TextField</classname> component would. It will get also the <literal>v-numberfield-error</literal> if there is a component error, for example, from failed validation."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:1885
#, no-c-format
msgid "UrlField"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1887
#, no-c-format
msgid "The <classname>UrlField</classname> is just like the regular <classname>TextField</classname>, except that it is marked as a URL input field for mobile devices, so that they will show a URL input virtual keyboard rather than the default alphanumeric. It has convenience methods <methodname>getUrl()</methodname> and <methodname>setUrl(URL url)</methodname> for converting input value from and to java.net.URL."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1901
#, no-c-format
msgid "The <classname>UrlField</classname> has an overall <literal>v-textfield</literal> style, just like a regular <classname>TextField</classname> component would."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1911
#, no-c-format
msgid "Advanced Mobile Features"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1914
#, no-c-format
msgid "Providing a Fallback UI"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1916
#, no-c-format
msgid "You may need to use the same URL and hence the same servlet for both the mobile TouchKit UI and for regular browsers. In this case, you need to recognize the mobile browsers compatible with Vaadin TouchKit and provide a fallback UI for any other browsers. The fallback UI can be a regular Vaadin UI, a \"Sorry!\" message, or a redirection to an alternate user interface."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1925
#, no-c-format
msgid "You can handle the fallback logic in a custom <classname>UIProvider</classname> that creates the UIs in the servlet. As TouchKit supports only WebKit-based browsers, you can do the recognition by checking if the <parameter>user-agent</parameter> string contains the sub-string \"<literal>webkit</literal>\" as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1933
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[public class MyUIProvider\n"
      "        extends UIProvider {\n"
      "    @Override\n"
      "    public Class<? extends UI> getUIClass(\n"
      "            UIClassSelectionEvent event) {\n"
      "        String userAgent = event.getRequest()\n"
      "                .getHeader(\"user-agent\").toLowerCase();\n"
      "        if(userAgent.contains(\"webkit\")) {\n"
      "            return MyMobileUI.class;\n"
      "        } else {\n"
      "            return MyFallbackUI.class;\n"
      "        }\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1935
#, no-c-format
msgid "The custom UI provider has to be added in a custom servlet class, which you need to define in the <filename>web.xml</filename>, as described in <xref linkend=\"mobile.elements.settings\"/>. For example, as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1941
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class MyServlet extends TouchKitServlet {\n"
      "    private MyUIProvider uiProvider = new MyUIProvider();\n"
      "\n"
      "    @Override\n"
      "    protected void servletInitialized() throws ServletException {\n"
      "        super.servletInitialized();\n"
      "        \n"
      "        getService().addSessionInitListener(\n"
      "                new SessionInitListener() {\n"
      "            @Override\n"
      "            public void sessionInit(SessionInitEvent event)\n"
      "                    throws ServiceException {\n"
      "                event.getSession().addUIProvider(uiProvider);\n"
      "            }\n"
      "        });\n"
      "\n"
      "        ... other custom servlet settings ...\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1943
#, no-c-format
msgid "See the Vornitologist demo for a working example."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:1949
#, no-c-format
msgid "Geolocation"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1951
#, no-c-format
msgid "The geolocation feature in TouchKit allows receiving the geographical location from the mobile device. The browser will ask the user to confirm that the web site is allowed to get the location information. Tapping <guibutton>Share Location</guibutton> gives the permission. The browser will give the position acquired by GPS, cellular positioning, or Wi-Fi positioning, as enabled in the device."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1960
#, no-c-format
msgid "Geolocation is requested by calling the static <classname>Geolocator</classname><methodname>.detect()</methodname> method. You need to provide a <classname>PositionCallback</classname> handler that is called when the device has an answer for your request. If the geolocation request succeeded, <methodname>onSuccess()</methodname> is called. Otherwise, e.g . if the user didn't allow sharing of his location, <methodname> onFailure</methodname> is called. The geolocation data is provided in a <classname>Position</classname> object."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:1971
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[Geolocator.detect(new PositionCallback() {\n"
      "    public void onSuccess(Position position) {\n"
      "        double latitude  = position.getLatitude();\n"
      "        double longitude = position.getLongitude();\n"
      "        double accuracy  = position.getAccuracy();\n"
      "\n"
      "        ...\n"
      "    }\n"
      "\n"
      "    public void onFailure(int errorCode) {\n"
      "        ...\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1973
#, no-c-format
msgid "The position is given as degrees with fractions. The longitude is positive to East and negative to West of the Prime Meridian passing through Greenwich, following the convention for coordinate systems. The accuracy is given in meters. In addition to the above data, the following are also provided:"
msgstr ""

#. Tag: listitem
#: chapter-mobile.xml:1981
#, no-c-format
msgid "Altitude"
msgstr ""

#. Tag: listitem
#: chapter-mobile.xml:1982
#, no-c-format
msgid "Altitude accuracy"
msgstr ""

#. Tag: listitem
#: chapter-mobile.xml:1983
#, no-c-format
msgid "Heading"
msgstr ""

#. Tag: listitem
#: chapter-mobile.xml:1984
#, no-c-format
msgid "Speed"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1987
#, no-c-format
msgid "If any of the position data is unavailable, its value will be zero."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1991
#, no-c-format
msgid "The <methodname>onFailure()</methodname> is called if the positioning fails for some reason. The <parameter>errorCode</parameter> explains the reason. Error 1 is returned if the permission was denied, 2 if the position is unavailable, 3 on positioning timeout, and 0 on an unknown error."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:1999
#, no-c-format
msgid "Notice that geolocation can take significant time, depending on the location method used by the device. With Wi-Fi and cellular positioning, the time is usually less than 30 seconds. With GPS, it can reach minutes or longer, especially if the reception is bad. However, once a location fix has been made, updates to the location will be faster. If you are making navigation software, you need to update the position data fairly frequently by calling <classname>Geolocator</classname><methodname>.detect()</methodname> multiple times."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2011
#, no-c-format
msgid "Displaying Position on a Map"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2013
#, no-c-format
msgid "Geographical positions are often visualized with a map. There are countless ways to do that, for example, in Vornitologist we use the <link xlink:href=\"http://vaadin.com/directory#addon/v-leaflet\">V-Leaflet</link> add-on component."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2021
#, no-c-format
msgid "The <classname>MapView</classname> in Vornitologist is a TouchKit navigation view that uses a custom <classname>VornitologistMap</classname> component extended from the V-Leaflet <classname>LMap</classname> component."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:2028
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[public class MapView extends NavigationView\n"
      "       implements PositionCallback, LeafletClickListener {\n"
      "    private VornitologistMap map;\n"
      "    private double latestLongitude;\n"
      "    private double latestLatitude;\n"
      "    private Point center;\n"
      "    private Bounds extent;\n"
      "    ...]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2030
#, no-c-format
msgid "When TouchKit gets the position, we center the map as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:2034
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[@Override\n"
      "public void onSuccess(Position position) {\n"
      "    // Store the new position in the map view\n"
      "    latestLatitude = position.getLatitude();\n"
      "    latestLongitude = position.getLongitude();\n"
      "\n"
      "    // Store the position also in the UI for other views\n"
      "    VornitologistUI touchKitUI = VornitologistUI.getCurrent();\n"
      "    touchKitUI.setCurrentLatitude(position.getLatitude());\n"
      "    touchKitUI.setCurrentLongitude(position.getLongitude());\n"
      "\n"
      "    setCenter();\n"
      "}\n"
      "\n"
      "private void setCenter() {\n"
      "    if (map != null) {\n"
      "        center = new Point(latestLatitude, latestLongitude);\n"
      "        extent = new Bounds(center);\n"
      "        map.setCenter(center);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2040
#, no-c-format
msgid "Storing Data in the Local Storage"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2042
#, no-c-format
msgid "The <classname>LocalStorage</classname> UI extension allows storing data in the HTML5 local storage from the server-side application. The storage is a singleton, which you can get with <methodname>LocalStorage.get()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:2049
#, no-c-format
msgid "<![CDATA[final LocalStorage storage = LocalStorage.get();]]>"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2052
#, no-c-format
msgid "Storing Data"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2054
#, no-c-format
msgid "You can store data in the local storage as key-value pairs with the <methodname>put()</methodname> method. Both the key and value must be strings. Storing the data requires a client round-trip, so the success or failure of the store operation can be handled with an optional <interfacename>LocalStorageCallback</interfacename>."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:2062
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[// Editor for the value to be stored\n"
      "final TextField valueEditor = new TextField(\"Value\");\n"
      "valueEditor.setNullRepresentation(\"\");\n"
      "layout.addComponent(valueEditor);\n"
      "\n"
      "Button store = new Button(\"Store\", new ClickListener() {\n"
      "    @Override\n"
      "    public void buttonClick(ClickEvent event) {\n"
      "        storage.put(\"value\", valueEditor.getValue(),\n"
      "                    new LocalStorageCallback() {\n"
      "            @Override\n"
      "            public void onSuccess(String value) {\n"
      "                Notification.show(\"Stored\");\n"
      "            }\n"
      "            \n"
      "            @Override\n"
      "            public void onFailure(FailureEvent error) {\n"
      "                Notification.show(\"Storing Failed\");\n"
      "            }\n"
      "        });\n"
      "    }\n"
      "}));\n"
      "layout.addComponent(store);]]>"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2066
#, no-c-format
msgid "Retrieving Data from the Storage"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2068
#, no-c-format
msgid "You can retrieve data from the local storage with the <methodname>get()</methodname> method. It takes the key and a <interfacename>LocalStorageCallback</interfacename> to receive the retrieved value, or a failure. Retrieving the value to the server-side requires a client rount-trip and another server request is made to send the value with the callback."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:2077
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[storage.get(\"value\", new LocalStorageCallback() {\n"
      "    @Override\n"
      "    public void onSuccess(String value) {\n"
      "        valueEditor.setValue(value);\n"
      "        Notification.show(\"Value Retrieved\");\n"
      "    }\n"
      "\n"
      "    @Override\n"
      "    public void onFailure(FailureEvent error) {\n"
      "        Notification.show(\"Failed because: \" +\n"
      "                          error.getMessage());\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2083
#, no-c-format
msgid "Uploading Content"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2085
#, no-c-format
msgid "Uploading content from a mobile device works just like with regular Vaadin applications using the <classname>Upload</classname> component."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2090
#, no-c-format
msgid "In an offline UI or client-side code in general, you need to handle uploading differently, using a special upload widget or handler."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2096
#, no-c-format
msgid "Server-Side <classname>Upload</classname> Component"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2098
#, no-c-format
msgid "In a server-side UI, you can use the regular <classname>Upload</classname> component described in <xref linkend=\"components.upload\"/>. When choosing a file, the device will ask to select the file from files, gallery, camera, or other possible sources, depending on the device. The only difference to normal use is that the upload component must be in <emphasis>immediate</emphasis> mode."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2108
#, no-c-format
msgid "Uploading is supported by most mobile operating systems, such as iOS, Android, and Windows RT devices, but not in some, such as WP8."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2113
#, no-c-format
msgid "The following example shows how to implement simple upload to an in-memory storage."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:2118
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Display the image - only a placeholder first\n"
      "final Image image = new Image();\n"
      "image.setWidth(\"100%\");\n"
      "image.setVisible(false);\n"
      "layout.addComponent(image);\n"
      "\n"
      "// Implement both receiver that saves upload in a file and\n"
      "// listener for successful upload\n"
      "class ImageUploader implements Receiver, SucceededListener,\n"
      "                               ProgressListener {\n"
      "    final static int maxLength = 10000000;\n"
      "    ByteArrayOutputStream fos = null;\n"
      "    String filename;\n"
      "    Upload upload;\n"
      "    \n"
      "    public ImageUploader(Upload upload) {\n"
      "        this.upload = upload;\n"
      "    }\n"
      " \n"
      "    public OutputStream receiveUpload(String filename,\n"
      "                                      String mimeType) {\n"
      "        this.filename = filename;\n"
      "        fos = new ByteArrayOutputStream(maxLength + 1);\n"
      "        return fos; // Return the output stream to write to\n"
      "    }\n"
      "\n"
      "    @Override\n"
      "    public void updateProgress(long readBytes,\n"
      "                               long contentLength) {\n"
      "        if (readBytes > maxLength) {\n"
      "            Notification.show(\"Too big content\");\n"
      "            upload.interruptUpload();\n"
      "        }\n"
      "    }\n"
      "\n"
      "    public void uploadSucceeded(SucceededEvent event) {\n"
      "        // Show the uploaded file in the image viewer\n"
      "        image.setSource(new StreamResource(new StreamSource() {\n"
      "            @Override\n"
      "            public InputStream getStream() {\n"
      "                byte[] bytes = fos.toByteArray();\n"
      "                return new ByteArrayInputStream(bytes);\n"
      "            }\n"
      "        }, filename));\n"
      "        \n"
      "        image.setVisible(true);\n"
      "    }\n"
      "};\n"
      "\n"
      "Upload upload = new Upload();\n"
      "ImageUploader uploader = new ImageUploader(upload);\n"
      "upload.setReceiver(uploader);\n"
      "upload.addSucceededListener(uploader);\n"
      "upload.setImmediate(true); // Only button\n"
      "\n"
      "// Wrap it in a button group to give better style\n"
      "HorizontalButtonGroup group = new HorizontalButtonGroup();\n"
      "group.addComponent(upload);\n"
      "layout.addComponent(group);]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2120
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.mobile.features.upload\"/> (&copy;2001 Marko Gr&ouml;nroos)."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2126
#, no-c-format
msgid "Mobile Upload"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2139
#, no-c-format
msgid "Upload on the Client-Side"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2141
#, no-c-format
msgid "When making a client-side widget that handles file upload, such as for offline mode, you can use the GWT <link xlink:href=\"http://www.gwtproject.org/javadoc/latest/com/google/gwt/user/client/ui/FileUpload.html\"><classname>FileUpload</classname> component</link>. In such case, you need to communicate the image data to the server with an RPC call."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2149
#, no-c-format
msgid "On a mobile device, the perhaps most common upload task is to capture images with the integrated camera. To display them in the client-side UI correctly, you want make sure that they have reasonable size and correct orientation, without making a server round-trip to do the corrections. To send them to the server, you want to avoid using too much bandwidth. The <classname>ImageUpload</classname> widget included in the <literal>lib-gwt-imageupload</literal> add-on, <link xlink:href=\"https://vaadin.com/directory#addon/lib-gwt-imageupload\">available from Vaadin Directory</link>, allows launching the camera application in the device and capturing an image. It further allows defining an image manipulation pipeline with transformations to reduce the image size if necessary, correct the orientation according to EXIF data, and so forth. The corrected image is loaded to a memory buffer, which you can display in another widget, send to the server, or store in the local store."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2167
#, no-c-format
msgid "In the following, we allow capturing an image with the camera, normalize the image and reduce its size, and reduce the size further for displaying it in a thumbnail. Notice that the image data is encoded as a URL, which can be used as such in CSS, for example."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:2174
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[final ImageUpload fileUpload = new ImageUpload();\n"
      "\n"
      "// Have a separate button to initiate the upload\n"
      "final VButton takePhotoButton = new VButton();\n"
      "takePhotoButton.addClickHandler(new ClickHandler() {\n"
      "    @Override\n"
      "    public void onClick(ClickEvent event) {\n"
      "        fileUpload.click();\n"
      "    }\n"
      "});\n"
      "\n"
      "// Capture images from the camera, instead of allowing to\n"
      "// choose from gallery or other sources.\n"
      "fileUpload.setCapture(true);\n"
      "\n"
      "// Normalize the orientation and make size suitable for\n"
      "// sending to server\n"
      "EXIFOrientationNormalizer normalizer =\n"
      "        new EXIFOrientationNormalizer();\n"
      "normalizer.setMaxWidth(1024);\n"
      "normalizer.setMaxHeight(1024);\n"
      "fileUpload.addImageManipulator(normalizer);\n"
      "fileUpload.addImageLoadedHandler(new ImageLoadedHandler() {\n"
      "    @Override\n"
      "    public void onImageLoaded(ImageLoadedEvent event) {\n"
      "        // Store the image data as encoded URL\n"
      "        setImage(event.getImageData().getDataURL());\n"
      "    }\n"
      "});\n"
      "\n"
      "// Reduce the size further for displaying a thumbnail\n"
      "ImageTransformer thumbGenerator = new ImageTransformer();\n"
      "thumbGenerator.setImageDataSource(fileUpload);\n"
      "thumbGenerator.setMaxWidth(75);\n"
      "thumbGenerator.setMaxHeigth(75);\n"
      "thumbGenerator.addImageLoadedHandler(new ImageLoadedHandler() {\n"
      "   @Override\n"
      "   public void onImageLoaded(ImageLoadedEvent event) {\n"
      "       // Store the thumbnail image data as encoded URL\n"
      "       setThumbnail(event.getImageData().getDataURL());\n"
      "   }\n"
      "});]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2176
#, no-c-format
msgid "See the Parking Demo for more details about the usage of the add-on."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2184
#, no-c-format
msgid "Offline Mode"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2186
#, no-c-format
msgid "While regular Vaadin TouchKit applications are server-side applications, it allows a special <emphasis>offline mode</emphasis>, which is a client-side Vaadin UI that switched to automatically when the network connection is not available. The offline UI is included in the widget set of the regular server-side UI and stored in the browser cache. By providing a special cache manifest, the browser caches the page so strongly that it persists even after browser restart."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2197
#, no-c-format
msgid "Offline Mode in the Parking Demo"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2205
#, no-c-format
msgid "During offline operation, the offline UI can store data in the HTML5 local storage of the mobile browser and then passed to the server-side application when the connection is again available."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2211
#, no-c-format
msgid "See the Parking and Vornitologist demos and their source code for complete examples of the offline mode."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2217
#, no-c-format
msgid "Enabling the Cache Manifest"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2219
#, no-c-format
msgid "HTML5 supports a <emphasis>cache manifest</emphasis>, which makes offline web applications possible. It controls how different resources are cached. The manifest is generated by TouchKit, but you need to enable it in the TouchKit settings. To do so, you need to define a custom servlet, as described in <xref linkend=\"mobile.elements.servlet\"/>, and call <methodname>setCacheManifestEnabled(true)</methodname> for the cache settings, as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:2229
#, no-c-format
msgid ""
      "<![CDATA[TouchKitSettings s = getTouchKitSettings();\n"
      "...\n"
      "s.getApplicationCacheSettings()\n"
      " .setCacheManifestEnabled(true);]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2231
#, no-c-format
msgid "You also need to define a MIME type for the manifest in the <filename>web.xml</filename> deployment descriptor as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:2236
#, no-c-format
msgid ""
      "<![CDATA[<mime-mapping>\n"
      "        <extension>manifest</extension>\n"
      "        <mime-type>text/cache-manifest</mime-type>\n"
      "</mime-mapping>]]>"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2240
#, no-c-format
msgid "Enabling Offline Mode"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2242
#, no-c-format
msgid "To enable the offline mode, you need to add the <classname>OfflineModeSettings</classname> extension to the UI."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:2247
#, no-c-format
msgid ""
      "<![CDATA[OfflineModeSettings offline = new OfflineModeSettings();\n"
      "...\n"
      "offline.extend(this);]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2249
#, no-c-format
msgid "You can extend the <classname>OfflineModeSettings</classname> extension to to transfer data conveniently from the offline UI to the server-side, as described in <xref linkend=\"mobile.offline.data\"/>."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2257
#, no-c-format
msgid "The Offline User Interface"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2259
#, no-c-format
msgid "An offline mode is built like any other client-side module, as described in <xref linkend=\"clientside\"/>. You can use any GWT, Vaadin, add-on, and also TouchKit widgets in the offline user interface."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2265
#, no-c-format
msgid "Most typically, a client-side application builds a simplified UI for data browsing and entry. It stores the data in the HTML5 local storage. It watches if the server connection is restored, and if it is, it sends any collected data to the server and suggests to return to the online mode."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2272
#, no-c-format
msgid "The Parking demo provides an example implementation of an offline mode user interface. The Ticket view is implemented as a fat client-side widget, where the server-side view only communicates the state to the widget."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2281
#, no-c-format
msgid "Sending Data to Server"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2283
#, no-c-format
msgid "Once the connection is available, the offline UI can send any collected data to the server-side. You can send the data from the offline UI, for example, by making a server RPC call to a server-side UI extension, as described in <xref linkend=\"gwt.rpc\"/>."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2292
#, no-c-format
msgid "The Offline Theme"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2294
#, no-c-format
msgid "Normally, client-side modules have their own stylesheets in the <filename>public</filename> folder that is compiled into the client-side target, as described in <xref linkend=\"gwt.styling\"/> and <xref linkend=\"clientside.module.stylesheet\"/>. However, you may want to have the offline mode have the same visual style as the online mode. To use the same theme as the server-side application, you need to define the theme path in the widget set definition file as follows."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:2304
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>&lt;set-configuration-property\n"
      "    name='touchkit.manifestlinker.additionalCacheRoot'\n"
      "    value='src/main/webapp/VAADIN/themes/<replaceable>mytheme</replaceable>:../../../VAADIN/themes/<replaceable>mytheme</replaceable> /&gt;"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2306
#, no-c-format
msgid "You need to follow a CSS style structure required by the Vaadin theme in your offline application. If you use any Vaadin widgets, as described in <xref linkend=\"widgets.vaadin\"/>, they will use the Vaadin theme."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2315
#, no-c-format
msgid "Building an Optimized Widget Set"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2317
#, no-c-format
msgid "Mobile networks are generally somewhat slower than DSL Internet connections. When starting a Vaadin application, the widget set is the biggest resource that needs to be loaded in the browser. As most of the Vaadin components are not used by most applications, especially mobile ones, it is beneficial to create an optimized version of the widget set."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2325
#, no-c-format
msgid "Vaadin supports lazy loading of individual widget implementations when they are needed. The <classname>TouchKitWidgetSet</classname> used in TouchKit applications optimizes the widgetset to only download the most essential widgets first and then load other widget implementation lazily. This is a good compromise for most TouchKit applications. Nevertheless, because of the high latency of most mobile networks, loading the widget set in small pieces might not be the best solution for every case. With custom optimization, you can create a monolithic widget set stripped off all unnecessary widgets. Together with proper GZip compression, is should be quite light-weight for mobile browsers."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2338
#, no-c-format
msgid "However, if the application has big components which are rarely used or not on the initial views, it may be best to load those widgets eagerly or lazily."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2344
#, no-c-format
msgid "You can find a working example of widget set optimization in the <filename>ParkingWidgetset.gwt.xml</filename> and <filename>WidgetMapGenerator.java</filename> in the Vornitologist sources."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2351
#, no-c-format
msgid "Generating the Widget Map"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2353
#, no-c-format
msgid "You can fine-tune a widget set by using a custom <classname>WidgetMapGenerator</classname> implementation. The generator class should extend <classname>TouchKitBundleLoaderFactory</classname> and override its <methodname>getConnectorsForWidgetset()</methodname> method. The method returns the connector classes of the widgets used in the widget set."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2362
#, no-c-format
msgid "The list of used connectors (and their widgets) can be built manually if you know what components you use in your application. You can also, for example, use a debugger to dig into the <classname>CommunicationManager</classname> class in Vaadin, which opens all the views of the running application. It contains a set of all components that have been used so far."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2371
#, no-c-format
msgid "In Vornitologist, we first build a list of the connector class names in the constructor as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:2376
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class WidgetLoaderFactory\n"
      "       extends TouchKitBundleLoaderFactory {\n"
      "  private final ArrayList<String> usedConns;\n"
      "\n"
      "  public WidgetLoaderFactory() {\n"
      "      usedConnectors = new ArrayList<String>();\n"
      "      usedConnectors.add(SwitchConnector.class.getName());\n"
      "      usedConnectors.add(EmbeddedConnector.class.getName());\n"
      "      usedConnectors.add(NumberFieldConnector.class.getName());\n"
      "      ...]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2378
#, no-c-format
msgid "Then we use the list it in the <methodname>getConnectorsForWidgetset()</methodname> to create the proper list of class type definitions by filtering them from all class type definitions. <classname>JClassType</classname> is used for type definition."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:2386
#, no-c-format
msgid ""
      "<?pocket-size 70% ?><![CDATA[@Override\n"
      "protected Collection<JClassType> getConnectorsForWidgetset(\n"
      "        TreeLogger logger, TypeOracle typeOracle)\n"
      "        throws UnableToCompleteException {\n"
      "    // The usedConnectors list should contain all the\n"
      "    // connectors that we need in Vornitologist, so we\n"
      "    // can leave all others away.\n"
      "\n"
      "    // Get all connectors in the unoptimized widget set\n"
      "    Collection<JClassType> connectorsForWidgetset = super\n"
      "            .getConnectorsForWidgetset(logger, typeOracle);\n"
      "\n"
      "    // Filter the connectors using the used list\n"
      "    ArrayList<JClassType> arrayList =\n"
      "            new ArrayList<JClassType>();\n"
      "    for (JClassType jClassType : connectorsForWidgetset) {\n"
      "        String qualifiedSourceName =\n"
      "            jClassType.getQualifiedSourceName();\n"
      "        if (usedConnectors.contains(qualifiedSourceName)) {\n"
      "            arrayList.add(jClassType);\n"
      "        }\n"
      "    }\n"
      "    return arrayList;\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2390
#, no-c-format
msgid "Defining the Widget Loading Style"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2392
#, no-c-format
msgid "The <methodname>getLoadStyle()</methodname> method should return the widget loading style, which should be <parameter>EAGER</parameter> to get a monolithic widgetset."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:2398
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[    @Override\n"
      "    protected LoadStyle getLoadStyle(JClassType connectorType) {\n"
      "        if (eagerWidgets.contains(connectorType)) {\n"
      "            return LoadStyle.EAGER;\n"
      "        } else {\n"
      "            return super.getLoadStyle(connectorType);\n"
      "        }\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2402
#, no-c-format
msgid "Applying the Custom Widget Map Generator"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2404
#, no-c-format
msgid "It needs to be defined in the <filename>.gwt.xml</filename> widget set definition file as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:2409
#, no-c-format
msgid ""
      "&lt;generate-with class=\"<replaceable>com.myprj.WidgetLoaderFactory</replaceable>\"&gt;\n"
      "    &lt;when-type-assignable class=\"com.vaadin.client.metadata.ConnectorBundleLoader\" /&gt;\n"
      "&lt;/generate-with&gt;"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2413
#, no-c-format
msgid "Deployment"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2415
#, no-c-format
msgid "Note that you need to enable GZip compression for your deployment if you wish to optimize the startup time and minimize the amount of transferred data. The best method for doing that highly depends on your hosting setup, so we do not cover it here."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2425
#, no-c-format
msgid "Testing and Debugging on Mobile Devices"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2427
#, no-c-format
msgid "Testing places special challenges for mobile devices. The mobile browsers may not have much debugging features and you may not be able to install third-party debugging add-ons, such as the Chrome Developer Tools."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2434
#, no-c-format
msgid "Debugging"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2436
#, no-c-format
msgid "The debug window, as described in <xref linkend=\"advanced.debug\"/>, works on mobile browsers as well, even if it is a bit harder to use."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2442
#, no-c-format
msgid "The lack of in-browser analysis tools can be helped with simple client-side coding. For example, you can dump the HTML content of the page with the <parameter>innerHTML</parameter> property in the HTML DOM. To do so, you need to execute a JavaScript call from the server-side and handle its response with a call-back method, as described in <xref linkend=\"advanced.javascript.callback\"/>."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2452
#, no-c-format
msgid "Desktop Debugging"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2454
#, no-c-format
msgid "TouchKit supports especially WebKit-based browsers, which are used in iOS and Android devices. You can therefore reach a decent compatibility by using a desktop browser based on WebKit, such as Google Chrome. Features such as geolocation are also supported by desktop browsers. If you make your phone/tablet-detection and orientation detection using screen size, you can easily emulate the modes by resizing the browser. Also, the browsers have special development settings to emulate some features in touch devices."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:2467
#, no-c-format
msgid "Remote Debugging"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:2469
#, no-c-format
msgid "Both Safari and <link xlink:href=\"https://developers.google.com/chrome-developer-tools/docs/remote-debugging\">Chrome</link> support remote debugging, which allows you to debug the supported mobile browsers remotely from a desktop browser."
msgstr ""

