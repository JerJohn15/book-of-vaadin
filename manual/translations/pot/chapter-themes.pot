# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2014-05-20 12:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: chapter-themes.xml:11
#, no-c-format
msgid "Themes"
msgstr ""

#. Tag: primary
#: chapter-themes.xml:14
#, no-c-format
msgid "theme"
msgstr ""

#. Tag: primary
#: chapter-themes.xml:17 chapter-themes.xml:120 chapter-themes.xml:533
#, no-c-format
msgid "<primary>CSS</primary>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:20
#, no-c-format
msgid "This chapter provides details about using and creating <emphasis>themes</emphasis> that control the visual look of web applications. Themes are created using Sass, which is an extension of CSS (Cascading Style Sheets), or with plain CSS. We provide an introduction to CSS, especially concerning the styling of HTML by element classes."
msgstr ""

#. Tag: title
#: chapter-themes.xml:29
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: chapter-themes.xml:31
#, no-c-format
msgid "Vaadin separates the appearance of the user interface from its logic using <emphasis>themes</emphasis>. Themes can include Sass or CSS style sheets, custom HTML layouts, and any necessary graphics. Theme resources can also be accessed from application code as <classname>ThemeResource</classname> objects."
msgstr ""

#. Tag: para
#: chapter-themes.xml:38
#, no-c-format
msgid "Custom themes are placed under the <filename>VAADIN/themes/</filename> folder of the web application (under <filename>WebContent</filename> in Eclipse or <filename>src/main/webapp</filename> in Maven projects). This location is fixed -- the <filename>VAADIN</filename> folder contains static resources that are served by the Vaadin servlet. The servlet augments the files stored in the folder by resources found from corresponding <filename>VAADIN</filename> folders contained in JARs in the class path. For example, the built-in themes are stored in the <filename>vaadin-themes.jar</filename>."
msgstr ""

#. Tag: para
#: chapter-themes.xml:49
#, no-c-format
msgid "illustrates the contents of a theme."
msgstr ""

#. Tag: title
#: chapter-themes.xml:55
#, no-c-format
msgid "Contents of a Theme"
msgstr ""

#. Tag: para
#: chapter-themes.xml:66
#, no-c-format
msgid "The name of a theme folder defines the name of the theme. The name is used in the <literal>@Theme</literal> annotation that sets the theme. A theme must contain either a <filename>styles.scss</filename> for Sass themes, or <filename>styles.css</filename> stylesheet for plain CSS themes, but other contents have free naming. We recommend that you have the actual theme content in a SCSS file named after the theme, such as <filename>mytheme.scss</filename>, to make the names more unique."
msgstr ""

#. Tag: para
#: chapter-themes.xml:76
#, no-c-format
msgid "We also suggest a convention for naming the folders as <filename>img</filename> for images, <filename>layouts</filename> for custom layouts, and <filename>css</filename> for additional stylesheets."
msgstr ""

#. Tag: para
#: chapter-themes.xml:82
#, no-c-format
msgid "Custom themes need to extend a base theme, as described in <xref linkend=\"themes.creating\"/>. Copying and modifying an existing theme is also possible, but it is not recommended, as it may need more work to maintain if the modifications are small."
msgstr ""

#. Tag: para
#: chapter-themes.xml:89
#, no-c-format
msgid "You use a theme by specifying it with the <literal>@Theme</literal> annotation for the &ui; class of the application as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:94
#, no-c-format
msgid ""
      "<![CDATA[@Theme(\"mytheme\")\n"
      "public class MyUI extends UI {\n"
      "    @Override\n"
      "    protected void init(VaadinRequest request) {\n"
      "        ...\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:96
#, no-c-format
msgid "A theme can contain alternate styles for user interface components, which can be changed as needed."
msgstr ""

#. Tag: para
#: chapter-themes.xml:101
#, no-c-format
msgid "In addition to style sheets, a theme can contain HTML templates for custom layouts used with <classname>CustomLayout</classname>. See <xref linkend=\"layout.customlayout\"/> for details."
msgstr ""

#. Tag: para
#: chapter-themes.xml:107
#, no-c-format
msgid "Resources provided in a theme can also be accessed using the <classname>ThemeResource</classname> class, as described in <xref linkend=\"application.resources.theme\"/>. This allows displaying theme resources in component icons, in the <classname>Image</classname> component, and other such uses."
msgstr ""

#. Tag: title
#: chapter-themes.xml:117
#, no-c-format
msgid "Introduction to Cascading Style Sheets"
msgstr ""

#. Tag: secondary
#: chapter-themes.xml:121
#, no-c-format
msgid "introduction"
msgstr ""

#. Tag: para
#: chapter-themes.xml:124
#, no-c-format
msgid "Cascading Style Sheets or CSS is the basic technique to separate the appearance of a web page from the content represented in HTML. In this section, we give an introduction to CSS and look how they are relevant to software development with Vaadin."
msgstr ""

#. Tag: title
#: chapter-themes.xml:132
#, no-c-format
msgid "CSS Information Sources"
msgstr ""

#. Tag: para
#: chapter-themes.xml:134
#, no-c-format
msgid "As we can only give a short intruction in this book, we encourage you to refer to the rich literature on CSS and the many resources available in the web. You can find the authoratitative specifications of CSS standards from the <link xlink:href=\"http://www.w3.org/Style/CSS/\">W3C website</link><phrase condition=\"web\">and other literature, references, and tutorials from the <link xlink:href=\"http://www.dmoz.org/Computers/Data_Formats/Style_Sheets/CSS/\">Open Directory Project page on CSS</link>, as well as from other sources</phrase>."
msgstr ""

#. Tag: title
#: chapter-themes.xml:148
#, no-c-format
msgid "Applying CSS to HTML"
msgstr ""

#. Tag: para
#: chapter-themes.xml:150
#, no-c-format
msgid "Let us consider the following HTML document that contains various markup elements for formatting text. Vaadin UIs work in essentially similar documents, even though they use somewhat different elements to draw the user interface."
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:157
#, no-c-format
msgid ""
      "&lt;html&gt;\n"
      "    &lt;head&gt;\n"
      "        &lt;title&gt;My Page&lt;/title&gt;\n"
      "        &lt;link rel=\"stylesheet\" type=\"text/css\"\n"
      "              href=\"mystylesheet.css\"/&gt;\n"
      "    &lt;/head&gt;\n"
      "    &lt;body&gt;\n"
      "        <emphasis role=\"strong\">&lt;p&gt;</emphasis>This is a paragraph<emphasis role=\"strong\">&lt;/p&gt;</emphasis>\n"
      "        <emphasis role=\"strong\">&lt;p&gt;</emphasis>This is another paragraph<emphasis role=\"strong\">&lt;/p&gt;</emphasis>\n"
      "        &lt;table&gt;\n"
      "            &lt;tr&gt;\n"
      "                <emphasis role=\"strong\">&lt;td&gt;</emphasis>This is a table cell<emphasis role=\"strong\">&lt;/td&gt;</emphasis>\n"
      "                <emphasis role=\"strong\">&lt;td&gt;</emphasis>This is another table cell<emphasis role=\"strong\">&lt;/td&gt;</emphasis>\n"
      "            &lt;/tr&gt;\n"
      "        &lt;/table&gt;\n"
      "    &lt;/body&gt;\n"
      "&lt;/html&gt;"
msgstr ""

#. Tag: para
#: chapter-themes.xml:159
#, no-c-format
msgid "The HTML elements that will be styled later by matching CSS rules are emphasized above."
msgstr ""

#. Tag: para
#: chapter-themes.xml:164
#, no-c-format
msgid "The <literal>&lt;link&gt;</literal> element in the HTML header defines the used CSS stylesheet. The definition is automatically generated by Vaadin in the HTML page that loads the UI of the application. A stylesheet can also be embedded in the HTML document itself, as is done when optimizing their loading in Vaadin TouchKit, for example."
msgstr ""

#. Tag: title
#: chapter-themes.xml:174
#, no-c-format
msgid "Basic CSS Rules"
msgstr ""

#. Tag: para
#: chapter-themes.xml:176
#, no-c-format
msgid "A stylesheet contains a set of <emphasis>rules</emphasis> that can match the HTML elements in the page. Each rule consists of one or more <emphasis>selectors</emphasis>, separated with commas, and a <emphasis>declaration block</emphasis> enclosed in curly braces. A declaration block contains a list of <emphasis>property</emphasis> statements. Each property has a label and a value, separated with a colon. A property statement ends with a semicolon."
msgstr ""

#. Tag: para
#: chapter-themes.xml:186
#, no-c-format
msgid "Let us look at an example that matches certain elements in the simple HTML document given in the previous section:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:191
#, no-c-format
msgid ""
      "<![CDATA[p, td { \n"
      "  color: blue;\n"
      "}\n"
      "\n"
      "td { \n"
      "  background: yellow;\n"
      "  font-weight: bold;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:193
#, no-c-format
msgid "The <literal>p</literal> and <literal>td</literal> are element type selectors that match with <literal>&lt;p&gt;</literal> and <literal>&lt;td&gt;</literal> elements in HTML, respectively. The first rule matches with both elements, while the second matches only with <literal>&lt;td&gt;</literal> elements. Let us assume that you have saved the above style sheet with the name <filename>mystylesheet.css</filename> and consider the following HTML file located in the same folder."
msgstr ""

#. Tag: title
#: chapter-themes.xml:204
#, no-c-format
msgid "Simple Styling by Element Type"
msgstr ""

#. Tag: title
#: chapter-themes.xml:213
#, no-c-format
msgid "Style Inheritance in CSS"
msgstr ""

#. Tag: para
#: chapter-themes.xml:215
#, no-c-format
msgid "CSS has <emphasis>inheritance</emphasis> where contained elements inherit the properties of their parent elements. For example, let us change the above example and define it instead as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:221
#, no-c-format
msgid ""
      "<![CDATA[table {\n"
      "    color: blue;\n"
      "    background: yellow;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:223
#, no-c-format
msgid "All elements contained in the <literal>&lt;table&gt;</literal> element would have the same properties. For example, the text in the contained <literal>&lt;td&gt;</literal> elements would be in blue color."
msgstr ""

#. Tag: title
#: chapter-themes.xml:231
#, no-c-format
msgid "HTML Element Types"
msgstr ""

#. Tag: para
#: chapter-themes.xml:233
#, no-c-format
msgid "HTML has a number of element types, each of which accepts a specific set of properties. The <literal>&lt;div&gt;</literal> elements are generic elements that can be used to create almost any layout and formatting that can be created with a specific HTML element type. Vaadin uses <literal>&lt;div&gt;</literal> elements extensively to draw the UI, especially in layout components."
msgstr ""

#. Tag: primary
#: chapter-themes.xml:243
#, no-c-format
msgid "Google Web Toolkit"
msgstr ""

#. Tag: secondary
#: chapter-themes.xml:243
#, no-c-format
msgid "themeing"
msgstr ""

#. Tag: para
#: chapter-themes.xml:243
#, no-c-format
msgid "Matching elements by their type as shown above is, however, rarely if ever used in style sheets for Vaadin applications. We used it above, because it is the normal way in regular HTML documents that use the various HTML elements for formatting text, but it is not applicable in Vaadin UIs that consist mostly of <literal>&lt;div&gt;</literal> elements. Instead, you need to match by element class, as described next."
msgstr ""

#. Tag: title
#: chapter-themes.xml:257
#, no-c-format
msgid "Matching by Element Class"
msgstr ""

#. Tag: para
#: chapter-themes.xml:259
#, no-c-format
msgid "Matching HTML elements by the <emphasis>class</emphasis> attribute is the most common form of matching in Vaadin stylesheets. It is also possible to match with the <emphasis>identifier</emphasis> of a unique HTML element."
msgstr ""

#. Tag: para
#: chapter-themes.xml:265
#, no-c-format
msgid "The class of an HTML element is defined with the <parameter>class</parameter> attribute as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:270
#, no-c-format
msgid ""
      "<?pocket-size 70% ?>&lt;html&gt;\n"
      "  &lt;body&gt;\n"
      "    <emphasis role=\"strong\">&lt;p class=\"normal\"&gt;</emphasis>This is the first paragraph<emphasis role=\"strong\">&lt;/p&gt;</emphasis>\n"
      "\n"
      "    <emphasis role=\"strong\">&lt;p class=\"another\"&gt;</emphasis>This is the second paragraph<emphasis role=\"strong\">&lt;/p&gt;</emphasis>\n"
      "\n"
      "    &lt;table&gt;\n"
      "      &lt;tr&gt;\n"
      "        <emphasis role=\"strong\">&lt;td class=\"normal\"&gt;</emphasis>This is a table cell<emphasis role=\"strong\">&lt;/td&gt;</emphasis>\n"
      "        <emphasis role=\"strong\">&lt;td class=\"another\"&gt;</emphasis>This is another table cell<emphasis role=\"strong\">&lt;/td&gt;</emphasis>\n"
      "      &lt;/tr&gt;\n"
      "    &lt;/table&gt;\n"
      "  &lt;/body&gt;\n"
      "&lt;/html&gt;"
msgstr ""

#. Tag: para
#: chapter-themes.xml:272
#, no-c-format
msgid "The class attributes of HTML elements can be matched in CSS rules with a selector notation where the class name is written after a period following the element name. This gives us full control of matching elements by their type and class."
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:279
#, no-c-format
msgid ""
      "<![CDATA[p.normal   {color: red;}\n"
      "p.another  {color: blue;}\n"
      "td.normal  {background: pink;}\n"
      "td.another {background: yellow;}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:281
#, no-c-format
msgid "The page would look as shown below:"
msgstr ""

#. Tag: title
#: chapter-themes.xml:286
#, no-c-format
msgid "Matching HTML Element Type and Class"
msgstr ""

#. Tag: para
#: chapter-themes.xml:297
#, no-c-format
msgid "We can also match solely by the class by using the universal selector <literal>*</literal> for the element name, for example <literal>*.normal</literal>. The universal selector can also be left out altogether so that we use just the class name following the period, for example <literal>.normal</literal>."
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:305
#, no-c-format
msgid ""
      "<![CDATA[.normal {\n"
      "    color: red;\n"
      "}\n"
      "\n"
      ".another {\n"
      "    blackground: yellow;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:307
#, no-c-format
msgid "In this case, the rule will match with all elements of the same class regardless of the element type. The result is shown in <xref linkend=\"figure.themes.match.class\"/>. This example illustrates a technique to make style sheets compatible regardless of the exact HTML element used in drawing a component."
msgstr ""

#. Tag: title
#: chapter-themes.xml:316
#, no-c-format
msgid "Matching Only HTML Element Class"
msgstr ""

#. Tag: para
#: chapter-themes.xml:327
#, no-c-format
msgid "To ensure future compatibility, we recommend that you use only matching based on the classes and <emphasis>do not</emphasis> match for specific HTML element types in CSS rules, because Vaadin may change the exact HTML implementation how components are drawn in the future. For example, Vaadin earlier used <literal>&lt;div&gt;</literal> element to draw <classname>Button</classname> components, but later it was changed to use the special-purpose <literal>&lt;button&gt;</literal> element in HTML. Because of using the <literal>v-button</literal> style class in the CSS rules for the button, styling it has changed only very little."
msgstr ""

#. Tag: title
#: chapter-themes.xml:341
#, no-c-format
msgid "Matching by Descendant Relationship"
msgstr ""

#. Tag: para
#: chapter-themes.xml:343
#, no-c-format
msgid "CSS allows matching HTML by their containment relationship. For example, consider the following HTML fragment:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:348
#, no-c-format
msgid ""
      "<?pocket-size 70% ?>&lt;body&gt;\n"
      "  &lt;p class=\"mytext\"&gt;Here is some text inside a\n"
      "                    paragraph element&lt;/p&gt;\n"
      "  &lt;table class=\"<emphasis role=\"strong\">mytable</emphasis>\"&gt;\n"
      "    &lt;tr&gt;\n"
      "      &lt;td class=\"<emphasis role=\"strong\">mytext</emphasis>\"&gt;Here is text inside\n"
      "                      a table and inside a td element.&lt;/td&gt;\n"
      "    &lt;/tr&gt;\n"
      "  &lt;/table&gt;\n"
      "&lt;/body&gt;"
msgstr ""

#. Tag: para
#: chapter-themes.xml:350
#, no-c-format
msgid "Matching by the class name <literal>.mytext</literal> alone would match both the <literal>&lt;p&gt;</literal> and <literal>&lt;td&gt;</literal> elements. If we want to match only the table cell, we could use the following selector:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:356
#, no-c-format
msgid "<![CDATA[.mytable .mytext {color: blue;}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:358
#, no-c-format
msgid "To match, a class listed in a rule does not have to be an immediate descendant of the previous class, but just a descendant. For example, the selector \"<literal>.v-panel .v-button</literal>\" would match all elements with class <literal>.v-button</literal> somewhere inside an element with class <literal>.v-panel</literal>."
msgstr ""

#. Tag: title
#: chapter-themes.xml:368
#, no-c-format
msgid "Importance of Cascading"
msgstr ""

#. Tag: para
#: chapter-themes.xml:370
#, no-c-format
msgid "CSS or Cascading Stylesheets are, as the name implies, about <emphasis>cascading</emphasis> stylesheets, which means applying the stylesheet rules according to their origin, importance, scope, specifity, and order."
msgstr ""

#. Tag: para
#: chapter-themes.xml:377
#, no-c-format
msgid "For exact rules for cascading in CSS, see the section <link xlink:href=\"http://www.w3.org/TR/css3-cascade/#cascading\">Cascading</link> in the CSS specification."
msgstr ""

#. Tag: title
#: chapter-themes.xml:384
#, no-c-format
msgid "Importance"
msgstr ""

#. Tag: para
#: chapter-themes.xml:386
#, no-c-format
msgid "Declarations in CSS rules can be made override declarations with otherwise higher priority by annotating them as <literal>!important</literal>. For example, an inline style setting made in the <literal>style</literal> attribute of an HTML element has a higher specificity than any rule in a CSS stylesheet."
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:394
#, no-c-format
msgid "<![CDATA[<div class=\"v-button\" style=\"height: 20px;\">...]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:396
#, no-c-format
msgid "You can override the higher specificity with the <literal>!important</literal> annotation as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:401
#, no-c-format
msgid "<![CDATA[.v-button {height: 30px !important;}]]>"
msgstr ""

#. Tag: title
#: chapter-themes.xml:405
#, no-c-format
msgid "Specificity"
msgstr ""

#. Tag: para
#: chapter-themes.xml:407
#, no-c-format
msgid "A rule that specifies an element with selectors more closely overrides ones that specify it less specifically. With respect to the element class selectors most commonly used in Vaadin themes, the specificity is determined by the number of class selectors in the selector."
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:414
#, no-c-format
msgid ""
      "<![CDATA[.v-button {}\n"
      ".v-verticallayout .v-button {}\n"
      ".v-app .v-verticallayout .v-button {}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:416
#, no-c-format
msgid "In the above example, the last rule would have the highest specificity and would match."
msgstr ""

#. Tag: para
#: chapter-themes.xml:421
#, no-c-format
msgid "As noted earlier, style declarations given in the style attribute of a HTML element have higher specificity than declarations in a CSS rule, except if the <literal>!important</literal> annotation is given."
msgstr ""

#. Tag: para
#: chapter-themes.xml:427
#, no-c-format
msgid "See the CSS3 <link xlink:href=\"http://www.w3.org/TR/selectors/#specificity\">selectors module specification</link> for details regarding how the specificity is computed."
msgstr ""

#. Tag: title
#: chapter-themes.xml:436
#, no-c-format
msgid "Order"
msgstr ""

#. Tag: para
#: chapter-themes.xml:438
#, no-c-format
msgid "CSS rules given later have higher priority than ones given earlier. For example, in the following, the latter rule overrides the former and the color will be black:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:444
#, no-c-format
msgid ""
      "<![CDATA[.v-button {color: white}\n"
      ".v-button {color: black}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:446
#, no-c-format
msgid "As specificity has a higher cascading priority than order, you could make the first rule have higher priority by adding specificity as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:452
#, no-c-format
msgid ""
      "<![CDATA[.v-app .v-button {color: white}\n"
      ".v-button {color: black}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:454
#, no-c-format
msgid "The order is important to notice in certain cases, because Vaadin does not guarantee the order in which CSS stylesheets are loaded in the browser, which can in fact be random and result in very unexpected behavior. This is not relevant for Sass stylesheets, which are compiled to a single stylesheet. For plain CSS stylesheets, such as add-on or TouchKit stylesheets, the order can be relevant."
msgstr ""

#. Tag: title
#: chapter-themes.xml:466
#, no-c-format
msgid "Style Class Hierarchy of a Vaadin UI"
msgstr ""

#. Tag: para
#: chapter-themes.xml:468
#, no-c-format
msgid "Let us give a real case in a Vaadin UI by considering a simple Vaadin UI with a label and a button inside a vertical layout:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:473
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[// UI has v-ui style class\n"
      "@Theme(\"mytheme\")\n"
      "public class HelloWorld extends UI {\n"
      "    @Override\n"
      "    protected void init(VaadinRequest request) {\n"
      "        // VerticalLayout has v-verticallayout style\n"
      "        VerticalLayout content = new VerticalLayout();\n"
      "        setContent(content);\n"
      "\n"
      "        // Label has v-label style\n"
      "        content.addComponent(new Label(\"Hello World!\"));\n"
      "        \n"
      "        // Button has v-button style\n"
      "        content.addComponent(new Button(\"Push Me!\",\n"
      "            new Button.ClickListener() {\n"
      "            @Override\n"
      "            public void buttonClick(ClickEvent event) {\n"
      "                Notification.show(\"Pushed!\");\n"
      "            }\n"
      "        }));\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:475
#, no-c-format
msgid "The UI will look by default as shown in <xref linkend=\"figure.themes.css.hierarchy.initial\"/>. By using a HTML inspector such as Firebug, you can view the HTML tree and the element classes and applied styles for each element."
msgstr ""

#. Tag: title
#: chapter-themes.xml:483
#, no-c-format
msgid "An Unthemed Vaadin UI"
msgstr ""

#. Tag: para
#: chapter-themes.xml:491
#, no-c-format
msgid "Now, let us look at the HTML element class structure of the UI, as we can see it in the HTML inspector:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:496
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>&lt;body class=\"<emphasis role=\"strong\">v-generated-body v-ff v-ff20 v-ff200 v-gecko v-lin</emphasis>\"\n"
      "      scroll=\"auto\"&gt;\n"
      "  &lt;div id=\"bookexamplesvaadin7helloworld-447164942\"\n"
      "       class=\"<emphasis role=\"strong\">v-app mytheme</emphasis>\"&gt;\n"
      "    &lt;div class=\"<emphasis role=\"strong\">v-ui v-scrollable</emphasis>\"\n"
      "         tabindex=\"1\" style=\"height: 100%; width: 100%;\"&gt;\n"
      "      &lt;div class=\"<emphasis role=\"strong\">v-loading-indicator first</emphasis>\"\n"
      "           style=\"position: absolute; display: none;\"&gt;&lt;/div&gt;\n"
      "      &lt;div class=\"<emphasis role=\"strong\">v-verticallayout v-layout v-vertical\n"
      "                  v-widget v-has-width</emphasis>\"\n"
      "           style=\"width: 100%;\"&gt;\n"
      "        &lt;div class=\"<emphasis role=\"strong\">v-slot</emphasis>\"&gt;\n"
      "          &lt;div class=\"<emphasis role=\"strong\">v-label v-widget v-has-width</emphasis>\"\n"
      "               style=\"width: 100%;\"&gt;Hello World!&lt;/div&gt;\n"
      "        &lt;/div&gt;\n"
      "        &lt;div class=\"<emphasis role=\"strong\">v-slot</emphasis>\"&gt;\n"
      "          &lt;div class=\"<emphasis role=\"strong\">v-button v-widget</emphasis>\"\n"
      "               tabindex=\"0\" role=\"button\"&gt;\n"
      "            &lt;span class=\"<emphasis role=\"strong\">v-button-wrap</emphasis>\"&gt;\n"
      "              &lt;span class=\"<emphasis role=\"strong\">v-button-caption</emphasis>\"&gt;Push Me!&lt;/span&gt;\n"
      "            &lt;/span&gt;\n"
      "          &lt;/div&gt;\n"
      "        &lt;/div&gt;\n"
      "      &lt;/div&gt;\n"
      "    &lt;/div&gt;\n"
      "  &lt;/div&gt;\n"
      "  ...\n"
      "&lt;body&gt;"
msgstr ""

#. Tag: para
#: chapter-themes.xml:498
#, no-c-format
msgid "Now, consider the following theme where we set the colors and margins of various elements. The theme is actually a Sass theme."
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:503
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[@import \"../reindeer/reindeer.scss\";\n"
      "\n"
      "@mixin mytheme {\n"
      "  @include reindeer;\n"
      "\n"
      "  /* White background for the entire UI */\n"
      "  .v-ui {\n"
      "    background: white;\n"
      "  }\n"
      "  \n"
      "  /* All labels have white text on black background */\n"
      "  .v-label {\n"
      "    background: black;\n"
      "    color: white;\n"
      "    font-size: 24pt;\n"
      "    line-height: 24pt;\n"
      "    padding: 5px;\n"
      "  }\n"
      "\n"
      "  /* All buttons have blue caption and some margin */\n"
      "  .v-button {\n"
      "    margin: 10px;\n"
      "\n"
      "    /* A nested selector to increase specificity */\n"
      "    .v-button-caption {\n"
      "      color: blue;\n"
      "    }\n"
      "  }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:505
#, no-c-format
msgid "The look has changed as shown in <xref linkend=\"figure.themes.css.hierarchy.themed\"/>."
msgstr ""

#. Tag: title
#: chapter-themes.xml:511
#, no-c-format
msgid "Themed Vaadin UI"
msgstr ""

#. Tag: para
#: chapter-themes.xml:519
#, no-c-format
msgid "An element can have multiple classes separated with a space. With multiple classes, a CSS rule matches an element if any of the classes match. This feature is used in many Vaadin components to allow matching based on the state of the component. For example, when the mouse is over a <classname>Link</classname> component, <literal>over</literal> class is added to the component. Most of such styling is a feature of Google Web Toolkit."
msgstr ""

#. Tag: title
#: chapter-themes.xml:531
#, no-c-format
msgid "Notes on Compatibility"
msgstr ""

#. Tag: secondary
#: chapter-themes.xml:533
#, no-c-format
msgid "<secondary>compatibility</secondary>"
msgstr ""

#. Tag: primary
#: chapter-themes.xml:534
#, no-c-format
msgid "<primary>compatibility</primary>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:536
#, no-c-format
msgid "CSS is a standard continuously under development. It was first proposed in 1994. The specification of CSS is maintained by the CSS Working Group of World Wide Web Consortium (W3C). Versioned with backward-compatible \"levels\", CSS Level 1 was published in 1996, Level 2 in 1998, and the ongoing development of CSS Level 3 started in 1998. CSS3 is divided into a number of separate modules, each developed and progressing separately, and many of the modules are already Level 4."
msgstr ""

#. Tag: para
#: chapter-themes.xml:546
#, no-c-format
msgid "While the support for CSS has been universal in all graphical web browsers since at least 1995, the support has been very incomplete at times and there still exists an unfortunate number of incompatibilities between browsers. While we have tried to take these incompatibilities into account in the built-in themes in Vaadin, you need to consider them while developing your own themes. Compatibility issues are detailed in various CSS handbooks."
msgstr ""

#. Tag: title
#: chapter-themes.xml:561
#, no-c-format
msgid "Syntactically Awesome Stylesheets (Sass)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:563
#, no-c-format
msgid "Vaadin uses Sass for stylesheets. Sass is an extension of CSS3 that adds nested rules, variables, mixins, selector inheritance, and other features to CSS. Sass supports two formats for stylesheet: Vaadin themes are written in SCSS (<filename>.scss</filename>), which is a superset of CSS3, but Sass also allows a more concise indented format (<filename>.sass</filename>)."
msgstr ""

#. Tag: para
#: chapter-themes.xml:571
#, no-c-format
msgid "Sass can be used in two basic ways in Vaadin applications, either by compiling SCSS files to CSS or by doing the compilation on the fly. The latter way is possible if the development mode is enabled for the Vaadin servlet, as described in <xref linkend=\"application.environment.parameters\"/>."
msgstr ""

#. Tag: title
#: chapter-themes.xml:579
#, no-c-format
msgid "Sass Overview"
msgstr ""

#. Tag: title
#: chapter-themes.xml:582
#, no-c-format
msgid "Variables"
msgstr ""

#. Tag: para
#: chapter-themes.xml:584
#, no-c-format
msgid "Sass allows defining variables that can be used in the rules."
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:588
#, no-c-format
msgid ""
      "<![CDATA[$textcolor: blue;\n"
      "\n"
      ".v-button-caption {\n"
      "  color: $textcolor;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:590
#, no-c-format
msgid "The above rule would be compiled to CSS as:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:594
#, no-c-format
msgid ""
      "<![CDATA[.v-button-caption {\n"
      "  color: blue;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:596
#, no-c-format
msgid "Also mixins can have variables as parameters, as explained later."
msgstr ""

#. Tag: title
#: chapter-themes.xml:602
#, no-c-format
msgid "Nesting"
msgstr ""

#. Tag: para
#: chapter-themes.xml:604
#, no-c-format
msgid "Sass supports nested rules, which are compiled into inside-selectors. For example:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:609
#, no-c-format
msgid ""
      "<![CDATA[.v-app {\n"
      "  background: yellow;\n"
      "  \n"
      "  .mybutton {\n"
      "    font-style: italic;\n"
      "    \n"
      "    .v-button-caption {\n"
      "      color: blue;\n"
      "    }\n"
      "  }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:611
#, no-c-format
msgid "is compiled as:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:615
#, no-c-format
msgid ""
      "<![CDATA[.v-app {\n"
      "  background: yellow;\n"
      "}\n"
      "\n"
      ".v-app .mybutton {\n"
      "    font-style: italic;\n"
      "}\n"
      "\n"
      ".v-app .mybutton .v-button-caption {\n"
      "  color: blue;\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-themes.xml:620
#, no-c-format
msgid "Mixins"
msgstr ""

#. Tag: para
#: chapter-themes.xml:622
#, no-c-format
msgid "Mixins are rules that can be included in other rules. You define a mixin rule by prefixing it with the <literal>@mixin</literal> keyword and the name of the mixin. You can then use <literal>@include</literal> to apply it to another rule. You can also pass parameters to it, which are handled as local variables in the mixin."
msgstr ""

#. Tag: para
#: chapter-themes.xml:631
#, no-c-format
msgid "For example:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:635
#, no-c-format
msgid ""
      "<![CDATA[@mixin mymixin {\n"
      "  background: yellow;\n"
      "}\n"
      "\n"
      "@mixin othermixin($param) {\n"
      "  margin: $param;\n"
      "}\n"
      "\n"
      ".v-button-caption {\n"
      "  @include mymixin;\n"
      "  @include othermixin(10px);\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:637
#, no-c-format
msgid "The above SCSS would translated to the following CSS:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:641
#, no-c-format
msgid ""
      "<![CDATA[.v-button-caption {\n"
      "  background: yellow;\n"
      "  margin: 10px;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:643
#, no-c-format
msgid "You can also have nested rules in a mixin, which makes them especially powerful. Mixing in rules is used when extending Vaadin themes, as described in <xref linkend=\"themes.creating.sass\"/>."
msgstr ""

#. Tag: para
#: chapter-themes.xml:649
#, no-c-format
msgid "Vaadin themes are defined as mixins to allow for certain uses, such as different themes for different portlets in a portal."
msgstr ""

#. Tag: title
#: chapter-themes.xml:664
#, no-c-format
msgid "Sass Basics with Vaadin"
msgstr ""

#. Tag: para
#: chapter-themes.xml:666
#, no-c-format
msgid "We are not going to give in-depth documentation of Sass and refer you to its excellent documentation at <link xlink:href=\"http://sass-lang.com/\">http://sass-lang.com/</link>. In the following, we give just basic introduction to using it with Vaadin."
msgstr ""

#. Tag: para
#: chapter-themes.xml:673
#, no-c-format
msgid "You can create a new Sass-based theme with the Eclipse plugin, as described in <xref linkend=\"themes.eclipse\"/>."
msgstr ""

#. Tag: title
#: chapter-themes.xml:680
#, no-c-format
msgid "Compiling Sass Themes"
msgstr ""

#. Tag: title
#: chapter-themes.xml:683
#, no-c-format
msgid "Compiling On the Fly"
msgstr ""

#. Tag: para
#: chapter-themes.xml:685
#, no-c-format
msgid "The easiest way to use Sass themes is to let the Vaadin servlet compile them on the run. In this case, the SCSS source files are placed in the theme folder. Compilation is done each time the <filename>styles.css</filename> is requested from the server."
msgstr ""

#. Tag: para
#: chapter-themes.xml:692
#, no-c-format
msgid "The on-the-fly compilation takes a bit time, so it is only available when the Vaadin servlet is in the development mode, as described in <xref linkend=\"application.environment.parameters\"/>. Also, it requires the theme compiler and all its dependencies to be in the class path of the servlet. For production, you should compile the theme to CSS, as described next."
msgstr ""

#. Tag: title
#: chapter-themes.xml:703
#, no-c-format
msgid "Compiling in Eclipse"
msgstr ""

#. Tag: para
#: chapter-themes.xml:705
#, no-c-format
msgid "If using Eclipse and the Vaadin Plugin for Eclipse, its project wizard creates a Sass theme. It includes <menuchoice><guimenuitem>Compile Theme</guimenuitem></menuchoice> command in the toolbar to compile the project theme to CSS. Another command compiles also the widget set."
msgstr ""

#. Tag: title
#: chapter-themes.xml:713
#, no-c-format
msgid "Compiling Sass Theme"
msgstr ""

#. Tag: para
#: chapter-themes.xml:721
#, no-c-format
msgid "The <filename>WebContent/VAADIN/mytheme/styles.scss</filename> and any Sass sources included by it are compiled to <filename>styles.css</filename>."
msgstr ""

#. Tag: title
#: chapter-themes.xml:729
#, no-c-format
msgid "Compiling with Maven"
msgstr ""

#. Tag: para
#: chapter-themes.xml:731
#, no-c-format
msgid "To compile the themes with Maven, you need to include the built-in themes as a dependency:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:736
#, no-c-format
msgid ""
      "<![CDATA[  ...\n"
      "  <dependencies>\n"
      "    ...\n"
      "    <dependency>\n"
      "        <groupId>com.vaadin</groupId>\n"
      "        <artifactId>vaadin-themes</artifactId>\n"
      "        <version>${vaadin.version}</version>\n"
      "    </dependency>\n"
      "  </dependencies>\n"
      "  ...]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:738
#, no-c-format
msgid "This is automatically included at least in the <literal>vaadin-archetype-application</literal> archetype for Vaadin applications. The actual theme compilation is most conveniently done by the Vaadin Maven Plugin with <literal>update-theme</literal> and <literal>compile-theme</literal> goals."
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:746
#, no-c-format
msgid ""
      "<![CDATA[  ...\n"
      "  <plugin>\n"
      "    <groupId>com.vaadin</groupId>\n"
      "    <artifactId>vaadin-maven-plugin</artifactId>\n"
      "    ...\n"
      "    <executions>\n"
      "      <execution>\n"
      "        ...\n"
      "        <goals>\n"
      "          <goal>clean</goal>\n"
      "          <goal>resources</goal>\n"
      "          <goal>update-theme</goal>\n"
      "          <goal>update-widgetset</goal>\n"
      "          <goal>compile-theme</goal>\n"
      "          <goal>compile</goal>\n"
      "        </goals>\n"
      "      </execution>\n"
      "    </executions>]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:748
#, no-c-format
msgid "Once these are in place, the theme is compiled as part of relevant lifecycle phases, such as <literal>package</literal>."
msgstr ""

#. Tag: screen
#: chapter-themes.xml:753
#, no-c-format
msgid "<command>mvn</command> <parameter>package</parameter>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:755
#, no-c-format
msgid "You can also compile just the theme with the <package>compile-theme</package> goal:"
msgstr ""

#. Tag: screen
#: chapter-themes.xml:760
#, no-c-format
msgid "<command>mvn</command> <parameter>vaadin:compile-theme</parameter>"
msgstr ""

#. Tag: title
#: chapter-themes.xml:765
#, no-c-format
msgid "Compiling in Command-line"
msgstr ""

#. Tag: para
#: chapter-themes.xml:767
#, no-c-format
msgid "Sass style sheets can be compiled to CSS, with the <filename>styles.css</filename> of a custom theme as the compilation target. When compiled before deployment, the source files do not need to be in the theme folder."
msgstr ""

#. Tag: screen
#: chapter-themes.xml:774
#, no-c-format
msgid "<command>java</command> <parameter>-cp</parameter> <replaceable>'../../../WEB-INF/lib/*'</replaceable> com.vaadin.sass.SassCompiler styles.scss styles.css"
msgstr ""

#. Tag: para
#: chapter-themes.xml:776
#, no-c-format
msgid "The <parameter>-cp</parameter> parameter should point to the class path where the Vaadin JARs are located. In the above example, they are assumed to be locate in the <filename>WEB-INF/lib</filename> folder of the web application. If you have loaded the Vaadin libraries using Ivy, as is the case with projects created with the Vaadin Plugin for Eclipse, the Vaadin libraries are stored in Ivy's local repository. Its folder hierarchy is somewhat scattered, so we recommend that you retrieve the libraries to a single folder. We recommend using an Ant script as is described next."
msgstr ""

#. Tag: title
#: chapter-themes.xml:790
#, no-c-format
msgid "Compiling with Ant"
msgstr ""

#. Tag: para
#: chapter-themes.xml:792
#, no-c-format
msgid "With Apache Ant, you can easily resolve the dependencies with Ivy and compile the theme with the Theme Compiler included in Vaadin as follows. This build step can be conveniently included in a WAR build script."
msgstr ""

#. Tag: para
#: chapter-themes.xml:799
#, no-c-format
msgid "Start with the following configuration:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:803
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[<project xmlns:ivy=\"antlib:org.apache.ivy.ant\"\n"
      "         name=\"My Project\" basedir=\"../\"\n"
      "         default=\"package-war\">\n"
      "\n"
      "  <target name=\"configure\">\n"
      "    <!-- Where project source files are located -->\n"
      "    <property name=\"src-location\" value=\"src\" />\n"
      "\n"
      "    ... other project build definitions ...\n"
      "            \n"
      "    <!-- Name of the theme -->\n"
      "    <property name=\"theme\" value=\"book-examples\"/>\n"
      "        \n"
      "    <!-- Compilation result directory -->\n"
      "    <property name=\"result\" value=\"build/result\"/>\n"
      "  </target>\n"
      "\n"
      "  <!-- Initialize build -->\n"
      "  <target name=\"init\" depends=\"configure\">\n"
      "    <!-- Construct and check classpath -->\n"
      "    <path id=\"compile.classpath\">\n"
      "        <!-- Source code to be compiled -->\n"
      "        <pathelement path=\"${src-location}\" />\n"
      "            \n"
      "        <!-- Vaadin libraries and dependencies -->\n"
      "        <fileset dir=\"${result}/lib\">\n"
      "            <include name=\"*.jar\"/>\n"
      "        </fileset>\n"
      "    </path>\n"
      "\n"
      "    <mkdir dir=\"${result}\"/>\n"
      "  </target>]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:805
#, no-c-format
msgid "You should first resolve all Vaadin libraries to a single directory, which you can use for deployment, but also for theme compilation."
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:810
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[  <target name=\"resolve\" depends=\"init\">\n"
      "    <ivy:retrieve\n"
      "        pattern=\"${result}/lib/[module]-[type]-[artifact]-[revision].[ext]\"/>\n"
      "  </target>]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:812
#, no-c-format
msgid "Then, you can compile the theme as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:816
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[  <!-- Compile theme -->\n"
      "  <target name=\"compile-theme\"\n"
      "          depends=\"init, resolve\">\n"
      "    <delete dir=\"${result}/VAADIN/themes/${theme}\"/>\n"
      "    <mkdir dir=\"${result}/VAADIN/themes/${theme}\"/>\n"
      "            \n"
      "    <java classname=\"com.vaadin.sass.SassCompiler\"\n"
      "          fork=\"true\">\n"
      "      <classpath>\n"
      "        <path refid=\"compile.classpath\"/>\n"
      "      </classpath>\n"
      "      <arg value=\"WebContent/VAADIN/themes/${theme}/styles.scss\"/>\n"
      "      <arg value=\"${result}/VAADIN/themes/${theme}/styles.css\"/>\n"
      "    </java>\n"
      "\n"
      "            <!-- Copy theme resources -->\n"
      "    <copy todir=\"${result}/VAADIN/themes/${theme}\">\n"
      "      <fileset dir=\"WebContent/VAADIN/themes/${theme}\">\n"
      "        <exclude name=\"**/*.scss\"/>\n"
      "      </fileset>\n"
      "    </copy>\n"
      "  </target>\n"
      "</project>]]>"
msgstr ""

#. Tag: title
#: chapter-themes.xml:823
#, no-c-format
msgid "Creating and Using Themes"
msgstr ""

#. Tag: para
#: chapter-themes.xml:825
#, no-c-format
msgid "Custom themes are placed in the <filename>VAADIN/themes</filename> folder of the web application, in an Eclipse project under the <filename>WebContent</filename> folder or <filename>src/main/webapp</filename> in Maven projects, as was illustrated in <xref linkend=\"figure.themes.theme-contents\"/>. This location is fixed. You need to have a theme folder for each theme you use in your application, although applications rarely need more than a single theme."
msgstr ""

#. Tag: title
#: chapter-themes.xml:836
#, no-c-format
msgid "Sass Themes"
msgstr ""

#. Tag: para
#: chapter-themes.xml:838
#, no-c-format
msgid "You can use Sass themes in Vaadin in two ways, either by compiling them to CSS by yourself or by letting the Vaadin servlet compile them for you on-the-fly when the theme CSS is requested by the browser, as described in <xref linkend=\"themes.sass.compiling\"/>."
msgstr ""

#. Tag: para
#: chapter-themes.xml:845
#, no-c-format
msgid "To define a Sass theme with the name <varname>mytheme</varname>, you must place a file with name <filename>styles.scss</filename> in the theme folder <filename>VAADIN/themes/mytheme</filename>. If no <filename>styles.css</filename> exists in the folder, the Sass file is compiled on-the-fly when the theme is requested by a browser."
msgstr ""

#. Tag: para
#: chapter-themes.xml:853
#, no-c-format
msgid "We recommend that you organize the theme in at least two SCSS files so that you import the actual theme from a Sass file that is named more uniquely than the <filename>styles.scss</filename>, to make it distinquishable in the editor. This organization is how the Vaadin Plugin for Eclipse creates a new theme."
msgstr ""

#. Tag: para
#: chapter-themes.xml:861
#, no-c-format
msgid "If you use Vaadin add-ons that contain themes, Vaadin Plugin for Eclipse and Maven automatically add them to the <filename>addons.scss</filename> file."
msgstr ""

#. Tag: title
#: chapter-themes.xml:868
#, no-c-format
msgid "Theme SCSS"
msgstr ""

#. Tag: para
#: chapter-themes.xml:870
#, no-c-format
msgid "We recommend that the rules in a theme should be prefixed with a selector for the theme name. You can do the prefixing in Sass by enclosing the rules in a nested rule with a selector for the theme name."
msgstr ""

#. Tag: para
#: chapter-themes.xml:877
#, no-c-format
msgid "Themes are defined as Sass mixins, so after you import the mixin definitions, you can <literal>@include</literal> them in the theme rule as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:883
#, no-c-format
msgid ""
      "<![CDATA[@import \"addons.scss\";\n"
      "@import \"mytheme.scss\";\n"
      "\n"
      ".mytheme {\n"
      "  @include addons;\n"
      "  @include mytheme;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:885
#, no-c-format
msgid "However, this is mainly necessary if you use the UI in portlets, each of which can have its own theme, or in the special circumstance that the theme has rules that use empty parent selector <literal>&amp;</literal> to refer to the theme name."
msgstr ""

#. Tag: para
#: chapter-themes.xml:892
#, no-c-format
msgid "Otherwise, you can safely leave the nested theme selector out as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:897
#, no-c-format
msgid ""
      "<![CDATA[@import \"addons.scss\";\n"
      "@import \"mytheme.scss\";\n"
      "\n"
      "@include addons;\n"
      "@include mytheme;]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:899
#, no-c-format
msgid "The actual theme should be defined as follows, as a mixin that includes the base theme."
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:904
#, no-c-format
msgid ""
      "<![CDATA[@import \"../reindeer/reindeer.scss\";\n"
      "\n"
      "@mixin mytheme {\n"
      "  @include reindeer;\n"
      "\n"
      "  /* An actual theme rule */\n"
      "  .v-button {\n"
      "    color: blue;\n"
      "  }\n"
      "}\n"
      "]]>"
msgstr ""

#. Tag: title
#: chapter-themes.xml:909
#, no-c-format
msgid "Plain Old CSS Themes"
msgstr ""

#. Tag: para
#: chapter-themes.xml:911
#, no-c-format
msgid "In addition to Sass themes, you can create plain old CSS themes. CSS theme are more restricted than Sass styles - an application can only have one CSS theme while you can have multiple Sass themes."
msgstr ""

#. Tag: para
#: chapter-themes.xml:917
#, no-c-format
msgid "A CSS theme is defined in a <filename>styles.css</filename> file in the <filename>VAADIN/themes/mytheme</filename> folder. You need to import the <filename>legacy-styles.css</filename> of the built-in theme as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:923
#, no-c-format
msgid ""
      "<![CDATA[@import \"../reindeer/legacy-styles.css\";\n"
      "\n"
      ".v-app {\n"
      "    background: yellow;\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-themes.xml:927
#, no-c-format
msgid "Styling Standard Components"
msgstr ""

#. Tag: para
#: chapter-themes.xml:929
#, no-c-format
msgid "Each user interface component in Vaadin has a CSS style class that you can use to control the appearance of the component. Many components have additional sub-elements that also allow styling. You can add context-specific stylenames with <methodname>addStyleName()</methodname>. Notice that <methodname>getStyleName()</methodname> returns only the custom stylenames, not the built-in stylenames for the component."
msgstr ""

#. Tag: para
#: chapter-themes.xml:939
#, no-c-format
msgid "Please see the section on each component for a description of its styles. Most of the stylenames are determined in the client-side widget of each component. The easiest way to find out the styles of the elements is to use a HTML inspector such as FireBug."
msgstr ""

#. Tag: para
#: chapter-themes.xml:947
#, no-c-format
msgid "Some client-side components or component styles can be shared by different server-side components. For example, <literal>v-textfield</literal> style is used for all text input boxes in components, in addition to <classname>TextField</classname>."
msgstr ""

#. Tag: title
#: chapter-themes.xml:956
#, no-c-format
msgid "Built-in Themes"
msgstr ""

#. Tag: para
#: chapter-themes.xml:958
#, no-c-format
msgid "Vaadin currently includes the following built-in themes:"
msgstr ""

#. Tag: listitem
#: chapter-themes.xml:963
#, no-c-format
msgid "<literal>valo</literal>, the primary theme in Vaadin 7.3 (<emphasis>upcoming</emphasis>)"
msgstr ""

#. Tag: listitem
#: chapter-themes.xml:964
#, no-c-format
msgid "<literal>reindeer</literal>, the primary theme in Vaadin 6 and 7"
msgstr ""

#. Tag: listitem
#: chapter-themes.xml:965
#, no-c-format
msgid "<literal>chameleon</literal>, an easily customizable theme"
msgstr ""

#. Tag: listitem
#: chapter-themes.xml:966
#, no-c-format
msgid "<literal>runo</literal>, the default theme in IT Mill Toolkit 5"
msgstr ""

#. Tag: listitem
#: chapter-themes.xml:967
#, no-c-format
msgid "<literal>liferay</literal>, for Liferay portlets"
msgstr ""

#. Tag: para
#: chapter-themes.xml:970
#, no-c-format
msgid "In addition, there is the <literal>base</literal> theme, which should not be used directly, but is extended by the other built-in themes, except valo."
msgstr ""

#. Tag: para
#: chapter-themes.xml:975
#, no-c-format
msgid "The built-in themes are provided in the respective <filename>VAADIN/themes/&lt;theme&gt;/styles.scss</filename> stylesheets in the <filename>vaadin-themes</filename> JAR. Also the precompiled CSS files are included, in case you want to use the themes directly."
msgstr ""

#. Tag: para
#: chapter-themes.xml:982
#, no-c-format
msgid "Various constants related to the built-in themes are defined in the theme classes in <package>com.vaadin.ui.themes</package> package. These are mostly special style names for specific components."
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:988
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[@Theme(\"runo\")\n"
      "public class MyUI extends UI {\n"
      "    @Override\n"
      "    protected void init(VaadinRequest request) {\n"
      "        ...      \n"
      "        Panel panel = new Panel(\"Regular Panel in the Runo Theme\");\n"
      "        panel.addComponent(new Button(\"Regular Runo Button\"));\n"
      "        \n"
      "        // A button with the \"small\" style\n"
      "        Button smallButton = new Button(\"Small Runo Button\");\n"
      "        smallButton.addStyleName(Runo.BUTTON_SMALL);\n"
      "\n"
      "        Panel lightPanel = new Panel(\"Light Panel\");\n"
      "        lightPanel.addStyleName(Runo.PANEL_LIGHT);\n"
      "        lightPanel.addComponent(\n"
      "            new Label(\"With addStyleName(\\\"light\\\")\"));\n"
      "        ...]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:990
#, no-c-format
msgid "The example with the Runo theme is shown in <xref linkend=\"figure.themes.creating.builtin.runo\"/>."
msgstr ""

#. Tag: title
#: chapter-themes.xml:996
#, no-c-format
msgid "Runo Theme"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1004
#, no-c-format
msgid "The built-in themes come with a custom icon font, FontAwesome, which is used for icons in the theme, and which you can use as font icons, as described in <xref linkend=\"advanced.fonticon\"/>."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1011
#, no-c-format
msgid "Serving Built-In Themes Statically"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1013
#, no-c-format
msgid "The built-in themes included in the Vaadin library JAR are served dynamically from the JAR by the servlet. Serving themes and widget sets statically by the web server is more efficient. To do so, you need to extract the <filename>VAADIN/</filename> directories from the JAR to the web content directory (<filename>WebContent</filename> in Eclipse or <filename>src/main/webapp</filename> in Maven projects)."
msgstr ""

#. Tag: screen
#: chapter-themes.xml:1022
#, no-c-format
msgid "<prompt>$</prompt> <command>cd</command> WebContent"
msgstr ""

#. Tag: screen
#: chapter-themes.xml:1023
#, no-c-format
msgid "<prompt>$</prompt> <command>unzip</command> path-to/vaadin-server-&version.vaadin;.jar 'VAADIN/*'"
msgstr ""

#. Tag: screen
#: chapter-themes.xml:1024
#, no-c-format
msgid "<prompt>$</prompt> <command>unzip</command> path-to/vaadin-themes-&version.vaadin;.jar 'VAADIN/*'"
msgstr ""

#. Tag: screen
#: chapter-themes.xml:1025
#, no-c-format
msgid "<prompt>$</prompt> <command>unzip</command> path-to/vaadin-client-compiled-&version.vaadin;.jar 'VAADIN/*'"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1027
#, no-c-format
msgid "You can also serve static content from a front-end caching server, which reduces the load of the application server. In portals, you install the themes globally in the portal as described in <xref linkend=\"portal.liferay.install\"/>."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1034
#, no-c-format
msgid "Just make sure to update the static content when you upgrade to a newer version of Vaadin."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1040
#, no-c-format
msgid "Creation of a default theme for custom GWT widgets is described in <xref linkend=\"gwt.styling\"/>."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1047
#, no-c-format
msgid "Add-on Themes"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1049
#, no-c-format
msgid "You can find more themes as add-ons from the <link xlink:href=\"http://vaadin.com/directory\">Vaadin Directory</link>. In addition, many component add-ons contain a theme for the components they provide."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1056
#, no-c-format
msgid "The add-on themes need to be included in the project theme. Vaadin Plugin for Eclipse and Maven automatically include them in the <filename>addons.scss</filename> file in the project theme folder. It should be included by the project theme."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1066
#, no-c-format
msgid "Creating a Theme in Eclipse"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1068
#, no-c-format
msgid "The Eclipse plugin automatically creates a theme stub for new Vaadin projects. It also includes a wizard for creating new custom themes. Do the following steps to create a new theme."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1076
#, no-c-format
msgid "Select <menuchoice><guimenu>File</guimenu><guisubmenu>New</guisubmenu><guimenuitem>Other...</guimenuitem></menuchoice> in the main menu or right-click the <guilabel>Project Explorer</guilabel> and select <menuchoice><guimenu>New</guimenu><guimenuitem>Other...</guimenuitem></menuchoice>. A window will open."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1087
#, no-c-format
msgid "In the <guilabel>Select a wizard</guilabel> step, select the <menuchoice><guimenu>Vaadin</guimenu><guimenuitem>Vaadin Theme</guimenuitem></menuchoice> wizard."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1104
#, no-c-format
msgid "Click <guibutton>Next</guibutton> to proceed to the next step."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1110
#, no-c-format
msgid "In the <guilabel>Create a new Vaadin theme</guilabel> step, you have the following settings:"
msgstr ""

#. Tag: term
#: chapter-themes.xml:1117
#, no-c-format
msgid "<guilabel>Project</guilabel> (mandatory)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1119
#, no-c-format
msgid "The project in which the theme should be created."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1126
#, no-c-format
msgid "<guilabel>Theme name</guilabel> (mandatory)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1128
#, no-c-format
msgid "The theme name is used as the name of the theme folder and in a CSS tag (prefixed with \"<literal>v-theme-</literal>\"), so it must be a proper identifier. Only latin alphanumerics, underscore, and minus sign are allowed."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1139
#, no-c-format
msgid "<guilabel>Modify application classes to use theme</guilabel> (optional)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1141
#, no-c-format
msgid "The setting allows the wizard to write a code statement that enables the theme in the constructor of the selected application (UI) class(es). If you need to control the theme with dynamic logic, you can leave the setting unchecked or change the generated line later."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1163
#, no-c-format
msgid "Click <guibutton>Finish</guibutton> to create the theme."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1170
#, no-c-format
msgid "The wizard creates the theme folder under the <filename>WebContent/VAADIN/themes</filename> folder and the actual style sheet as <filename>mytheme.scss</filename> and <filename>styles.scss</filename> files, as illustrated in <xref linkend=\"figure.eclipse.theme.created\"/>."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1179
#, no-c-format
msgid "Newly Created Theme"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1190
#, no-c-format
msgid "The created theme extends a built-in base theme with an <literal>@import</literal> statement. See the explanation of theme inheritance in <xref linkend=\"themes.creating\"/>. Notice that the <filename>reindeer</filename> theme is not located in the <filename>widgetsets</filename> folder, but in the Vaadin JAR. See <xref linkend=\"themes.creating.builtin\"/> for information for serving the built-in themes."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1200
#, no-c-format
msgid "If you selected a UI class or classes in the <guilabel>Modify application classes to use theme</guilabel> in the theme wizard, the wizard will add the <literal>@Theme</literal> annotation to the UI class."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1206
#, no-c-format
msgid "If you later rename the theme in Eclipse, notice that changing the name of the folder will not automatically change the <literal>@Theme</literal> annotation. You need to change such references to theme names in the calls manually."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1215
#, no-c-format
msgid "Valo Theme"
msgstr ""

#. Tag: emphasis
#: chapter-themes.xml:1218
#, no-c-format
msgid "Valo is the new built-in theme in Vaadin 7.3. It is included in <link xlink:href=\"https://vaadin.com/releases\">prerelease versions</link>. At least 7.3.0.alpha1 still requires using the standard Sass compiler (version 3.2) on command-line, instead of the Vaadin Sass compiler."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1224
#, no-c-format
msgid "Valo is the word for light in Finnish. For mere geographical reasons, Finland is obsessed with light, with long winters without much sunlight but plenty of whiteness and long summer days bathed in light. Light is one of the cornerstones of visual arts, perhaps the most important one. A visual design begins from the use of light in an array of shades together with a color theory, to create a unique color scheme that illustrates a unique idea. Valo incorporates the use of light in its theoretical logic. It creates lines, borders, highlights, and shadows adaptively according to a background color, always with contrasts pleasant to human visual perception. A color theory is used to determine auxiliary colors that blend gently with the background. The static art is complemented with responsive animations."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1239
#, no-c-format
msgid "Basic Use"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1241
#, no-c-format
msgid "Valo is used just like other themes. Its optional parameters must be given before the <literal>@import</literal> statement."
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:1246
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[// Modify the base color of the theme\n"
      "$v-app-background-color: hsl(200, 50%, 50%);\n"
      "\n"
      "// Import valo after setting the parameters\n"
      "@import \"../valo/valo\";\n"
      "\n"
      ".mythemename {\n"
      "  @include valo;\n"
      "\n"
      "  // Your theme's rules go here\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1248
#, no-c-format
msgid "If you need to override mixins or function definitions in the valo theme, you must do that after the import statement, but before including the valo mixin."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1256
#, no-c-format
msgid "Common Settings"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1258
#, no-c-format
msgid "In the following, we describe the optional parameters that control the visual appearance of the Valo theme. In addition to the ones given here, component styles have their own parameters, listed in the sections describing the components in the other chapters."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1266
#, no-c-format
msgid "General Settings"
msgstr ""

#. Tag: term
#: chapter-themes.xml:1270
#, no-c-format
msgid "<varname>$v-app-loading-text</varname> (default: <literal>\"\"</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1272
#, no-c-format
msgid "A static text that is shown while the client-side engine is being loaded and started."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1279
#, no-c-format
msgid "<varname>$v-line-height</varname> (default: <literal>1.55</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1281
#, no-c-format
msgid "Base line height for all widgets."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1288
#, no-c-format
msgid "<varname>$v-app-background-color</varname> (default: <literal>hsl(210, 0%, 98%)</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1290
#, no-c-format
msgid "The background color in any way allowed in CSS: hexadesimal color code, RGB/A value, HSL/A value, or a color name. If the color is dark (has low luminance), a light foreground (text) color that gives high contrast with the background is automatically used."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1303
#, no-c-format
msgid "Font Settings"
msgstr ""

#. Tag: term
#: chapter-themes.xml:1307
#, no-c-format
msgid "<varname>$v-font-size</varname> (default: <literal>16px</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1309
#, no-c-format
msgid "Base font size. It should be specified in pixels."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1315
#, no-c-format
msgid "<varname>$v-font-weight</varname> (default: <literal>300</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1317
#, no-c-format
msgid "Font weight for normal fonts. It should be defined with a numeric value instead of symbolic."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1324
#, no-c-format
msgid "<varname>$v-font-color</varname> (default: computed)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1326
#, no-c-format
msgid "Foreground text color. The default is computed from the background color so that it gives a high contrast with the background."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1334
#, no-c-format
msgid "<varname>$v-font-family</varname> (default: <literal>\"Open Sans\", sans-serif</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1336
#, no-c-format
msgid "Font family and fallback fonts. The default font Open Sans is a web font included in the Valo theme. Other used Valo fonts must be specified in the list to enable them. See <xref linkend=\"themes.valo.fonts\"/>."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1345
#, no-c-format
msgid "<varname>$v-caption-font-size</varname> (default: <literal>round($v-font-size * 0.9)</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1347
#, no-c-format
msgid "Font size for component captions. The value should be a pixel value."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1354
#, no-c-format
msgid "<varname>$v-caption-font-weight</varname> (default: <literal>max(400, $v-font-weight)</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1356
#, no-c-format
msgid "Font weight for captions. It should be defined with a numeric value instead of symbolic."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1366
#, no-c-format
msgid "Layout Settings"
msgstr ""

#. Tag: term
#: chapter-themes.xml:1370
#, no-c-format
msgid "<varname>$v-unit-size</varname> (default: <literal>round(2.3 * $v-font-size)</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1372
#, no-c-format
msgid "Unit size for various measures. The value must be specified in pixels, with a suitable range of 18-50."
msgstr ""

#. Tag: varname
#: chapter-themes.xml:1379
#, no-c-format
msgid "$v-layout-margin-top"
msgstr ""

#. Tag: varname
#: chapter-themes.xml:1380
#, no-c-format
msgid "$v-layout-margin-right"
msgstr ""

#. Tag: varname
#: chapter-themes.xml:1381
#, no-c-format
msgid "$v-layout-margin-bottom"
msgstr ""

#. Tag: term
#: chapter-themes.xml:1382
#, no-c-format
msgid "<varname>$v-layout-margin-left</varname> (default: <literal>$v-unit-size</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1384
#, no-c-format
msgid "Layout margin sizes when the margin is enabled with <methodname>setMargin()</methodname>, as described in <xref linkend=\"layout.settings.margins\"/>."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1392
#, no-c-format
msgid "<varname>$v-layout-spacing-vertical</varname> and <varname>$v-layout-spacing-horizontal</varname> (default: <literal>round($v-unit-size/3)</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1396
#, no-c-format
msgid "Amount of vertical or horizontal space when spacing is enabled for a layout with <methodname>setSpacing()</methodname>, as described in <xref linkend=\"layout.settings.spacing\"/>."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1407
#, no-c-format
msgid "Component Features"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1409
#, no-c-format
msgid "The following settings apply to various graphical features of some components."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1416
#, no-c-format
msgid "<varname>$v-border-width</varname> (default: <literal>1px</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1418
#, no-c-format
msgid "Border thickness for components that have one. The measure must be specified in pixels."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1425
#, no-c-format
msgid "<varname>$v-border-radius</varname> (default: <literal>4px</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1427
#, no-c-format
msgid "Corner radius for components that have a border. The measure must be specified in pixels."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1434
#, no-c-format
msgid "<varname>$v-gradient-style</varname> (default: <literal>v-linear</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1436
#, no-c-format
msgid "Name of the color gradient style for components that have a gradient."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1443
#, no-c-format
msgid "<varname>$v-gradient-depth</varname> (default: <literal>8%</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1445
#, no-c-format
msgid "Gradient depth."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1451
#, no-c-format
msgid "<varname>$v-bevel-style</varname> (default: <literal>inset 0 1px 0 v-hilite, inset 0 -1px 0 v-shade</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1453
#, no-c-format
msgid "CSS shadow style to create bevels in some components. The value is a list of a highlight and shade insets."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1460
#, no-c-format
msgid "<varname>$v-bevel-depth</varname> (default: <literal>25%</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1462
#, no-c-format
msgid "The \"depth\" of a bevel shadow in a component. The actual amount of highlight and shade is computed from the depth."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1469
#, no-c-format
msgid "<varname>$v-focus-style</varname> (default: <literal>0 0 0 2px v-focus-color</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1471
#, no-c-format
msgid "Shadow specification for the field focus indicator: horizontal shadow position in pixels, vertical shadow position in pixels, blur distance in pixels, spread distance in pixels, and the color. The value <literal>v-focus-color</literal> is substituted with the value of <literal>$v-focus-color</literal>."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1482
#, no-c-format
msgid "<varname>$v-focus-color</varname> (default: <literal>null</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1484
#, no-c-format
msgid "Color for the field focus indicator. <literal>null</literal> value defaults to a high-contrast color computed from the background color."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1492
#, no-c-format
msgid "<varname>$v-animations-enabled</varname> (default: <literal>true</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1494
#, no-c-format
msgid "Specifies whether various CSS animations are used."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1500
#, no-c-format
msgid "<varname>$v-hover-styles-enabled</varname> (default: <literal>true</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1502
#, no-c-format
msgid "Specifies whether various <literal>:hover</literal> styles are used."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1509
#, no-c-format
msgid "<varname>$v-disabled-opacity</varname> (default: <literal>0.7</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1511
#, no-c-format
msgid "Opacity of disabled components, which are described in <xref linkend=\"components.features.enabled\"/>."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1518
#, no-c-format
msgid "<varname>$v-selection-color</varname> (default: <literal>null</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1520
#, no-c-format
msgid "Color of selection indicator in selection and various other components. The <literal>null</literal> value defaults to a high-contrast color computed from the background and foreground colors."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1529
#, no-c-format
msgid "<varname>$v-default-field-width</varname> (default: <literal>$v-unit-size * 5</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1531
#, no-c-format
msgid "Default width of certain field components, unless overridden with <methodname>setWidth()</methodname>."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1538
#, no-c-format
msgid "<varname>$v-error-indicator-color</varname> (default: <literal>#ed473b</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1540
#, no-c-format
msgid "Color of the component error indicator."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1549
#, no-c-format
msgid "Theme Compilation and Optimization"
msgstr ""

#. Tag: term
#: chapter-themes.xml:1554
#, no-c-format
msgid "<varname>$v-relative-paths</varname> (default: <literal>false</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1556
#, no-c-format
msgid "This flags specifies whether relative URL paths are relative to the currently parsed SCSS file or to the compilation root file, so that paths are correct for different resources. Vaadin theme compiler parses URL paths differently from the regular Sass compiler (Vaadin modifies relative URL paths). Use <literal>false</literal> for Ruby compiler and <literal>true</literal> for Vaadin compiler."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1570
#, no-c-format
msgid "<varname>$v-included-components</varname> (default: component list)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1572
#, no-c-format
msgid "Theme optimization parameter to specify the included component themes, as described in <xref linkend=\"themes.valo.optimization\"/>."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1581
#, no-c-format
msgid "<varname>$v-valo-include-common-stylenames</varname> (default: <literal>true</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1583
#, no-c-format
msgid "Theme optimization parameter that specifies whether the common component stylenames, described in <xref linkend=\"themes.valo.component\"/>, should be included in the theme."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1596
#, no-c-format
msgid "Valo Fonts"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1598
#, no-c-format
msgid "Valo includes the following custom fonts:"
msgstr ""

#. Tag: listitem
#: chapter-themes.xml:1603
#, no-c-format
msgid "Open Sans"
msgstr ""

#. Tag: listitem
#: chapter-themes.xml:1604
#, no-c-format
msgid "Source Sans Pro"
msgstr ""

#. Tag: listitem
#: chapter-themes.xml:1605
#, no-c-format
msgid "Roboto"
msgstr ""

#. Tag: listitem
#: chapter-themes.xml:1606
#, no-c-format
msgid "Lato"
msgstr ""

#. Tag: listitem
#: chapter-themes.xml:1607
#, no-c-format
msgid "Lora"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1610
#, no-c-format
msgid "The used fonts must be specified with the <varname>$v-font-family</varname> parameter for Valo, in a fallback order. A font family is used in decreasing order of preference, in case a font with higher preference is not available in the browser. You can specify any font families and generic families that browsers may support. In addition to the primary font family, you can use also others in your application. To enable using the fonts included in Valo, you need to list them in the variable."
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:1621
#, no-c-format
msgid "<?pocket-size 70% ?><![CDATA[$v-font-family: 'Open Sans', sans-serif, 'Source Sans Pro';]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1623
#, no-c-format
msgid "Above, we specify Open Sans as the preferred primary font, with any sans-serif font that the browser supports as a fallback. In addition, we include the Source Sans Pro as an auxiliary font that we can use in custom rules as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:1630
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[.v-label pre {\n"
      "  font-family: 'Source Sans Pro', monospace;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1632
#, no-c-format
msgid "This would specify using the font in any <classname>Label</classname> component with the <literal>PREFORMATTED</literal> content mode."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1639
#, no-c-format
msgid "Component Styles"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1641
#, no-c-format
msgid "Many components have component-specific styles, such as \"<literal>small</literal>\", \"<literal>large</literal>\", \"<literal>light</literal>\", etc. You can specify the component styles with <methodname>addStyleName()</methodname>. The styles are documented in the component sections elsewhere in the book."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1649
#, no-c-format
msgid "Component styles are optional, but enabled by default. They can be disabled with the <varname>$v-valo-include-common-stylenames</varname> parameter<phrase condition=\"web\">, as described in <xref linkend=\"themes.valo.variables\"/></phrase>."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1656
#, no-c-format
msgid "The following variables control some common component styles:"
msgstr ""

#. Tag: term
#: chapter-themes.xml:1662
#, no-c-format
msgid "<varname>$v-scaling-factor--small</varname> (default: <literal>0.8</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1664
#, no-c-format
msgid "A scaling multiplier for \"<literal>small</literal>\" component styles."
msgstr ""

#. Tag: term
#: chapter-themes.xml:1671
#, no-c-format
msgid "<varname>$v-scaling-factor--large</varname> (default: <literal>1.2</literal>)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1673
#, no-c-format
msgid "A scaling multiplier for \"<literal>large</literal>\" component styles."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1683
#, no-c-format
msgid "Theme Optimization"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1685
#, no-c-format
msgid "Valo theme allows optimizing the size of the compiled theme CSS by including the rules for only the components actually used in the application. The included component styles can be specified in the <literal>$v-included-components</literal> variable, which by default includes all components. The variable should include a comma-separated list of component names in lower-case letters."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1694
#, no-c-format
msgid "For example, if your UI contains just <classname>VerticalLayout</classname>, <classname>TextField</classname>, and <classname>Button</classname> components, you could define the variable as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:1701
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[$v-included-components:\n"
      "    verticallayout,\n"
      "    textfield,\n"
      "    button;]]>"
msgstr ""

#. Tag: title
#: chapter-themes.xml:1707
#, no-c-format
msgid "Custom Fonts"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1709
#, no-c-format
msgid "In addition to using the built-in fonts of the browser and the web fonts included in the Vaadin themes, you can use custom web fonts."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1715
#, no-c-format
msgid "Loading Fonts"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1717
#, no-c-format
msgid "You can load web fonts with the <literal>font</literal> mixin as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:1721
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[@include font(MyFontFamily,\n"
      "              '../../mytheme/fonts/myfontfamily');]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1723
#, no-c-format
msgid "The statement must be given in the <filename>styles.scss</filename> file <emphasis>outside</emphasis> the <literal>.mytheme {}</literal> block."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1728
#, no-c-format
msgid "The first parameter is the name of the font family, which is used to identify the font. If the font family name contains spaces, you need to use single or double quotes around the name."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1734
#, no-c-format
msgid "The second parameter is the base name of the font files without an extension, including a relative path. Notice that the path is relative to the base theme, where the mixin is defined, not the used theme. We recommend placing custom font files under a <filename>fonts</filename> folder in a theme."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1742
#, no-c-format
msgid "Not all browsers support any single font file format, so the base name is appended with <filename>.ttf</filename>, <filename>.eot</filename>, <filename>.woff</filename>, or <filename>.svg</filename> suffix for the font file suitable for a user's browser."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1751
#, no-c-format
msgid "Using Custom Fonts"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1753
#, no-c-format
msgid "After loaded, you can use a custom font, or actually font family, by its name in CSS and otherwise."
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:1758
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[.mystyle {\n"
      "    font-family: MyFontFamily;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1760
#, no-c-format
msgid "Again, if the font family name contains spaces, you need to use single or double quotes around the name."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1768
#, no-c-format
msgid "Responsive Themes"
msgstr ""

#. Tag: primary
#: chapter-themes.xml:1771
#, no-c-format
msgid "Responsive extension"
msgstr ""

#. Tag: primary
#: chapter-themes.xml:1775
#, no-c-format
msgid "extension"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1775
#, no-c-format
msgid "The <classname>Responsive</classname> component extension enables size range conditions in CSS selectors, allowing conditional CSS rules that respond to size changes in the browser window on the client-side. <phrase condition=\"web\">See the <link xlink:href=\"https://vaadin.com/blog/-/blogs/3126636\">Vaadin Blog article on Responsive design</link> for some additional information.</phrase>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1785
#, no-c-format
msgid "You can use the <classname>Responsive</classname> extension to extend either a component, typically a layout, or the entire UI. You specify the extended component in the constructor."
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:1792
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[// Have some component with an appropriate style name\n"
      "Label c = new Label(\"Here be text\");\n"
      "c.addStyleName(\"myresponsive\");\n"
      "content.addComponent(c);\n"
      "        \n"
      "// Enable Responsive CSS selectors for the component\n"
      "new Responsive(c);]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1794
#, no-c-format
msgid "You can now use <literal>width-range</literal> and <literal>height-range</literal> conditions in CSS selectors as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:1800
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[/* Basic settings for all sizes */\n"
      ".myresponsive {\n"
      "    padding: 5px;\n"
      "    line-height: 36pt;\n"
      "}\n"
      "    \n"
      "/* Small size */\n"
      ".myresponsive[width-range~=\"0-300px\"] {\n"
      "    background: orange;\n"
      "    font-size: 16pt;\n"
      "}\n"
      "\n"
      "/* Medium size */\n"
      ".myresponsive[width-range~=\"301px-600px\"] {\n"
      "    background: azure;\n"
      "    font-size: 24pt;\n"
      "}\n"
      "\n"
      "/* Anything bigger */\n"
      ".myresponsive[width-range~=\"601px-\"] {\n"
      "    background: palegreen;\n"
      "    font-size: 36pt;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1802
#, no-c-format
msgid "You can have overlapping size ranges, in which case all the selectors matching the current size are enabled."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1808 chapter-themes.xml:1841
#, no-c-format
msgid "Flexible Wrapping"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1810
#, no-c-format
msgid "You can use the <classname>CssLayout</classname> to have automatic wrap-around when the components in the layout would go off right side of the layout. Components that wrap must, however, have either undefined or fixed width, and thereby can not utilize the full area of the screen. With the <classname>Responsive</classname> extension, you can have more flexible wrap-around that gives the component tiles maximum width."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1819
#, no-c-format
msgid "In the following, we have a text and image box, which are laid out horizontally with 50-50 sizing if the screen is wide enough, but wrap to a vertical layout if the screen is narrow."
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:1826
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[CssLayout layout = new CssLayout();\n"
      "layout.setWidth(\"100%\");\n"
      "layout.addStyleName(\"flexwrap\");\n"
      "content.addComponent(layout);\n"
      "        \n"
      "// Enable Responsive CSS selectors for the layout\n"
      "new Responsive(layout);\n"
      "\n"
      "Label title = new Label(\"Space is big, really big\");\n"
      "title.addStyleName(\"title\");\n"
      "layout.addComponent(title);\n"
      "\n"
      "Label description = new Label(\"This is a \" +\n"
      "    \"long description of the image shown \" +\n"
      "    \"on the right or below, depending on the \" +\n"
      "    \"screen width. The text here could continue long.\");\n"
      "description.addStyleName(\"itembox\");\n"
      "description.setSizeUndefined();\n"
      "layout.addComponent(description);\n"
      "        \n"
      "Image image = new Image(null,\n"
      "        new ThemeResource(\"img/planets/Earth.jpg\"));\n"
      "image.addStyleName(\"itembox\");\n"
      "layout.addComponent(image);]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1828 chapter-themes.xml:1886
#, no-c-format
msgid "The SCSS could be as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:1833
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[/* Various general settings */\n"
      ".flexwrap {\n"
      "    background: black;\n"
      "    color: white;\n"
      "\n"
      "    .title {\n"
      "        font-weight: bold;\n"
      "        font-size: 20px;\n"
      "        line-height: 30px;\n"
      "        padding: 5px;\n"
      "    }\n"
      "    \n"
      "    .itembox {\n"
      "        white-space: normal;\n"
      "        vertical-align: top;\n"
      "    }\n"
      "    \n"
      "    .itembox.v-label {padding: 5px}\n"
      "}\n"
      "    \n"
      ".flexwrap[width-range~=\"0-499px\"] {\n"
      "    .itembox {width: 100%}\n"
      "}\n"
      "    \n"
      ".flexwrap[width-range~=\"500px-\"] {\n"
      "    .itembox {width: 50%}\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1835
#, no-c-format
msgid "The layout in the wide mode is shown in <xref linkend=\"figure.theme.responsive.flexwrap\"/>."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1849
#, no-c-format
msgid "You could also play with the <literal>display: block</literal> vs <literal>display: inline-block</literal> properties."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1854
#, no-c-format
msgid "Notice that, while the <classname>Responsive</classname> extension makes it possible to do various CSS trickery with component sizes, the normal rules for component and layout sizes apply, as described in <xref linkend=\"layout.settings.size\"/> and elsewhere, and you should always check the size behaviour of the components. In the above example, we set the label to have undefined width, which disables word wrap, so we had to re-enable it."
msgstr ""

#. Tag: title
#: chapter-themes.xml:1866
#, no-c-format
msgid "Toggling the Display Property"
msgstr ""

#. Tag: primary
#: chapter-themes.xml:1869
#, no-c-format
msgid "display (CSS property)"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1869
#, no-c-format
msgid "The <literal>display</literal> property allows especially powerful ways to offer radically different UIs for different screen sizes by enabling and disabling UI elements as needed. For example, you could disable some parts of the UI when the space gets too small, but bring forth navigation buttons that, when clicked, add component styles to switch to the hidden parts."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1878
#, no-c-format
msgid "In the following, we simply show alternative components based on screen width:"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:1884
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[CssLayout layout = new CssLayout();\n"
      "layout.setWidth(\"100%\");\n"
      "layout.addStyleName(\"toggledisplay\");\n"
      "content.addComponent(layout);\n"
      "        \n"
      "// Enable Responsive CSS selectors for the layout\n"
      "new Responsive(layout);\n"
      "\n"
      "Label enoughspace =\n"
      "    new Label(\"This space is big, mindbogglingly big\");\n"
      "enoughspace.addStyleName(\"enoughspace\");\n"
      "layout.addComponent(enoughspace);\n"
      "        \n"
      "Label notenoughspace = new Label(\"Quite small space\");\n"
      "notenoughspace.addStyleName(\"notenoughspace\");\n"
      "layout.addComponent(notenoughspace);]]>"
msgstr ""

#. Tag: programlisting
#: chapter-themes.xml:1891
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[/* Common settings */\n"
      ".toggledisplay {\n"
      "    .enoughspace, .notenoughspace {\n"
      "        color: white;\n"
      "        padding: 5px;\n"
      "    }\n"
      "    \n"
      "    .notenoughspace { /* Really small */\n"
      "        background: red;\n"
      "        font-weight: normal;\n"
      "        font-size: 10px;\n"
      "        line-height: 15px;\n"
      "    }\n"
      "\n"
      "    .enoughspace { /* Really big */\n"
      "        background: darkgreen;\n"
      "        font-weight: bold;\n"
      "        font-size: 20px;\n"
      "        line-height: 30px;\n"
      "    }\n"
      "}\n"
      "    \n"
      "/* Quite little space */\n"
      ".toggledisplay[width-range~=\"0-499px\"] {\n"
      "    .enoughspace    {display: none}\n"
      "}\n"
      "    \n"
      "/* Plenty of space */\n"
      ".toggledisplay[width-range~=\"500px-\"] {\n"
      "    .notenoughspace {display: none}\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-themes.xml:1895
#, no-c-format
msgid "Responsive Demos"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1897
#, no-c-format
msgid "You can find a simple responsive demo at <link xlink:href=\"http://demo.vaadin.com/responsive/\">demo.vaadin.com/responsive</link>. It demonstrates the flexible wrapping technique described in <xref linkend=\"themes.responsive.wrap\"/>."
msgstr ""

#. Tag: para
#: chapter-themes.xml:1904
#, no-c-format
msgid "The <link xlink:href=\"http://demo.vaadin.com/book-examples-vaadin7/book/#themes.responsive.basic\">Book Examples</link> demo provides the examples given in this chapter, as well as some others."
msgstr ""

#. Tag: primary
#: chapter-themes.xml:1912
#, no-c-format
msgid "<primary>Parking demo</primary>"
msgstr ""

#. Tag: primary
#: chapter-themes.xml:1913
#, no-c-format
msgid "TouchKit"
msgstr ""

#. Tag: secondary
#: chapter-themes.xml:1913
#, no-c-format
msgid "<secondary>Parking demo</secondary>"
msgstr ""

#. Tag: para
#: chapter-themes.xml:1913
#, no-c-format
msgid "The Parking demo for TouchKit, mentioned in <xref linkend=\"mobile\"/>, uses a responsive theme to adapt to mobile devices with different screen sizes and when the screen orientation changes."
msgstr ""

