# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2014-05-20 12:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: chapter-testbench.xml:11
#, no-c-format
msgid "Vaadin TestBench"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:13
#, no-c-format
msgid "This chapter describes the installation and use of the Vaadin TestBench."
msgstr ""

#. Tag: emphasis
#: chapter-testbench.xml:18
#, no-c-format
msgid "This book edition covers TestBench 4, but is based on a prerelease version available at the time of writing. The final release may have changes that are not covered in the documentation given here."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:24
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:26
#, no-c-format
msgid "Quality assurance is one of the cornerstones of modern software development. Extending throughout the entire development process, quality assurance is the thread that binds the end product to the requirements. In iterative development processes, with ever shorter release cycles and continuous integration, the role of regression testing is central. The special nature of web applications creates many unique requirements for regression testing."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:36
#, no-c-format
msgid "In a typical situation, you are developing a web application with Vaadin and want to ensure that only intended changes occur in its behaviour after modifying the code, without testing the application manually every time. There are two basic ways of detecting such regressions. Screenshots are the strictest way, but usually checking the displayed values in the HTML is better if you are more interested in the content and want to allow some flexibility for themeing, for example. You may also want to generate many different kinds of inputs to the application and check that they produce the desired outputs."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:48
#, no-c-format
msgid "Controlling the Browser with Testbench"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:59
#, no-c-format
msgid "Vaadin TestBench utilizes Selenium WebDriver to control the browser from Java code, as illustrated in <xref linkend=\"figure.testbench.webdriver\"/>. It can open a new browser window to start the application, interact with the components for example by clicking them, and then get the HTML element values."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:66
#, no-c-format
msgid "You can develop such unit tests along with your application code, for example with JUnit, which is a widely used Java unit testing framework. You can run the tests as many times as you want in your workstation or in a distributed grid setup."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:74
#, no-c-format
msgid "TestBench Workflow"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:85
#, no-c-format
msgid "The main features of Vaadin TestBench are:"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:89
#, no-c-format
msgid "Control a browser from Java"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:92
#, no-c-format
msgid "Generate component selectors in debug window"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:95
#, no-c-format
msgid "Validate UI state by assertions and screen capture comparison"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:98
#, no-c-format
msgid "Screen capture comparison with difference highlighting"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:101
#, no-c-format
msgid "Distributed test grid for running tests"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:104
#, no-c-format
msgid "Integration with unit testing"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:107
#, no-c-format
msgid "Test with browsers on mobile devices"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:111
#, no-c-format
msgid "Execution of tests can be distributed over a grid of test nodes, which speeds up testing. The grid nodes can run different operating systems and have different browsers installed. In a minimal setup, such as for developing the tests, you can use Vaadin TestBench on just a single computer."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:119
#, no-c-format
msgid "Based on Selenium"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:121
#, no-c-format
msgid "Vaadin TestBench is based on the Selenium web browser automation library, especially Selenium WebDriver, which allows you to control browsers straight from Java code."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:127
#, no-c-format
msgid "Selenium is augmented with Vaadin-specific extensions, such as:"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:132
#, no-c-format
msgid "Proper handling of Ajax-based communications of Vaadin"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:133
#, no-c-format
msgid "A high-level element query API for Vaadin components"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:134
#, no-c-format
msgid "Performance testing of Vaadin applications"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:135
#, no-c-format
msgid "Screen capture comparison"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:136
#, no-c-format
msgid "Finding HTML elements by a Vaadin selector"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:141
#, no-c-format
msgid "TestBench Components"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:143
#, no-c-format
msgid "The TestBench library includes WebDriver, which provides API to control a browser like a user would. This API can be used to build tests, for example, with JUnit. It also includes the grid hub and node servers, which you can use to run tests in a grid configuration."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:150
#, no-c-format
msgid "Vaadin TestBench Library provides the central control logic for:"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:156
#, no-c-format
msgid "Executing tests with the WebDriver"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:161
#, no-c-format
msgid "Additional support for testing Vaadin-based applications"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:166
#, no-c-format
msgid "Comparing screen captures with reference images"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:171
#, no-c-format
msgid "Distributed testing with grid node and hub services"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:179
#, no-c-format
msgid "Requirements"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:181
#, no-c-format
msgid "Requirements for developing and running tests are:"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:187
#, no-c-format
msgid "Java JDK 1.6 or newer"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:190
#, no-c-format
msgid "Browsers installed on test nodes as supported by Selenium WebDriver"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:192
#, no-c-format
msgid "<listitem>Google Chrome</listitem>"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:193
#, no-c-format
msgid "<listitem>Internet Explorer</listitem>"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:194
#, no-c-format
msgid "Mozilla Firefox (ESR version recommended)"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:195
#, no-c-format
msgid "Opera"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:196
#, no-c-format
msgid "Mobile browsers: Android, iPhone"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:201
#, no-c-format
msgid "A build system, such as Ant or Maven, to automate execution of tests during build process (recommended)"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:208
#, no-c-format
msgid "Note that running tests on an Extended Support Release (ESR) version of Firefox is recommended because of the frequent release cycle of Firefox, which often cause tests to fail. Download an ESR release of Firefox from <link xlink:href=\"http://www.mozilla.org/en-US/firefox/organizations/all.html\">http://www.mozilla.org/en-US/firefox/organizations/all.html</link>. Install it alongside your normal Firefox install (do not overwrite)."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:217
#, no-c-format
msgid "For Mac OS X, note the issue mentioned in <xref linkend=\"testbench.known-issues.firefox-mac\"/>."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:224
#, no-c-format
msgid "Continuous Integration Compatibility"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:226
#, no-c-format
msgid "Continuous integration means automatic compilation and testing of applications frequently, typically at least daily, but ideally every time when code changes are committed to the source repository. This practice allows catching integration problems early and finding the changes that first caused them to occur."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:234
#, no-c-format
msgid "You can make unit tests with Vaadin TestBench just like you would do any other Java unit tests, so they work seamlessly with continuous integration systems. Vaadin TestBench is tested to work with at least TeamCity and Hudson/Jenkins build management and continuous integration servers, which all have special support for the JUnit unit testing framework."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:244
#, no-c-format
msgid "Licensing and Trial Period"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:246
#, no-c-format
msgid "You can download Vaadin TestBench from Vaadin Directory and try it out for a free 30-day trial period, after which you are required to acquire the needed licenses. You can purchase licenses from the Directory. A license for Vaadin TestBench is also included in the Vaadin Pro Account subscription."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:257
#, no-c-format
msgid "Installing Vaadin TestBench"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:259
#, no-c-format
msgid "As with most Vaadin add-ons, you can install Vaadin TestBench as a Maven or Ivy dependency in your project, or from an installation package. The installation package contains some extra material, such as demo code and documentation."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:266
#, no-c-format
msgid "The component element classes are Vaadin-specific. At the time of the writing, they are packaged with TestBench, but this will probably change in future."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:272
#, no-c-format
msgid "Additionally, you may need to install drivers for the browsers you are using."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:277
#, no-c-format
msgid "Test Development Setup"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:279
#, no-c-format
msgid "In a typical test development setup, you develop tests in a Java project and run them on the development workstation. You can run the same tests in a dedicated test server, such as a continuous integration system."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:285
#, no-c-format
msgid "The Maven dependency would be as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:289
#, no-c-format
msgid ""
      "<?pocket-size 75% ?>&lt;dependency&gt;\n"
      "    &lt;groupId&gt;com.vaadin&lt;/groupId&gt;\n"
      "    &lt;artifactId&gt;vaadin-testbench&lt;/artifactId&gt;\n"
      "    &lt;version&gt;<emphasis role=\"bold\">4.x.x</emphasis>&lt;/version&gt;\n"
      "    &lt;scope&gt;test&lt;/scope&gt;\n"
      "&lt;/dependency&gt;"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:291
#, no-c-format
msgid "The Ivy dependency would be as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:295
#, no-c-format
msgid ""
      "<?pocket-size 75% ?>&lt;dependency org=\"com.vaadin\" name=\"vaadin-testbench\"\n"
      "   rev=\"<emphasis role=\"bold\">4.x.x</emphasis>\" conf=\"test-&lt;default\"/&gt;"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:297
#, no-c-format
msgid "The optional <literal>test-&lt;default</literal> configuration mapping requires a <literal>test</literal> configuration in the Ivy module. It is useful especially when building and testing the application in an Ant script, where you can use the configuration to define libraries for the web application and testing separately. When developing tests in Eclipse, it is meaningless, and you can use <literal>default-&lt;default</literal>."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:306
#, no-c-format
msgid "We generally recommend developing tests in a project or module separate from the web application to be tested to avoid library problems. If the tests are part of the same project, you may at least want to arrange the source code and dependencies so that the test classes, the TestBench library, and their dependencies would not be deployed unnecessarily with the web application."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:315
#, no-c-format
msgid "In a test development setup, you do not need a grid hub or nodes. However, if you develop tests for a grid, you can run the tests, the grid hub, and one node all in your development workstation. A distributed setup is described in the following section."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:322
#, no-c-format
msgid "You may find it convenient to develop and execute tests under an IDE such as Eclipse. The special support for running JUnit test cases in Eclipse is described in <xref linkend=\"testbench.development.eclipse\"/>."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:330
#, no-c-format
msgid "A Distributed Testing Environment"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:332
#, no-c-format
msgid "Vaadin TestBench supports distributed execution of tests in a grid. A test grid consists of the following categories of hosts:"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:339
#, no-c-format
msgid "One or more test servers executing the tests"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:342
#, no-c-format
msgid "A grid hub"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:345
#, no-c-format
msgid "Grid nodes"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:349
#, no-c-format
msgid "The components of a grid setup are illustrated in <xref linkend=\"figure.testbench.architecture\"/>."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:355
#, no-c-format
msgid "Vaadin TestBench Grid Setup"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:366
#, no-c-format
msgid "The grid hub is a service that handles communication between the JUnit test runner and the nodes. The nodes are services that perform the actual execution of test commands in the browser."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:372
#, no-c-format
msgid "The hub requires very little resources, so you would typically run it either in the test server or on one of the nodes. You can run the tests, the hub, and one node all in one host, but in a fully distributed setup, you install the Vaadin TestBench components on separate hosts."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:379
#, no-c-format
msgid "Controlling browsers over a distributed setup requires using a remote WebDriver. Grid development and use of the hub and nodes is described in <xref linkend=\"testbench.grid\"/>."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:387
#, no-c-format
msgid "Installation Package Contents"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:389
#, no-c-format
msgid "The installation package contains the following:"
msgstr ""

#. Tag: filename
#: chapter-testbench.xml:395
#, no-c-format
msgid "documentation"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:397
#, no-c-format
msgid "The documentation folder contains the TestBench library API documentation, a PDF excerpt of this chapter of Book of Vaadin, and the license."
msgstr ""

#. Tag: filename
#: chapter-testbench.xml:405
#, no-c-format
msgid "example"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:407
#, no-c-format
msgid "The example folder provides TestBench examples. An example Maven configuration POM is given, as well as the JUnit test Java source files. For a description of the contents, see <xref linkend=\"testbench.installation.examples\"/>."
msgstr ""

#. Tag: filename
#: chapter-testbench.xml:416
#, no-c-format
msgid "maven"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:418
#, no-c-format
msgid "The Maven folder contains version of the Vaadin TestBench libraries that you can install in your local Maven repository. Please follow the instructions in <xref linkend=\"testbench.execution.maven\"/>."
msgstr ""

#. Tag: filename
#: chapter-testbench.xml:427
#, no-c-format
msgid "vaadin-testbench-standalone-&version.testbench;.jar"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:429
#, no-c-format
msgid "This is the Vaadin TestBench library. It is a standalone library that includes the Selenium WebDriver and many other required libraries. The library includes the sources and the JavaDoc."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:441
#, no-c-format
msgid "Example Contents"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:443
#, no-c-format
msgid "The <filename>example/maven</filename> folder provides a number of examples for using Vaadin TestBench. The source code for the application to be tested, a desktop calculator application, is given in the <filename>src/main/java</filename> subfolder."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:450
#, no-c-format
msgid "The tests examples given under the <filename>src/test/java</filename> subfolder, in the <filename>com/vaadin/testbenchexample</filename> package subfolder, are as follows:"
msgstr ""

#. Tag: filename
#: chapter-testbench.xml:458
#, no-c-format
msgid "SimpleCalculatorITCase.java"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:460
#, no-c-format
msgid "Demonstrates the basic use of WebDriver. Interacts with the buttons in the user interface by clicking them and checks the resulting value. Uses <methodname>By.id()</methodname> to access the elements."
msgstr ""

#. Tag: filename
#: chapter-testbench.xml:469
#, no-c-format
msgid "LoopingCalculatorITCase.java"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:471
#, no-c-format
msgid "Otherwise as the simple example, but shows how to use looping to produce programmatic repetition to create a complex use case."
msgstr ""

#. Tag: filename
#: chapter-testbench.xml:479
#, no-c-format
msgid "ScreenshotITCase.java"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:481
#, no-c-format
msgid "Shows how to compare screenshots, as described in <xref linkend=\"testbench.screenshot.comparison\"/>. Some of the test cases include random input, so they require masked screenshot comparison to mask the random areas out."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:488
#, no-c-format
msgid "The example is ignored by default with an <literal>@Ignore</literal> annotation, because the included images were taken with a specific browser on a specific platform, so if you use another environment, they will fail. If you enable the test, you will need to run the tests, copy the error images to the reference screenshot folder, and mask out the areas with the alpha channel. Please see the <filename>example/Screenshot_Comparison_Tests.pdf</filename> for details about how to enable the example and how to create the masked reference images."
msgstr ""

#. Tag: filename
#: chapter-testbench.xml:503
#, no-c-format
msgid "SelectorExamplesITCase.java"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:505
#, no-c-format
msgid "This example shows how to use different selectors:"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:510
#, no-c-format
msgid "<methodname>By.id()</methodname> - selecting by identifier"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:511
#, no-c-format
msgid "<methodname>By.xpath()</methodname> - selecting by an XPath expression"
msgstr ""

#. Tag: filename
#: chapter-testbench.xml:516
#, no-c-format
msgid "VerifyExecutionTimeITCase.java"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:518
#, no-c-format
msgid "Shows how to time the execution of a test case and how to report it."
msgstr ""

#. Tag: filename
#: chapter-testbench.xml:525
#, no-c-format
msgid "AdvancedCommandsITCase.java"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:527
#, no-c-format
msgid "Demonstrates how to test tooltips (<xref linkend=\"testbench.special.tooltip\"/>) and context menus. Uses component IDs, XPath expressions, as well as CSS selectors to find the elements to check."
msgstr ""

#. Tag: filename
#: chapter-testbench.xml:536
#, no-c-format
msgid "pageobjectexample/PageObjectExampleITCase.java"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:538
#, no-c-format
msgid "Shows how to create maintanable tests using the <emphasis>Page Object Pattern</emphasis> that separates the low-level page structure from the business logic, as described in <xref linkend=\"testbench.maintainable\"/>. The page object classes that handle low-level interaction with the application views are in the <filename>pageobjects</filename> subpackage."
msgstr ""

#. Tag: filename
#: chapter-testbench.xml:550
#, no-c-format
msgid "bdd/SimpleCalculation.java"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:552
#, no-c-format
msgid "Shows how to develop tests following the <emphasis>behavior-driven development</emphasis> (BDD) model, by using the <link xlink:href=\"http://jbehave.org\">JBehave framework</link>. <filename>SimpleCalculation.java</filename> defines a JUnit-based user story with one scenario, which is defined in <filename>CalculatorSteps.java</filename>. The scenario reuses the page objects defined in the page object example (see above) for low-level application view access and control."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:567
#, no-c-format
msgid "For information about running the examples with Maven, see <xref linkend=\"testbench.execution.maven\"/>."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:574
#, no-c-format
msgid "Installing Browser Drivers"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:576
#, no-c-format
msgid "Whether developing tests with the WebDriver in the workstation or running tests in a grid, using some browsers requires that a browser driver is installed."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:584
#, no-c-format
msgid "Download the latest browser driver"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:588
#, no-c-format
msgid "Internet Explorer (Windows only) - install <filename>IEDriverServer.exe</filename> from:"
msgstr ""

#. Tag: link
#: chapter-testbench.xml:593
#, no-c-format
msgid "http://code.google.com/p/selenium/downloads/list"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:597
#, no-c-format
msgid "Chrome - install ChromeDriver (a part of the Chromium project) for your platform from:"
msgstr ""

#. Tag: link
#: chapter-testbench.xml:603
#, no-c-format
msgid "http://code.google.com/p/chromedriver/downloads/list"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:609
#, no-c-format
msgid "Add the driver executable to PATH <emphasis>or</emphasis> define it as a system property in the application using WebDriver locally, or in distributed use give it as a command-line parameter to the grid node service, as described in <xref linkend=\"testbench.grid.node\"/>."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:619
#, no-c-format
msgid "Test Node Configuration"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:621
#, no-c-format
msgid "If you are running the tests in a grid environment, you need to make some configuration to the test nodes to get more stable results."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:626
#, no-c-format
msgid "Further configuration is provided in command-line parameters when starting the node services, as described in <xref linkend=\"testbench.grid.node\"/>."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:632
#, no-c-format
msgid "Operating system settings"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:634
#, no-c-format
msgid "Make any operating system settings that might interfere with the browser and how it is opened or closed. Typical problems include crash handler dialogs."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:639
#, no-c-format
msgid "On Windows, disable error reporting in case a browser crashes as follows:"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:645
#, no-c-format
msgid "Open <menuchoice><guimenu>Control Panel</guimenu><guimenuitem>System</guimenuitem></menuchoice>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:650
#, no-c-format
msgid "Select the <guilabel>Advanced</guilabel> tab"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:655
#, no-c-format
msgid "Select <guilabel>Error reporting</guilabel>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:660
#, no-c-format
msgid "Check that <guilabel>Disable error reporting</guilabel> is selected"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:665
#, no-c-format
msgid "Check that <guilabel>But notify me when critical errors occur</guilabel> is not selected"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:673
#, no-c-format
msgid "Settings for Screenshots"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:675
#, no-c-format
msgid "The screenshot comparison feature requires that the user interface of the browser stays constant. The exact features that interfere with testing depend on the browser and the operating system."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:681
#, no-c-format
msgid "In general:"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:687
#, no-c-format
msgid "Disable blinking cursor"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:692
#, no-c-format
msgid "Use identical operating system themeing on every host"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:697
#, no-c-format
msgid "Turn off any software that may suddenly pop up a new window"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:702
#, no-c-format
msgid "Turn off screen saver"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:708
#, no-c-format
msgid "If using Windows and Internet Explorer, you should give also the following setting:"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:715
#, no-c-format
msgid "Turn on <guilabel>Allow active content to run in files on My Computer</guilabel> under <guilabel>Security settings</guilabel>"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:727
#, no-c-format
msgid "Preparing an Application for Testing"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:729
#, no-c-format
msgid "TestBench can usually be used for testing Vaadin applications as they are, especially if just taking screenshots."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:734
#, no-c-format
msgid "Depending on the selector type that you use later to select HTML elements, they can be vulnerable to logically irrelevant changes in the HTML DOM or component structure. The structure may change because of your layout or UI logic, or if a new Vaadin version has significant changes."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:741
#, no-c-format
msgid "To make UIs more robust for testing, you can set a unique <emphasis>component ID</emphasis> for specific components with <methodname>setId()</methodname>. You can then use it in element queries or selectors."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:748
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class UIToBeTested extends UI {\n"
      "    @Override\n"
      "    protected void init(VaadinRequest request) {\n"
      "        final VerticalLayout content = new VerticalLayout();\n"
      "        setContent(content);\n"
      "        \n"
      "        // Create a button\n"
      "        Button button = new Button(\"Push Me!\");\n"
      "        \n"
      "        // Optional: give the button a unique ID\n"
      "        button.setId(\"main.button\");\n"
      "        \n"
      "        // Set the tooltip\n"
      "        button.setDescription(\"This is a tip\");\n"
      "\n"
      "        // Do something when the button is clicked\n"
      "        button.addClickListener(new ClickListener() {\n"
      "            @Override\n"
      "            public void buttonClick(ClickEvent event) {\n"
      "                // This label will not have a set ID\n"
      "                content.addComponent(new Label(\"Thanks!\"));\n"
      "            }\n"
      "        });\n"
      "        content.addComponent(button);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:750
#, no-c-format
msgid "The application is shown in <xref linkend=\"figure.testbench.preparing.application-to-be-tested\"/>, with the button already clicked."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:757
#, no-c-format
msgid "A Simple Application To Be Tested"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:768
#, no-c-format
msgid "The button would be rendered as a HTML element: <literal>&lt;div id=\"main.button\" ...&gt;...&lt;/div&gt;</literal>. The DOM element would then be accessible from the HTML page with a WebDriver call such as: <literal>driver.findElement(By.id=\"main.button\")</literal>. For the label, which does not have an ID, the path would be from the page root."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:776
#, no-c-format
msgid "As a similar method, you can add a unique CSS class name for a component to enable using the CSS selector to select it. You can use the CSS class names and IDs also in XPath selectors."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:786
#, no-c-format
msgid "Developing JUnit Tests"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:788
#, no-c-format
msgid "JUnit is a popular unit testing framework for Java development. Most Java IDEs, build systems, and continuous integration systems provide support for JUnit. However, while we concentrate on the development of JUnit tests in this chapter, Vaadin TestBench and the WebDriver are in no way specific to JUnit and you can use any test execution framework, or just regular Java applications, to develop TestBench tests."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:797
#, no-c-format
msgid "You may want to keep your test classes in a separate source tree in your application project, or in an altogether separate project, so that you do not have to include them in the web application WAR. Having them in the same project may be nicer for version control purposes."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:805 chapter-testbench.xml:1036
#, no-c-format
msgid "Basic Test Case Structure"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:807
#, no-c-format
msgid "A JUnit test case is defined with annotations for methods in a test case class. With TestBench, the test case class should extend the <classname>TestBenchTestcase</classname> class, which provides the WebDriver and ElementQuery APIs."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:814
#, no-c-format
msgid "<?pocket-size 75% ?><![CDATA[public class Testcase extends TestBenchTestCase {]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:816
#, no-c-format
msgid "The available annotations are:"
msgstr ""

#. Tag: literal
#: chapter-testbench.xml:822
#, no-c-format
msgid "@Before"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:824
#, no-c-format
msgid "The annotated method is executed before each test (annotated with <literal>@Test</literal>). Normally, you create and set the driver here."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:830
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[@Before\n"
      "public void setUp() throws Exception {\n"
      "    setDriver(TestBench.createDriver(new FirefoxDriver()));\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:832
#, no-c-format
msgid "The driver class should be one of <classname>FirefoxDriver</classname>, <classname>ChromeDriver</classname>, <classname>InternetExplorerDriver</classname>, <classname>SafariDriver</classname>, or <classname>PhantomJSDriver</classname>. Please check <classname>RemoteWebDriver</classname> from API documentation for the current list of implementations. Notice that some of the drivers require installing a browser driver, as described in <xref linkend=\"testbench.installation.browserdrivers\"/>."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:845
#, no-c-format
msgid "The driver instance is stored in the <literal>driver</literal> property in the test case. While you can access the property directly by the member variable, you should set it only with the setter."
msgstr ""

#. Tag: literal
#: chapter-testbench.xml:854
#, no-c-format
msgid "@Test"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:856
#, no-c-format
msgid "Annotates a test method. You normally first open the page and then execute commands and make assertions on the content."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:861
#, no-c-format
msgid ""
      "<?pocket-size 70% ?><![CDATA[@Test\n"
      "public void basic() throws Exception {\n"
      "    driver.get(\"http://localhost:8080/tobetested\");\n"
      "    \n"
      "    // Click the button\n"
      "    ButtonElement button =\n"
      "        $(ButtonElement.class).id(\"content.button\");\n"
      "    button.click();\n"
      "\n"
      "    // Check that the label text is correct\n"
      "    LabelElement label = $(LabelElement.class).first();\n"
      "    assertEquals(\"Thanks!\", label.getText());\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:863
#, no-c-format
msgid "Normally, you would define the URL with a variable that is common for all tests, and possibly concatenate it with a URI fragment to get to an application state."
msgstr ""

#. Tag: literal
#: chapter-testbench.xml:871
#, no-c-format
msgid "@After"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:873
#, no-c-format
msgid "After each test is finished, you normally need to quit the driver to close the browser."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:878
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[@After\n"
      "public void tearDown() throws Exception {\n"
      "    driver.quit();\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:880
#, no-c-format
msgid "However, if you enable grabbing screenshots on failure with the <classname>ScreenshotOnFailureRule</classname>, as described in <xref linkend=\"testbench.screenshots.failure\"/>, the rules are executed after <literal>@After</literal>, but the driver needs to be open when the rule to take the screenshot is executed. Therefore, you should not quit the driver in that case. The rule quits the driver implicitly."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:893
#, no-c-format
msgid "You can use any other JUnit features. Notice, however, that using TestBench requires that the driver has been created and is still open."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:898
#, no-c-format
msgid "A complete test case could be as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:902
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[import static org.junit.Assert.assertEquals;\n"
      "\n"
      "import java.util.List;\n"
      "\n"
      "import org.junit.After;\n"
      "import org.junit.Before;\n"
      "import org.junit.Rule;\n"
      "import org.junit.Test;\n"
      "import org.openqa.selenium.firefox.FirefoxDriver;\n"
      "\n"
      "import com.vaadin.testbench.ScreenshotOnFailureRule;\n"
      "import com.vaadin.testbench.TestBench;\n"
      "import com.vaadin.testbench.TestBenchTestCase;\n"
      "import com.vaadin.testbench.elements.ButtonElement;\n"
      "import com.vaadin.testbench.elements.LabelElement;\n"
      "import com.vaadin.testbench.elements.VerticalLayoutElement;\n"
      "\n"
      "public class Testcase extends TestBenchTestCase {\n"
      "        @Before\n"
      "        public void setUp() throws Exception {\n"
      "                setDriver(TestBench.createDriver(new FirefoxDriver()));\n"
      "        }\n"
      "\n"
      "    @Test\n"
      "    public void basic() throws Exception {\n"
      "        driver.get(\"http://localhost:8080/tobetested\");\n"
      "        \n"
      "        // Click the button\n"
      "        ButtonElement button =\n"
      "            $(ButtonElement.class).id(\"content.button\");\n"
      "        button.click();\n"
      "\n"
      "        // Check that the label text is correct\n"
      "        LabelElement label = $(LabelElement.class).first();\n"
      "        assertEquals(\"Thanks!\", label.getText());\n"
      "    }\n"
      "    \n"
      "    @Test\n"
      "    public void advanced() throws Exception {\n"
      "        driver.get(\"http://localhost:8080/tobetested\");\n"
      "        \n"
      "        // Click all the buttons in the UI\n"
      "        List<ButtonElement> buttons = $(ButtonElement.class).all();\n"
      "        for (ButtonElement b: buttons)\n"
      "            b.click();\n"
      "\n"
      "        // Check that the label text is correct\n"
      "        LabelElement label =\n"
      "            $(VerticalLayoutElement.class).id(\"content\")\n"
      "            .$(LabelElement.class).first();\n"
      "        assertEquals(\"Thanks!\", label.getText());\n"
      "    }\n"
      "\n"
      "        @After\n"
      "        public void tearDown() throws Exception {\n"
      "            driver.quit();\n"
      "        }\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:907 chapter-testbench.xml:984
#, no-c-format
msgid "Running JUnit Tests in Eclipse"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:909
#, no-c-format
msgid "The Eclipse IDE integrates JUnit with nice control features. To run TestBench JUnit test cases in Eclipse, you need to do the following:"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:916
#, no-c-format
msgid "Install the TestBench standalone JAR."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:922
#, no-c-format
msgid "If using a project created with the Vaadin Plugin for Eclipse, add the TestBench standalone library dependency in <filename>ivy.xml</filename>. It should be as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:928
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[<dependency org=\"com.vaadin\"\n"
      "            name=\"vaadin-testbench\"\n"
      "            rev=\"&version.testbench;\"/>]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:930
#, no-c-format
msgid "See <xref linkend=\"addons.eclipse\"/> for more details."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:936
#, no-c-format
msgid "Otherwise, add the TestBench standalone JAR from the installation package to a library folder in the project, such as <filename>lib</filename>. You should not put the library in <filename>WEB-INF/lib</filename> as it is not used by the Vaadin web application. Refresh the project by selecting it and pressing <keycap>F5</keycap>."
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:948
#, no-c-format
msgid "Right-click the project in Project Explorer and select <guilabel>Properties</guilabel>, and open the <guilabel>Java Build Path</guilabel> and the <guilabel>Libraries</guilabel> tab. Click <guibutton>Add JARs</guibutton>, navigate to the library folder, select the library, and click <guibutton>OK</guibutton>."
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:956
#, no-c-format
msgid "Switch to the <guilabel>Order and Export</guilabel> tab in the project properties. Make sure that the TestBench JAR is above the <filename>gwt-dev.jar</filename> (it may contain an old <filename>httpclient</filename> package), by selecting it and moving it with the <guibutton>Up</guibutton> and <guibutton>Down</guibutton> buttons."
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:965
#, no-c-format
msgid "Click <guibutton>OK</guibutton> to exit the project properties."
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:969
#, no-c-format
msgid "Right-click a test source file and select <menuchoice><guimenu>Run As</guimenu><guimenuitem>JUnit Test</guimenuitem></menuchoice>."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:975
#, no-c-format
msgid "A JUnit view should appear, and it should open the Firefox browser, launch the application, run the test, and then close the browser window. If all goes well, you have a passed test case, which is reported in the JUnit view area in Eclipse, as illustrated in <xref linkend=\"figure.testbench.development.eclipse\"/>."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:992
#, no-c-format
msgid "If you are using some other IDE, it might support JUnit tests as well. If not, you can run the tests using Ant or Maven."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1001
#, no-c-format
msgid "Creating a Test Case"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1005
#, no-c-format
msgid "Test Setup"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1007
#, no-c-format
msgid "Test configuration is done in a method annotated with <literal>@Before</literal>. The method is executed before each test case."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1013
#, no-c-format
msgid "The basic configuration tasks are:"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:1018
#, no-c-format
msgid "Set TestBench parameters"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:1019
#, no-c-format
msgid "Create the web driver"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:1020
#, no-c-format
msgid "Do any other initialization"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1024
#, no-c-format
msgid "TestBench Parameters"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1026
#, no-c-format
msgid "TestBench parameters are defined with static methods in the <classname>com.vaadin.testbench.Parameters</classname> class. The parameters are mainly for screenshots and documented in <xref linkend=\"testbench.screenshots\"/>."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1038
#, no-c-format
msgid "A typical test case does the following:"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:1043
#, no-c-format
msgid "Open the URL"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:1044
#, no-c-format
msgid "Navigate to desired state"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:1046
#, no-c-format
msgid "Find a HTML element (<classname>WebElement</classname>) for navigation"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:1047
#, no-c-format
msgid "Use <methodname>click()</methodname> and other commands to interact with the element"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:1048
#, no-c-format
msgid "Repeat with different elements until desired state is reached"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:1051
#, no-c-format
msgid "Find a HTML element (<classname>WebElement</classname>) to check"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:1052
#, no-c-format
msgid "Get and assert the value of the HTML element"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:1053
#, no-c-format
msgid "Get a screenshot"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1056
#, no-c-format
msgid "The <classname>WebDriver</classname> allows finding HTML elements in a page in various ways, for example, with XPath expressions. The access methods are defined statically in the <classname>By</classname> class."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1062
#, no-c-format
msgid "These tasks are realized in the following test code:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1066
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[@Test\n"
      "public void testCase1() throws Exception {\n"
      "    driver.get(baseUrl + \"/mycontext/myui\");\n"
      "    \n"
      "    // Get the button's element.\n"
      "    // (Actually the caption element inside the button.)\n"
      "    // Use the component ID assigned with setId().\n"
      "    WebElement button = driver.findElement(By.xpath(\n"
      "        \"id('main.button'])/span/span\"));\n"
      "    \n"
      "    // Get the caption text\n"
      "    assertEquals(\"Push Me!\", button.getText());\n"
      "    \n"
      "    // And click it. It's OK to click the caption element.\n"
      "    button.click();\n"
      "\n"
      "    // Get the Label's element by its widget path.\n"
      "    WebElement label = driver.findElement(By.vaadin(\n"
      "        \"mycontextmyui::\"+\n"
      "        \"/VVerticalLayout[0]/Slot[1]/VLabel[0]\"));\n"
      "\n"
      "    // Make the assertion\n"
      "    assertEquals(\"Thanks!\", label.getText());\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1068
#, no-c-format
msgid "You can also use URI fragments in the URL to open the application at a specific state. <phrase condition=\"web\">For information about URI fragments, see <xref linkend=\"advanced.urifu\"/>.</phrase>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1074
#, no-c-format
msgid "You should use the JUnit assertion commands. They are static methods defined in the <package>org.junit.Assert</package> class, which you can import (for example) with:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1080
#, no-c-format
msgid "<![CDATA[import static org.junit.Assert.assertEquals;]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1082
#, no-c-format
msgid "Please see the <link xlink:href=\"http://seleniumhq.org/docs/03_webdriver.html#selenium-webdriver-api-commands-and-operations\">Selenium API documentation</link> for a complete reference of the element search methods in the <classname>WebDriver</classname> and <classname>By</classname> classes and for the interaction commands in the <classname>WebElement</classname> class."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1091
#, no-c-format
msgid "TestBench has a collection of its own commands, defined in the <interfacename>TestBenchCommands</interfacename> interface. You can get a command object that you can use by calling <literal>testBench(driver)</literal> in a test case."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1098
#, no-c-format
msgid "While you can develop tests simply with test cases as described above, for the sake of maintainability it is often best to modularize the test code further, such as to separate testing at the levels of business logic and the page layout. See <xref linkend=\"testbench.maintainable\"/> for information about using page objects for this purpose."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1108
#, no-c-format
msgid "Creating and Closing a Web Driver"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1110
#, no-c-format
msgid "Vaadin TestBench uses Selenium WebDriver to execute tests in a browser. The <classname>WebDriver</classname> instance is created with the static <methodname>createDriver()</methodname> method in the <classname>TestBench</classname> class. It takes the driver as the parameter and returns it after registering it. The test cases must extend the <classname>TestBenchTestCase</classname> class, which manages the TestBench-specific features. You need to store the driver in the test case with <methodname>setDriver()</methodname>."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1121
#, no-c-format
msgid "The basic way is to create the driver in a method annotated with the JUnit <literal>@Before</literal> annotation and close it in a method annotated with <literal>@After</literal>."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1127
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class AdvancedTest extends TestBenchTestCase {\n"
      "    @Before\n"
      "    public void setUp() throws Exception {\n"
      "        ...\n"
      "        setDriver(TestBench.createDriver(new FirefoxDriver()));\n"
      "    }\n"
      "    ...\n"
      "    @After\n"
      "    public void tearDown() throws Exception {\n"
      "        driver.quit();\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1129
#, no-c-format
msgid "This creates the driver for each test you have in the test class, causing a new browser instance to be opened and closed. If you want to keep the browser open between the tests, you can use <literal>@BeforeClass</literal> and <literal>@AfterClass</literal> methods to create and quit the driver. In that case, the methods as well as the driver instance have to be static."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1138
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class AdvancedTest extends TestBenchTestCase {\n"
      "    static private WebDriver driver;\n"
      "\n"
      "    @BeforeClass\n"
      "    static public void createDriver() throws Exception {\n"
      "        driver = TestBench.createDriver(new FirefoxDriver());\n"
      "    }\n"
      "    ...\n"
      "    @AfterClass\n"
      "    static public void tearDown() throws Exception {\n"
      "        driver.quit();\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1141
#, no-c-format
msgid "Browser Drivers"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1143
#, no-c-format
msgid "Please see the API documentation of the <interfacename>WebDriver</interfacename> interface for a complete list of supported drivers, that is, classes implementing the interface."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1149
#, no-c-format
msgid "Both the Internet Explorer and Chrome require a special driver, as was noted in <xref linkend=\"testbench.installation.browserdrivers\"/>. The driver executable must be included in the operating system <literal>PATH</literal>, be given with a driver-specific system Java property:"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:1158
#, no-c-format
msgid "Chrome: <parameter>webdriver.chrome.driver</parameter>"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:1159
#, no-c-format
msgid "IE: <parameter>webdriver.ie.driver</parameter>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1162
#, no-c-format
msgid "You can set the property in Java with <methodname>System.setProperty(prop, key))</methodname> or pass it as a command-line parameter to the Java executable with <parameter>-Dwebdriver.chrome.driver=/path/to/driver</parameter>."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1169
#, no-c-format
msgid "If you use an ESR version of Firefox, which is recommended for test stability, you need to the binary when creating the driver as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1174
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[FirefoxBinary binary =\n"
      "    new FirefoxBinary(new File(\"/path/to/firefox_ESR_10\"));\n"
      "driver = TestBench.createDriver(\n"
      "    new FirefoxDriver(binary, new FirefoxProfile()));]]>"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1180
#, no-c-format
msgid "Querying Elements"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1182
#, no-c-format
msgid "The high-level ElementQuery API allows querying Vaadin components in the browser according to their component class type, hierarchy, caption, and other properties. Once one or more components are found, they can be interacted upon. The query API forms an domain-specific language (DSL), embedded in the <classname>TestBenchTestcase</classname> class."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1190
#, no-c-format
msgid "The basic idea of element queries match elements and return queries, which can again be queried upon, until terminated by a terminal query that returns one or more elements."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1196
#, no-c-format
msgid "Consider the following query:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1200
#, no-c-format
msgid "<?pocket-size 75% ?><![CDATA[List<ButtonElement> buttons = $(ButtonElement.class).all();]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1202
#, no-c-format
msgid "The query returns a list of HTML elements of all the <classname>Button</classname> components in the UI. Every Vaadin component has its corresponding element class, which has methods to interact with the particular component type. We could control the buttons found by the query, for example, by clicking them as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1211
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[for (ButtonElement b: buttons)\n"
      "    b.click();]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1213
#, no-c-format
msgid "In the following sub-sections, we look into the details of element queries."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1218
#, no-c-format
msgid "Generating Queries with Debug Window"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1220
#, no-c-format
msgid "You can use the debug window to easily generate the element query code to select a particular element in the UI. This should be especially useful when starting to use TestBench, to get the idea what the queries should be like."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1227
#, no-c-format
msgid "First, enable the debug window with the <literal>&amp;debug</literal> parameter for the application, as described in more detail in <xref linkend=\"advanced.debug\"/>. You can interact with the UI in any way you like before generating the query code, but we recommend that you proceed by following the sequence in which the user would use the UI in each use case, making the queries at each step."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1236
#, no-c-format
msgid "Switch to the TestBench tab in the debug window, and enable the pick mode by clicking the small button. Now, when you hover the mouse pointer on elements, it highlights them, and when you click one, it generates the TestBench element query to find the element. Use of the debug window is illustrated in <xref linkend=\"figure.testbench.elementquery.debugwindow\"/>."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1246
#, no-c-format
msgid "Using Debug Window to Generate Element Queries"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1257
#, no-c-format
msgid "You can select and copy and paste the code from the debug window to your editor. To exit the pick mode, click the pick button again."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1262
#, no-c-format
msgid "The debug window feature is available in Vaadin 7.2 and later."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1268
#, no-c-format
msgid "Querying Elements by Component Type (<methodname>$</methodname>)"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1270
#, no-c-format
msgid "The <methodname>$</methodname> method creates an <classname>ElementQuery</classname> that looks for the given element class. The method is available both in <classname>TestBenchTestcase</classname> and <classname>ElementQuery</classname>, which defines the context. The search is done recursively in the context."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1279
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[// Find the first OK button in the UI\n"
      "ButtonElement button = $(ButtonElement.class)\n"
      "    .caption(\"OK\").first();\n"
      "\n"
      "// A nested query where the context of the latter \n"
      "// component type query is the matching elements\n"
      "// - matches the first Label inside the \"content\" layout.\n"
      "LabelElement label = $(VerticalLayoutElement.class)\n"
      "    .id(\"content\").$(LabelElement.class).first();]]>"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1284
#, no-c-format
msgid "Non-Recursive Component Queries (<methodname>$$</methodname>)"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1286
#, no-c-format
msgid "The <methodname>$$</methodname> method creates a non-recursive <classname>ElementQuery</classname>. It is a shorthand for first creating a recursive query with <methodname>$</methodname> and then calling <methodname>recursive(false)</methodname> for the query."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1295
#, no-c-format
msgid "Element Classes"
msgstr ""

#. Tag: classname
#: chapter-testbench.xml:1298
#, no-c-format
msgid "TestBenchElement"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1301
#, no-c-format
msgid "Each Vaadin component has a corresponding element class in TestBench, which contains methods for interacting with the particular component. The element classes extend <classname>TestBenchElement</classname>. It implements Selenium <interfacename>WebElement</interfacename>, so the Selenium element API can be used directly. The element classes are distributed in a Vaadin library rather than with TestBench, as they must correspond with the Vaadin version used in the application."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1311
#, no-c-format
msgid "In addition to components, other Vaadin UI elements such as notifications (see <xref linkend=\"testbench.special.notifications\"/>) can have their corresponding element class. Add-on libraries may also define their custom element classes."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1318
#, no-c-format
msgid "<classname>TestBenchElement</classname> is a TestBench command executor, so you can always use an element to create query in the sub-tree of the element. For example, in the following we first find a layout element by its ID and then do a sub-query to find the first label in it:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1325
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[VerticalLayoutElement layout =\n"
      "    $(VerticalLayoutElement.class).id(\"content\");\n"
      "LabelElement label = layout.$(LabelElement.class).first();]]>"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1330
#, no-c-format
msgid "<classname>ElementQuery</classname> Objects"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1332
#, no-c-format
msgid "You can use an <classname>ElementQuery</classname> object to either make sub-queries to refine the query, or use a query terminator to finalize the query and get one or more matching elements."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1340
#, no-c-format
msgid "Query Terminators"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1342
#, no-c-format
msgid "A query is finalized by a sub-query that returns an element or a collection of elements."
msgstr ""

#. Tag: methodname
#: chapter-testbench.xml:1349
#, no-c-format
msgid "first()"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1351
#, no-c-format
msgid "Returns the first found element."
msgstr ""

#. Tag: methodname
#: chapter-testbench.xml:1357
#, no-c-format
msgid "get()"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1359
#, no-c-format
msgid "Returns the element by index in the collection of matching elements."
msgstr ""

#. Tag: methodname
#: chapter-testbench.xml:1366
#, no-c-format
msgid "all()"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1368
#, no-c-format
msgid "Returns a <interfacename>List</interfacename> of elements of the query type."
msgstr ""

#. Tag: methodname
#: chapter-testbench.xml:1375
#, no-c-format
msgid "id()"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1377
#, no-c-format
msgid "Returns the unique element having the given ID. Element IDs must always be unique in the web page. It is therefore meaningless to make a complex query to match the ID, just matching the element class is enough."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1388
#, no-c-format
msgid "Web Elements"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1390
#, no-c-format
msgid "A query returns one or more elements extending Selenium <classname>WebElement</classname>. The particular element-specific class offers methods to manipulate the associated Vaadin component, while you can also use the lower-level general-purpose methods defined in <classname>WebElement</classname>."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1402
#, no-c-format
msgid "Element Selectors"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1404
#, no-c-format
msgid "In addition to the high-level ElementQuery API described in the previous section, Vaadin TestBench includes the lower-level Selenium WebDriver API, with Vaadin extensions. You can find elements also by a plain XPath expression, an element ID, CSS style class, and so on. You can use such selectors together with the element queries. Like the ElementQuery API, it can be considered a domain-specific language (DSL) that is embedded in the <classname>TestBenchTestcase</classname> class."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1414
#, no-c-format
msgid "The available selectors are defined as static methods in the <classname>com.vaadin.testbench.By</classname> class. They create and return a <classname>By</classname> instance, which you can use for the <methodname>findElement()</methodname> method in <classname>WebDriver</classname>."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1424
#, no-c-format
msgid "The ID, CSS class, and Vaadin selectors are described below. For others, we refer to the <link xlink:href=\"http://seleniumhq.org/docs/03_webdriver.html\">Selenium WebDriver API documentation</link>."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1431
#, no-c-format
msgid "Some selectors are not applicable to all elements, for example if an element does not have an ID or it is outside the Vaadin application. In such case, another selector is used according to a preference order. You can change the order of the preferred selectors by selecting <menuchoice><guimenu>Options</guimenu><guisubmenu>Options</guisubmenu><guimenuitem>Locator Builders</guimenuitem></menuchoice> and dragging the selectors (or locators) to a preferred order. Normally, the Vaadin selector should be at top of the list."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1443
#, no-c-format
msgid "Selector Robustness"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1445
#, no-c-format
msgid "Before we proceed, it is important to note that selectors have differences in their robustness. Robustness is important for avoiding failed tests when there are irrelevant changes in the HTML DOM tree."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1451
#, no-c-format
msgid "The ElementQuery API and the Vaadin selector (<methodname>By.vaadin()</methodname>) use the logical widget hierarchy to find the HTML element to test, instead of the exact DOM structure. This makes them rather robust, though still vulnerable to irrelevant changes in the exact component hierarchy."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1459
#, no-c-format
msgid "The XPath selector can be highly vulnerable to changes in the DOM path if the path is given exactly from the body element of the page. It is, however, very flexible, and can be used in robust ways, for example, by selecting by HTML element and a CSS class name or an attribute value."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1466
#, no-c-format
msgid "You can likewise use a CSS selector to select specific components by CSS class in a robust way."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1473
#, no-c-format
msgid "Finding by ID"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1475
#, no-c-format
msgid "Selecting elements by their HTML element <literal>id</literal> attribute is usually the easiest way to select elements. It requires that you use component IDs, as described in <xref linkend=\"testbench.preparing\"/>. The ID is used as is for the <literal>id</literal> attribute of the top element of the component. Selecting is done by the <methodname>By.id()</methodname> selector."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1485
#, no-c-format
msgid "For example, in the <filename>SimpleCalculatorITCase.java</filename> example, we use the component ID as follows to click on the calculator buttons:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1491
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[@Test\n"
      "public void testOnePlusTwo() throws Exception {\n"
      "    openCalculator();\n"
      "\n"
      "    // Click the buttons in the user interface\n"
      "    getDriver().findElement(By.id(\"button_1\")).click();\n"
      "    getDriver().findElement(By.id(\"button_+\")).click();\n"
      "    getDriver().findElement(By.id(\"button_2\")).click();\n"
      "    getDriver().findElement(By.id(\"button_=\")).click();\n"
      "\n"
      "    // Get the result label value\n"
      "    assertEquals(\"3.0\", getDriver().findElement(\n"
      "            By.id(\"display\")).getText());\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1493
#, no-c-format
msgid "The ID selectors are used extensively in the TestBench examples."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1499
#, no-c-format
msgid "Finding by Vaadin Selector"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1501
#, no-c-format
msgid "In addition to the Selenium selectors, Vaadin TestBench provides a <emphasis>Vaadin selector</emphasis>, which allows pointing to a Vaadin component by its layout widget path. The element query API is in fact an API to create Vaadin selectors."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1508
#, no-c-format
msgid "You can create a Vaadin selector with the <methodname>By.vaadin()</methodname> method. You need to use the Vaadin <classname>By</classname>, defined in the <package>com.vaadin.testbench</package> package, which extends the Selenium <classname>By</classname>."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1516
#, no-c-format
msgid "A Vaadin selector begins with a UI identifier. It is the URL path of the UI, but without any slashes or other special characters. For example, <literal>/book-examples/tobetested</literal> would be <literal>bookexamplestobetested</literal>. After the identifier, comes two colons \"<literal>::</literal>\", followed by a slash-delimited component path to the component to be selected. The elements in the component path are client-side classes of the Vaadin user interfacer components. For example, the server-side <classname>VerticalLayout</classname> component has <classname>VVerticalLayout</classname> client-side counterpart. All path elements except the leaves are component containers, usually layouts. The exact contained component is identified by its index in brackets."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1532
#, no-c-format
msgid "A reference to a component ID is given with a <literal>PID_S</literal> suffix to the ID."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1537
#, no-c-format
msgid "For example, if the ID is <literal>main.button</literal>, as it was set in the application example earlier, you could find and test it as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1543
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[// Get the button's element.\n"
      "// Use the ID set with setId().\n"
      "WebElement button = driver.findElement(By.vaadin(\n"
      "    \"bookexamplestobetested::PID_Smain.button\"));\n"
      "\n"
      "// Get the caption text\n"
      "assertEquals(\"Push Me!\", button.getText());\n"
      "\n"
      "// And click it\n"
      "button.click();\n"
      "\n"
      "// Get the Label's element by full path\n"
      "WebElement label = driver.findElement(By.vaadin(\n"
      "    \"bookexamplestobetested::/VVerticalLayout[0]/\"+\n"
      "    \"ChildComponentContainer[1]/VLabel[0]\"));\n"
      "\n"
      "// Make the assertion\n"
      "assertEquals(\"Thanks!\", label.getText());]]>"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1548
#, no-c-format
msgid "Finding by CSS Class"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1550
#, no-c-format
msgid "An element with a particular CSS style class name can be selected with the <methodname>By.className()</methodname> method. CSS selectors are useful for elements which have no ID, nor can be found easily from the component hierarchy, but do have a particular unique CSS style. Tooltips are one example, as they are floating <literal>div</literal> elements under the root element of the application. Their <literal>v-tooltip</literal> style makes it possible to select them as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1560
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[// Verify that the tooltip contains the expected text\n"
      "String tooltipText = driver.findElement(\n"
      "    By.className(\"v-tooltip\")).getText();]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1562
#, no-c-format
msgid "For a complete example, see the <filename>AdvancedCommandsITCase.java</filename> file in the examples."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1570
#, no-c-format
msgid "Special Test Features"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1572
#, no-c-format
msgid "In the following, we go through a number of TestBench features for handling special cases, such as tooltips, scrolling, notifications, context menus, and profiling responsiveness. Finally, we look into the Page Object pattern."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1579
#, no-c-format
msgid "Waiting for Vaadin"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1581
#, no-c-format
msgid "Selenium, on which Vaadin TestBench is based, is originally intended for regular web applications that load a page that is immediately rendered by the browser. In such applications, you can test the page elements immediately after the page is loaded. In Vaadin and other AJAX applications, rendering is done by JavaScript code asynchronously, so you need to wait until the server has given its response to an AJAX request and the JavaScript code finishes rendering the UI. Selenium supports AJAX applications by having special wait methods to poll the UI until the rendering is finished. In pure Selenium, you need to use the wait methods explicitly, and know what to use and when. Vaadin TestBench works together with the client-side engine of Vaadin framework to immediately detect when the rendering is finished. Waiting is implicit, so you do not normally need to insert any wait commands yourself."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1597
#, no-c-format
msgid "Waiting is automatically enabled, but it may be necessary to disable it in some cases. You can do that by calling <methodname>disableWaitForVaadin()</methodname> in the <interfacename>TestBenchCommands</interfacename> interface. You can call it in a test case as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1605
#, no-c-format
msgid "<![CDATA[testBench(driver).disableWaitForVaadin();]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1607
#, no-c-format
msgid "When disabled, you can wait for the rendering to finish by calling <methodname>waitForVaadin()</methodname> explicitly."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1612
#, no-c-format
msgid "<![CDATA[testBench(driver).waitForVaadin();]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1614
#, no-c-format
msgid "You can re-enable the waiting with <methodname>enableWaitForVaadin()</methodname> in the same interface."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1621
#, no-c-format
msgid "Testing Tooltips"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1623
#, no-c-format
msgid "Component tooltips show when you hover the mouse over a component. Showing them require special command. Handling them is also special, as the tooltips are floating overlay element, which are not part of the normal component hierarchy."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1630
#, no-c-format
msgid "Let us assume that you have set the tooltip as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1634
#, no-c-format
msgid ""
      "<![CDATA[// Create a button with a component ID\n"
      "Button button = new Button(\"Push Me!\");\n"
      "button.setId(\"main.button\");\n"
      "\n"
      "// Set the tooltip        \n"
      "button.setDescription(\"This is a tip\");]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1636
#, no-c-format
msgid "The tooltip of a component is displayed with the <methodname>showTooltip()</methodname> method in the <classname>TestBenchElementCommands</classname> interface. You should wait a little to make sure it comes up. The floating tooltip element is not under the element of the component, but you can find it by <literal>//div[@class='v-tooltip']</literal> XPath expression."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1645
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[@Test\n"
      "public void testTooltip() throws Exception {\n"
      "    driver.get(appUrl);\n"
      "    \n"
      "    ButtonElement button =\n"
      "        $(ButtonElement.class).id(\"main.button\");\n"
      "\n"
      "    button.showTooltip();\n"
      "\n"
      "    WebElement ttip = findElement(By.className(\"v-tooltip\"));\n"
      "    assertEquals(ttip.getText(), \"This is a tip\");\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1650
#, no-c-format
msgid "Scrolling"
msgstr ""

#. Tag: primary
#: chapter-testbench.xml:1653
#, no-c-format
msgid "scrolling"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1656
#, no-c-format
msgid "Some Vaadin components, such as <classname>Table</classname> and <classname>Panel</classname> have a scrollbar. To get hold of the scrollbar, you must first find the component element. Then, you need to get hold of the <interfacename>TestBenchElementCommands</interfacename> interface from the <classname>WebElement</classname> with <methodname>testBenchElement(WebElement)</methodname>. The <methodname>scroll()</methodname> method in the interface scrolls a vertical scrollbar down the number of pixels given as the parameter. The <methodname>scrollLeft()</methodname> scrolls a horizontal scrollbar by the given number of pixels."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1671
#, no-c-format
msgid "Testing Notifications"
msgstr ""

#. Tag: classname
#: chapter-testbench.xml:1674
#, no-c-format
msgid "Notification"
msgstr ""

#. Tag: secondary
#: chapter-testbench.xml:1675
#, no-c-format
msgid "testing"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1678
#, no-c-format
msgid "You can find notification elements by the <classname>NotificationElement</classname> class in the element query API."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1683
#, no-c-format
msgid "Let us assume that you pop the notifcation up as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1687
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[Button button = new Button(\"Click Me!\");\n"
      "button.addClickListener(new Button.ClickListener() {\n"
      "    public void buttonClick(ClickEvent event) {\n"
      "        Notification.show(\"Thank You!\");\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1689
#, no-c-format
msgid "You could then check for the notification as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1693
#, no-c-format
msgid ""
      "<?pocket-size 70% ?><![CDATA[// Click the button to open the notification\n"
      "ButtonElement button =\n"
      "    $(ButtonElement.class).caption(\"Click Me!\").first();\n"
      "button.click();\n"
      "\n"
      "// Verify the notification\n"
      "NotificationElement notification =\n"
      "        $(NotificationElement.class).first();\n"
      "assertEquals(\"Thank You!\", notification.getText());\n"
      "notification.closeNotification();]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1695
#, no-c-format
msgid "You need to close the notification box with <methodname>closeNotification()</methodname> to move forward."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1702
#, no-c-format
msgid "Testing Context Menus"
msgstr ""

#. Tag: primary
#: chapter-testbench.xml:1705
#, no-c-format
msgid "context menus"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1708
#, no-c-format
msgid "Opening context menus require special handling. You need to create a Selenium <classname>Actions</classname> object to perform a context click on a <classname>WebElement</classname>."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1714
#, no-c-format
msgid "In the following example, we open a context menu in a <classname>Table</classname> component, find an item by its caption text, and click it."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1720
#, no-c-format
msgid ""
      "<?pocket-size 70% ?><![CDATA[// Select the table body element\n"
      "WebElement e = getDriver().findElement(\n"
      "        By.className(\"v-table-body\"));\n"
      "\n"
      "// Perform context click action to open the context menu\n"
      "new Actions(getDriver()).moveToElement(e)\n"
      "        .contextClick(e).perform();\n"
      "\n"
      "// Select \"Add Comment\" from the opened menu\n"
      "getDriver().findElement(\n"
      "        By.xpath(\"//*[text() = 'Add Comment']\")).click();]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1722
#, no-c-format
msgid "The complete example is given in the <filename>AdvancedCommandsITCase.java</filename> example source file."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1729
#, no-c-format
msgid "Profiling Test Execution Time"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1731
#, no-c-format
msgid "It is not just that it works, but also how long it takes. Profiling test execution times consistently is not trivial, as a test environment can have different kinds of latency and interference. For example in a distributed setup, timings taken on the test server would include the latencies between the test server, the grid hub, a grid node running the browser, and the web server running the application. In such a setup, you could also expect interference between multiple test nodes, which all might make requests to a shared application server and possibly also share virtual machine resources."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1743
#, no-c-format
msgid "Furthermore, in Vaadin applications, there are two sides which need to be profiled: the server-side, on which the application logic is executed, and the client-side, where it is rendered in the browser. Vaadin TestBench includes methods for measuring execution time both on the server-side and the client-side."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1751
#, no-c-format
msgid "The <interfacename>TestBenchCommands</interfacename> interface offers the following methods for profiling test execution time:"
msgstr ""

#. Tag: methodname
#: chapter-testbench.xml:1758
#, no-c-format
msgid "totalTimeSpentServicingRequests()"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1760
#, no-c-format
msgid "Returns the total time (in milliseconds) spent servicing requests in the application on the server-side. The timer starts when you first navigate to the application and hence start a new session. The time passes only when servicing requests for the particular session. The timer is shared in the servlet session, so if you have, for example, multiple portlets in the same application (session), their execution times will be included in the same total."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1773
#, no-c-format
msgid "Notice that if you are also interested in the client-side performance for the last request, you must call the <methodname>timeSpentRenderingLastRequest()</methodname> before calling this method. This is due to the fact that this method makes an extra server request, which will cause an empty response to be rendered."
msgstr ""

#. Tag: methodname
#: chapter-testbench.xml:1784
#, no-c-format
msgid "timeSpentServicingLastRequest()"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1786
#, no-c-format
msgid "Returns the time (in milliseconds) spent servicing the last request in the application on the server-side. Notice that not all user interaction through the WebDriver cause server requests."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1793
#, no-c-format
msgid "As with the total above, if you are also interested in the client-side performance for the last request, you must call the <methodname>timeSpentRenderingLastRequest()</methodname> before calling this method."
msgstr ""

#. Tag: methodname
#: chapter-testbench.xml:1802
#, no-c-format
msgid "totalTimeSpentRendering()"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1804
#, no-c-format
msgid "Returns the total time (in milliseconds) spent rendering the user interface of the application on the client-side, that is, in the browser. This time only passes when the browser is rendering after interacting with it through the WebDriver. The timer is shared in the servlet session, so if you have, for example, multiple portlets in the same application (session), their execution times will be included in the same total."
msgstr ""

#. Tag: methodname
#: chapter-testbench.xml:1816
#, no-c-format
msgid "timeSpentRenderingLastRequest()"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1818
#, no-c-format
msgid "Returns the time (in milliseconds) spent rendering user interface of the application after the last server request. Notice that not all user interaction through the WebDriver cause server requests."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1825
#, no-c-format
msgid "If you also call the <methodname>timeSpentServicingLastRequest()</methodname> or <methodname>totalTimeSpentServicingRequests()</methodname>, you should do so before calling this method. The methods cause a server request, which will zero the rendering time measured by this method."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1837
#, no-c-format
msgid "Generally, only interaction with fields in the <emphasis>immediate</emphasis> mode cause server requests. This includes button clicks. Some components, such as <classname>Table</classname>, also cause requests otherwise, such as when loading data while scrolling. Some interaction could cause multiple requests, such as when images are loaded from the server as the result of user interaction."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1846
#, no-c-format
msgid "The following example is given in the <filename>VerifyExecutionTimeITCase.java</filename> file under the TestBench examples."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1852
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[@Test\n"
      "public void verifyServerExecutionTime() throws Exception {\n"
      "    openCalculator();\n"
      "\n"
      "    // Get start time on the server-side\n"
      "    long currentSessionTime = testBench(getDriver())\n"
      "            .totalTimeSpentServicingRequests();\n"
      "\n"
      "    // Interact with the application\n"
      "    calculateOnePlusTwo();\n"
      "\n"
      "    // Calculate the passed processing time on the serve-side\n"
      "    long timeSpentByServerForSimpleCalculation = testBench()\n"
      "        .totalTimeSpentServicingRequests() - currentSessionTime;\n"
      "\n"
      "    // Report the timing\n"
      "    System.out.println(\"Calculating 1+2 took about \"\n"
      "            + timeSpentByServerForSimpleCalculation\n"
      "            + \"ms in servlets service method.\");\n"
      "\n"
      "    // Fail if the processing time was critically long\n"
      "    if (timeSpentByServerForSimpleCalculation > 30) {\n"
      "        fail(\"Simple calculation shouldn't take \"\n"
      "             + timeSpentByServerForSimpleCalculation + \"ms!\");\n"
      "    }\n"
      "\n"
      "    // Do the same with rendering time\n"
      "    long totalTimeSpentRendering =\n"
      "            testBench().totalTimeSpentRendering();\n"
      "    System.out.println(\"Rendering UI took \" +\n"
      "            totalTimeSpentRendering + \"ms\");\n"
      "    if (timeSpentByServerForSimpleCalculation > 400) {\n"
      "        fail(\"Rendering UI shouldn't take \"\n"
      "             + timeSpentByServerForSimpleCalculation + \"ms!\");\n"
      "    }\n"
      "\n"
      "    // A regular assertion on the UI state\n"
      "    assertEquals(\"3.0\", getDriver().findElement(\n"
      "                        By.id(\"display\")).getText());\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1858
#, no-c-format
msgid "Creating Maintainable Tests"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1860
#, no-c-format
msgid "The first important rule in developing tests is to keep them readable and maintainable. Otherwise, when the test fail, such as after refactoring the application code, the developers get impatient in trying to understand them to fix them, and easily disable them. Readability and maintainability can be improved with the Page Object Pattern described below."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1868
#, no-c-format
msgid "The second rule is to run the tests often. It is best to use a continuous integration server to run them at least once a day, or preferably on every commit."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1875
#, no-c-format
msgid "The Page Object Pattern"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1877
#, no-c-format
msgid "The Page Object Pattern aims to simplify and modularize testing application views. The pattern follows the design principle of <link xlink:href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\">separation of concerns</link>, to handle different concerns in separate modules, while hiding information irrelevant to other tests by encapsulation."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1885
#, no-c-format
msgid "A <emphasis>page object</emphasis> has methods to interact with a view or a sub-view, and to retrieve values in the view. You also need a method to open the page and navigate to the proper view."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1891 chapter-testbench.xml:1913 chapter-testbench.xml:2018 chapter-testbench.xml:2159
#, no-c-format
msgid "For example:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1895
#, no-c-format
msgid ""
      "<?pocket-size 70% ?><![CDATA[public class CalculatorPageObject\n"
      "       extends TestBenchTestCase {\n"
      "    @FindBy(id = \"button_=\")\n"
      "    private WebElement equals;\n"
      "    ...\n"
      "\n"
      "    /**\n"
      "     * Opens the URL where the calculator resides.\n"
      "     */\n"
      "    public void open() {\n"
      "        getDriver().get(\n"
      "            \"http://localhost:8080/?restartApplication\");\n"
      "    }\n"
      "\n"
      "    /**\n"
      "     * Pushes buttons on the calculator\n"
      "     *\n"
      "     * @param buttons the buttons to push: \"123+2\", etc.\n"
      "     * @return The same instance for method chaining.\n"
      "     */\n"
      "    public CalculatorPageObject enter(String buttons) {\n"
      "        for (char numberChar : buttons.toCharArray()) {\n"
      "            pushButton(numberChar);\n"
      "        }\n"
      "        return this;\n"
      "    }\n"
      "\n"
      "    /**\n"
      "     * Pushes the specified button.\n"
      "     *\n"
      "     * @param button The character of the button to push.\n"
      "     */\n"
      "    private void pushButton(char button) {\n"
      "        getDriver().findElement(\n"
      "            By.id(\"button_\" + button)).click();\n"
      "    }\n"
      "\n"
      "    /**\n"
      "     * Pushes the equals button and returns the contents\n"
      "     * of the calculator \"display\".\n"
      "     *\n"
      "     * @return The string (number) shown in the \"display\"\n"
      "     */\n"
      "    public String getResult() {\n"
      "        equals.click();\n"
      "        return display.getText();\n"
      "    }\n"
      "\n"
      "    ...\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1897
#, no-c-format
msgid "If you have <classname>WebElement</classname> members annotated with <classname>@FindBy</classname>, they can be automatically filled with the HTML element matching the given component ID, as if done with <literal>driver.findElement(By.id(fieldname))</literal>. To do so, you need to create the page object with <classname>PageFactory</classname> as is done in the following test setup:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1906
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[\n"
      "public class PageObjectExampleITCase {\n"
      "    private CalculatorPageObject calculator;\n"
      "\n"
      "    @Before\n"
      "    public void setUp() throws Exception {\n"
      "        driver = TestBench.createDriver(new FirefoxDriver());\n"
      "\n"
      "        // Use PageFactory to automatically initialize fields\n"
      "        calculator = PageFactory.initElements(driver,\n"
      "                         CalculatorPageObject.class);\n"
      "    }\n"
      "    ...]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1908
#, no-c-format
msgid "Test cases can use these methods at business logic level, without knowing about the exact structure of the views."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:1917
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[@Test\n"
      "public void testAddCommentRowToLog() throws Exception {\n"
      "    calculator.open();\n"
      "\n"
      "    // Just do some math first\n"
      "    calculator.enter(\"1+2\");\n"
      "\n"
      "    // Verify the result of the calculation\n"
      "    assertEquals(\"3.0\", calculator.getResult());\n"
      "\n"
      "    ...\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1919
#, no-c-format
msgid "You can find the complete example of the Page Object Pattern in the <filename>example/src/test/java/com/vaadin/testbenchexample/pageobjectexample/</filename> folder in the TestBench installation package. The <filename>PageObjectExampleITCase.java</filename> runs tests on the Calc UI (also included in the example sources), using the page objects to interact with the different parts of the UI and to check the results."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1928
#, no-c-format
msgid "The page objects included in the <filename>pageobjects</filename> subfolder are as follows:"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1934
#, no-c-format
msgid "The <classname>CalculatorPageObject</classname> (as outlined in the example code above) has methods to click the buttons in the calculator and the retrieve the result shown in the \"display\"."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1939
#, no-c-format
msgid "The <classname>LogPageObject</classname> can retrieve the content of the log entries in the log table, and right-click them to open the comment sub-window."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1943
#, no-c-format
msgid "The <classname>AddComment</classname> can enter a comment string in the comment editor sub-window and submit it (click the <guilabel>Add</guilabel> button)."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1951
#, no-c-format
msgid "Taking and Comparing Screenshots"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1953
#, no-c-format
msgid "You can take and compare screenshots with reference screenshots taken earlier. If there are differences, you can fail the test case."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:1959
#, no-c-format
msgid "Screenshot Parameters"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:1961
#, no-c-format
msgid "The screenshot configuration parameters are defined with static methods in the <classname>com.vaadin.testbench.Parameters</classname> class."
msgstr ""

#. Tag: term
#: chapter-testbench.xml:1968
#, no-c-format
msgid "<parameter>screenshotErrorDirectory</parameter> (default: <literal>null</literal>)"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:1969
#, no-c-format
msgid "Defines the directory where screenshots for failed tests or comparisons are stored."
msgstr ""

#. Tag: term
#: chapter-testbench.xml:1975
#, no-c-format
msgid "<parameter>screenshotReferenceDirectory</parameter> (default: <literal>null</literal>)"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:1976
#, no-c-format
msgid "Defines the directory where the reference images for screenshot comparison are stored."
msgstr ""

#. Tag: term
#: chapter-testbench.xml:1982
#, no-c-format
msgid "<parameter>screenshotComparisonTolerance</parameter> (default: <literal>0.01</literal>)"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:1983
#, no-c-format
msgid "Screen comparison is usually not done with exact pixel values, because rendering in browser often has some tiny inconsistencies. Also image compression may cause small artifacts."
msgstr ""

#. Tag: term
#: chapter-testbench.xml:1990
#, no-c-format
msgid "<parameter>screenshotComparisonCursorDetection</parameter> (default: <literal>false</literal>)"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:1991
#, no-c-format
msgid "Some field component get a blinking cursor when they have the focus. The cursor can cause unnecessary failures depending on whether the blink happens to make the cursor visible or invisible when taking a screenshot. This parameter enables cursor detection that tries to minimize these failures."
msgstr ""

#. Tag: term
#: chapter-testbench.xml:2000
#, no-c-format
msgid "<parameter>maxScreenshotRetries</parameter> (default: 2)"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:2001
#, no-c-format
msgid "Sometimes a screenshot comparison may fail because the screen rendering has not yet finished, or there is a blinking cursor that is different from the reference screenshot. For these reasons, Vaadin TestBench retries the screenshot comparison for a number of times defined with this parameter."
msgstr ""

#. Tag: term
#: chapter-testbench.xml:2010
#, no-c-format
msgid "<parameter>screenshotRetryDelay</parameter> (default: <literal>500</literal>)"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:2011
#, no-c-format
msgid "Delay in milliseconds for making a screenshot retry when a comparison fails."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:2022
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[@Before\n"
      "public void setUp() throws Exception {\n"
      "    Parameters.setScreenshotErrorDirectory(\n"
      "        \"screenshots/errors\");\n"
      "    Parameters.setScreenshotReferenceDirectory(\n"
      "        \"screenshots/reference\");\n"
      "    Parameters.setMaxScreenshotRetries(2);\n"
      "    Parameters.setScreenshotComparisonTolerance(1.0);\n"
      "    Parameters.setScreenshotRetryDelay(10);\n"
      "    Parameters.setScreenshotComparisonCursorDetection(true);\n"
      "    Parameters.setCaptureScreenshotOnFailure(true);\n"
      "}\n"
      "]]>"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2027
#, no-c-format
msgid "Taking Screenshots on Failure"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2031
#, no-c-format
msgid "Vaadin TestBench can take screenshots automatically when a test fails. To enable the feature, you need to include the <classname>ScreenshotOnFailureRule</classname> JUnit rule with a member variable annotated with <classname>@Rule</classname> in the test case as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:2039
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[@Rule\n"
      "public ScreenshotOnFailureRule screenshotOnFailureRule =\n"
      "    new ScreenshotOnFailureRule(this, true);]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2041
#, no-c-format
msgid "Notice that you must not call <methodname>quit()</methodname> for the driver in the <literal>@After</literal> method, as that would close the driver before the rule takes the screenshot."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2047
#, no-c-format
msgid "The screenshots are written to the error directory defined with the <parameter>screenshotErrorDirectory</parameter> parameter. You can configure it in the test case setup as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:2053
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[@Before\n"
      "public void setUp() throws Exception {\n"
      "    Parameters.setScreenshotErrorDirectory(\"screenshots/errors\");\n"
      "    ...\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2057
#, no-c-format
msgid "Taking Screenshots for Comparison"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2059
#, no-c-format
msgid "Vaadin TestBench allows taking screenshots of the web browser window with the <methodname>compareScreen()</methodname> command in the <classname>TestBenchCommands</classname> interface. The method has a number of variants."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2066
#, no-c-format
msgid "The <methodname>compareScreen(<classname>File</classname>)</methodname> takes a <classname>File</classname> object pointing to the reference image. In this case, a possible error image is written to the error directory with the same file name. You can get a file object to a reference image with the static <methodname>ImageFileUtil.getReferenceScreenshotFile()</methodname> helper method."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:2076
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[assertTrue(\"Screenshots differ\",\n"
      "           testBench(driver).compareScreen(\n"
      "               ImageFileUtil.getReferenceScreenshotFile(\n"
      "                   \"myshot.png\")));]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2078
#, no-c-format
msgid "The <methodname>compareScreen(<classname>String</classname>)</methodname> takes a base name of the screenshot. It is appended with browser identifier and the file extension."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:2084
#, no-c-format
msgid "<?pocket-size 75% ?><![CDATA[assertTrue(testBench(driver).compareScreen(\"tooltip\"));]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2086
#, no-c-format
msgid "The <methodname>compareScreen(<classname>BufferedImage</classname>, <classname>String</classname>)</methodname> allows keeping the reference image in memory. An error image is written to a file with a name determined from the base name given as the second parameter."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2093
#, no-c-format
msgid "Screenshots taken with the <methodname>compareScreen()</methodname> method are compared to a reference image stored in the reference image folder. If differences are found (or the reference image is missing), the comparison method returns <literal>false</literal> and stores the screenshot in the error folder. It also generates an HTML file that highlights the differing regions."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2103
#, no-c-format
msgid "Screenshot Comparison Error Images"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2105
#, no-c-format
msgid "Screenshots with errors are written to the error folder, which is defined with the <parameter>screenshotErrorDirectory</parameter> parameter described in <xref linkend=\"testbench.screenshots.parameters\"/>."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2112
#, no-c-format
msgid "For example, the error caused by a missing reference image could be written to <filename>screenshot/errors/tooltip_firefox_12.0.png</filename>. The image is shown in <xref linkend=\"figure.testbench.screenshot.comparison.error-images.calc\"/>."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2121
#, no-c-format
msgid "A screenshot taken by a test run"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2132
#, no-c-format
msgid "Screenshots cover the visible page area in the browser. The size of the browser is therefore relevant for screenshot comparison. The browser is normally sized with a predefined default size. You can set the size of the browser window in a couple of ways. You can set the size of the browser window with, for example, <literal>driver.manage().window().setSize(new Dimension(1024, 768));</literal> in the <literal>@Before</literal> method. The size includes any browser chrome, so the actual screenshot size will be smaller. To set the actual view area, you can use <literal>TestBenchCommands.resizeViewPortTo(1024, 768)</literal>."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2147
#, no-c-format
msgid "Reference Images"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2149
#, no-c-format
msgid "Reference images are expected to be found in the reference image folder, as defined with the <parameter>screenshotReferenceDirectory</parameter> parameter described in <xref linkend=\"testbench.screenshots.parameters\"/>. To create a reference image, just copy a screenshot from the <filename>errors/</filename> directory to the <filename>reference/</filename> directory."
msgstr ""

#. Tag: screen
#: chapter-testbench.xml:2163
#, no-c-format
msgid "<prompt>$</prompt> <command>cp</command> <parameter>screenshot/errors/tooltip_firefox_12.0.png</parameter> <parameter>screenshot/reference/</parameter>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2165
#, no-c-format
msgid "Now, when the proper reference image exists, rerunning the test outputs success:"
msgstr ""

#. Tag: screen
#: chapter-testbench.xml:2170
#, no-c-format
msgid ""
      "<prompt>$</prompt> <command>java</command> ...\n"
      "JUnit version 4.5\n"
      ".\n"
      "Time: 18.222\n"
      "\n"
      "OK (1 test)"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2172
#, no-c-format
msgid "You can also supply multiple versions of the reference images by appending an underscore and an index to the filenames. For example:"
msgstr ""

#. Tag: screen
#: chapter-testbench.xml:2177
#, no-c-format
msgid ""
      "tooltip_firefox_12.0.png\n"
      "tooltip_firefox_12.0_1.png\n"
      "tooltip_firefox_12.0_2.png"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2179
#, no-c-format
msgid "This can be useful in certain situations when there actually are more than one \"correct\" reference."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2186
#, no-c-format
msgid "Masking Screenshots"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2188
#, no-c-format
msgid "You can make masked screenshot comparison with reference images that have non-opaque regions. Non-opaque pixels in the reference image, that is, ones with less than 1.0 value in the alpha channel, are ignored in the screenshot comparison."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2195
#, no-c-format
msgid "Please see the <filename>ScreenshotITCase.java</filename> example in the installation package for an example of using masked screenshots. The <filename>example/Screenshot_Comparison_Tests.pdf</filename> document describes how to enable the example and how to create the screenshot masks in an image editor."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2206
#, no-c-format
msgid "Visualization of Differences in Screenshots with Highlighting"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2208
#, no-c-format
msgid "Vaadin TestBench supports advanced difference visualization between a captured screenshot and the reference image. A difference report is written to a HTML file that has the same name as the failed screenshot, but with <filename>.html</filename> suffix. The reports are written to the same <filename>errors/</filename> folder as the screenshots from the failed tests."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2217
#, no-c-format
msgid "The differences in the images are highlighted with blue rectangles. Moving the mouse pointer over a square shows the difference area as it appears in the reference image. Clicking the image switches the entire view to the reference image and back. Text \"<guilabel>Image for this run</guilabel>\" is displayed in the top-left corner of the screenshot to distinguish it from the reference image."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2226
#, no-c-format
msgid "shows a difference report with one difference between the visualized screenshot (bottom) and the reference image (top)."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2234
#, no-c-format
msgid "The reference image and a highlighted error image"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2256
#, no-c-format
msgid "Practices for Handling Screenshots"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2258
#, no-c-format
msgid "Access to the screenshot reference image directory should be arranged so that a developer who can view the results can copy the valid images to the reference directory. One possibility is to store the reference images in a version control system and check-out them to the <filename>reference/</filename> directory."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2266
#, no-c-format
msgid "A build system or a continuous integration system can be configured to automatically collect and store the screenshots as build artifacts."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2274
#, no-c-format
msgid "Known Compatibility Problems"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2278
#, no-c-format
msgid "Screenshots when running Internet Explorer 9 in Compatibility Mode"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2280
#, no-c-format
msgid "Internet Explorer prior to version 9 adds a two-pixel border around the content area. Version 9 no longer does this and as a result screenshots taken using Internet Explorer 9 running in compatibility mode (IE7/IE8) will include the two pixel border, contrary to what the older versions of Internet Explorer do."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2295
#, no-c-format
msgid "Running Tests"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2297
#, no-c-format
msgid "During test development, you usually run the tests from your IDE. After that, you want to have them run by a build system, possibly under a continuous integration system. In the following, we describe how to run tests by Ant and Maven."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2305
#, no-c-format
msgid "Running Tests with Ant"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2307
#, no-c-format
msgid "Apache Ant has built-in support for executing JUnit tests. To enable the support, you need to have the JUnit library <filename>junit.jar</filename> and its Ant integration library <filename>ant-junit.jar</filename> in the Ant classpath, as described in the Ant documentation."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2314
#, no-c-format
msgid "Once enabled, you can use the <literal>&lt;junit&gt;</literal> task in an Ant script. The following example assumes that the source files are located under a <filename>src</filename> directory under the current directory and compiles them to the <filename>classes</filename> directory. The the class path is defined with the <literal>classpath</literal> reference ID and should include the TestBench JAR and all relevant dependencies."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:2324
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[<project default=\"run-tests\">\n"
      "    <path id=\"classpath\">\n"
      "        <fileset dir=\"lib\"\n"
      "                 includes=\"vaadin-testbench-standalone-*.jar\" />\n"
      "    </path>\n"
      "\n"
      "    <!-- This target compiles the JUnit tests. -->\n"
      "    <target name=\"compile-tests\">\n"
      "        <mkdir dir=\"classes\" />\n"
      "        <javac srcdir=\"src\" destdir=\"classes\"\n"
      "               debug=\"on\" encoding=\"utf-8\">\n"
      "            <classpath>\n"
      "                <path refid=\"classpath\" />\n"
      "            </classpath>\n"
      "        </javac>\n"
      "    </target>\n"
      "\n"
      "    <!-- This target calls JUnit -->\n"
      "    <target name=\"run-tests\" depends=\"compile-tests\">\n"
      "        <junit fork=\"yes\">\n"
      "            <classpath>\n"
      "                <path refid=\"classpath\" />\n"
      "                <pathelement path=\"classes\" />\n"
      "            </classpath>\n"
      "\n"
      "            <formatter type=\"brief\" usefile=\"false\" />\n"
      "                                \n"
      "            <batchtest>\n"
      "                <fileset dir=\"src\">\n"
      "                    <include name=\"**/**.java\" />\n"
      "                </fileset>\n"
      "            </batchtest>\n"
      "        </junit>\n"
      "    </target>\n"
      "</project>]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2326
#, no-c-format
msgid "You also need to deploy the application to test, and possibly launch a dedicated server for it."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2333
#, no-c-format
msgid "Running Tests with Maven"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2335
#, no-c-format
msgid "Executing JUnit tests with Vaadin TestBench under Maven requires defining it as a dependency in any POM that needs to execute TestBench tests."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2340
#, no-c-format
msgid "A complete example of a Maven test setup is given in the <filename>example/maven</filename> folder in the installation package. Please see the <filename>README</filename> file in the folder for further instructions."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2348
#, no-c-format
msgid "Defining TestBench as a Dependency"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2350
#, no-c-format
msgid "You need to define the TestBench library as a dependency in the Maven POM of your project as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:2355
#, no-c-format
msgid ""
      "&lt;dependency&gt;\n"
      "      &lt;groupId&gt;com.vaadin&lt;/groupId&gt;\n"
      "      &lt;artifactId&gt;vaadin-testbench&lt;/artifactId&gt;\n"
      "      &lt;version&gt;&version.testbench;&lt;/version&gt;\n"
      "    &lt;/dependency&gt;"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2357
#, no-c-format
msgid "For instructions on how to create a new Vaadin project with Maven, please see <xref linkend=\"getting-started.maven\"/>."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2364
#, no-c-format
msgid "Running the Tests"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2366
#, no-c-format
msgid "To compile and run the tests, simply execute the <literal>test</literal> lifecycle phase with Maven as follows:"
msgstr ""

#. Tag: screen
#: chapter-testbench.xml:2371
#, no-c-format
msgid ""
      "<prompt>$</prompt> <command>mvn</command> test\n"
      "...\n"
      "-----------------------------------------------------\n"
      " T E S T S\n"
      "-----------------------------------------------------\n"
      "Running TestBenchExample\n"
      "Tests run: 6, Failures: 1, Errors: 0, Skipped: 1, Time elapsed: 36.736 sec &lt;&lt;&lt; FAILURE!\n"
      "\n"
      "Results :\n"
      "\n"
      "Failed tests: \n"
      "  testDemo(TestBenchExample):\n"
      "      expected:&lt;[5/17/]12&gt; but was:&lt;[17.6.20]12&gt;\n"
      "\n"
      "Tests run: 6, Failures: 1, Errors: 0, Skipped: 1\n"
      "..."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2373
#, no-c-format
msgid "The example configuration starts Jetty to run the application that is tested."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2378
#, no-c-format
msgid "If you have screenshot tests enabled, as mentioned in <xref linkend=\"testbench.installation.examples\"/>, you will get failures from screenshot comparison. The failed screenshots are written to the <filename>target/testbench/errors</filename> folder. To enable comparing them to \"expected\" screenshots, you need to copy the screenshots to the <filename>src/test/resources/screenshots/reference/</filename> folder. See <xref linkend=\"testbench.screenshots\"/> for more information regarding screenshots."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2394
#, no-c-format
msgid "Running Tests in a Distributed Environment"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2396
#, no-c-format
msgid "A distributed test environment consists of a grid hub and a number of test nodes. The hub listens to calls from test runners and delegates them to the grid nodes. Different nodes can run on different operating system platforms and have different browsers installed."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2403
#, no-c-format
msgid "A basic distributed installation was covered in <xref linkend=\"testbench.installation.distributed\"/>."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2409
#, no-c-format
msgid "Running Tests Remotely"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2411
#, no-c-format
msgid "Remote tests are just like locally executed JUnit tests, except instead of using a browser driver, you use a <classname>RemoteWebDriver</classname> that can connect to the hub. The hub delegates the connection to a grid node with the desired capabilities, that is, which browsers are installed in a suitable node. The capabilities are described with a <classname>DesiredCapabilities</classname> object."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2420
#, no-c-format
msgid "For example, in the example tests given in the <filename>example</filename> folder, we create and use a remote driver as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:2425
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[@Test\n"
      "public void testRemoteWebDriver() throws MalformedURLException {\n"
      "    // Require Firefox in the test node\n"
      "    DesiredCapabilities capability =\n"
      "        DesiredCapabilities.firefox();\n"
      "\n"
      "    // Create a remote web driver that connects to a hub\n"
      "    // running in the local host\n"
      "    WebDriver driver = TestBench.createDriver(\n"
      "        new RemoteWebDriver(new URL(\n"
      "            \"http://localhost:4444/wd/hub\"), capability));\n"
      "\n"
      "    // Then use it to run a test as you would use any web driver\n"
      "    try {\n"
      "        driver.navigate().to(\n"
      "            \"http://demo.vaadin.com/sampler#TreeActions\");\n"
      "        WebElement e = driver.findElement(By.xpath(\n"
      "            \"//div[@class='v-tree-node-caption']\"+\n"
      "            \"/div[span='Desktops']\"));\n"
      "        new Actions(driver).moveToElement(e).contextClick(e)\n"
      "            .perform();\n"
      "    } finally {\n"
      "        driver.quit();\n"
      "    }\n"
      "}\n"
      "]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2427
#, no-c-format
msgid "Please see the API documentation of the <classname>DesiredCapabilities</classname> class for a complete list of supported capabilities."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2433
#, no-c-format
msgid "Running the example requires that the hub service and the nodes are running. Starting them is described in the subsequent sections. Please refer to <link xlink:href=\"http://seleniumhq.org/docs/07_selenium_grid.html\">Selenium documentation</link> for more detailed information."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2443
#, no-c-format
msgid "Starting the Hub"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2445
#, no-c-format
msgid "The TestBench grid hub listens to calls from test runners and delegates them to the grid nodes. The grid hub service is included in the Vaadin TestBench JAR and you can start it with the following command:"
msgstr ""

#. Tag: screen
#: chapter-testbench.xml:2451
#, no-c-format
msgid ""
      "<prompt>$</prompt> <command>java</command> -jar vaadin-testbench-standalone-&version.testbench;.jar \\\n"
      "       -role hub"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2453
#, no-c-format
msgid "You can open the control interface of the hub also with a web browser. Using the default port, just open URL <uri>http://localhost:4444/</uri>. Once you have started one or more grid nodes, as instructed in the next section, the \"console\" page displays a list of the grid nodes with their browser capabilities."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2463
#, no-c-format
msgid "Node Service Configuration"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2465
#, no-c-format
msgid "Test nodes can be configured with command-line options, as described later, or in a configuration file in JSON format. If no configuration file is provided, a default configuration is used."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2471
#, no-c-format
msgid "A node configuration file is specified with the <parameter>-nodeConfig</parameter> parameter to the node service, for example as follows:"
msgstr ""

#. Tag: screen
#: chapter-testbench.xml:2477
#, no-c-format
msgid ""
      "<prompt>$</prompt> <command>java</command> -jar vaadin-testbench-standalone-&version.testbench;.jar\n"
      "       -role node -nodeConfig <parameter>nodeConfig.json</parameter>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2479
#, no-c-format
msgid "See <xref linkend=\"testbench.grid.node\"/> for further details on starting the node service."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2485
#, no-c-format
msgid "Configuration File Format"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2487
#, no-c-format
msgid "The test node configuration file follows the JSON format, which defines nested associative maps. An associative map is defined as a block enclosed in curly braces (<literal>{}</literal>). A mapping is a key-value pair separated with a colon (<literal>:</literal>). A key is a string literal quoted with double quotes (<literal>\"key\"</literal>). The value can be a string literal, list, or a nested associative map. A list a comma-separated sequence enclosed within square brackets (<literal>[]</literal>)."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2498
#, no-c-format
msgid "The top-level associative map should have two associations: <literal>capabilities</literal> (to a list of associative maps) and <literal>configuration</literal> (to a nested associative map)."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:2504
#, no-c-format
msgid ""
      "<?pocket-size 75% ?>{\n"
      "  \"capabilities\":\n"
      "    [\n"
      "      {\n"
      "        \"browserName\": \"<parameter>firefox</parameter>\",\n"
      "        ...\n"
      "      },\n"
      "      ...\n"
      "    ],\n"
      "  \"configuration\":\n"
      "  {\n"
      "    \"port\": 5555,\n"
      "    ...\n"
      "  }\n"
      "}"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2506
#, no-c-format
msgid "A complete example is given later."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2512 chapter-testbench.xml:2623
#, no-c-format
msgid "Browser Capabilities"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2514
#, no-c-format
msgid "The browser capabilities are defined as a list of associative maps as the value of the <literal>capabilities</literal> key. The capabilities can also be given from command-line using the <parameter>-browser</parameter> parameter, as described in <xref linkend=\"testbench.grid.node\"/>."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2522
#, no-c-format
msgid "The keys in the map are the following:"
msgstr ""

#. Tag: parameter
#: chapter-testbench.xml:2528
#, no-c-format
msgid "platform"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:2529
#, no-c-format
msgid "The operating system platform of the test node: <literal>WINDOWS</literal>, <literal>XP</literal>, <literal>VISTA</literal>, <literal>LINUX</literal>, or <literal>MAC</literal>."
msgstr ""

#. Tag: parameter
#: chapter-testbench.xml:2537
#, no-c-format
msgid "browserName"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:2538
#, no-c-format
msgid "A browser identifier, any of: <literal>android</literal>, <literal>chrome</literal>, <literal>firefox</literal>, <literal>htmlunit</literal>, <literal>internet explorer</literal>, <literal>iphone</literal>, <literal>opera</literal>, or <literal>phantomjs</literal> (as of TestBench 3.1)."
msgstr ""

#. Tag: parameter
#: chapter-testbench.xml:2548
#, no-c-format
msgid "maxInstances"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:2549
#, no-c-format
msgid "The maximum number of browser instances of this type open at the same time for parallel testing."
msgstr ""

#. Tag: parameter
#: chapter-testbench.xml:2555
#, no-c-format
msgid "version"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:2556
#, no-c-format
msgid "The major version number of the browser."
msgstr ""

#. Tag: parameter
#: chapter-testbench.xml:2561
#, no-c-format
msgid "seleniumProtocol"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:2562
#, no-c-format
msgid "This should be <literal>WebDriver</literal> for WebDriver use."
msgstr ""

#. Tag: parameter
#: chapter-testbench.xml:2567
#, no-c-format
msgid "firefox_binary"
msgstr ""

#. Tag: listitem
#: chapter-testbench.xml:2568
#, no-c-format
msgid "Full path and file name of the Firefox executable. This is typically needed if you have Firefox ESR installed in a location that is not in the system path."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2578
#, no-c-format
msgid "Server Configuration"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2580
#, no-c-format
msgid "The node service configuration is defined as a nested associative map as the value of the <literal>configuration</literal> key. The configuration parameters can also be given as command-line parameters to the node service, as described in <xref linkend=\"testbench.grid.node\"/>."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2587
#, no-c-format
msgid "See the following example for a typical server configuration."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2593
#, no-c-format
msgid "Example Configuration"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:2595
#, no-c-format
msgid ""
      "<?pocket-size 75% ?>{\n"
      "  \"capabilities\":\n"
      "    [\n"
      "      {\n"
      "        \"browserName\": \"<parameter>firefox</parameter>\",\n"
      "        \"maxInstances\": <parameter>5</parameter>,\n"
      "        \"seleniumProtocol\": \"<parameter>WebDriver</parameter>\",\n"
      "        \"version\": \"<parameter>10</parameter>\",\n"
      "        \"firefox_binary\": \"<parameter>/path/to/firefox10</parameter>\"\n"
      "      },\n"
      "      {\n"
      "        \"browserName\": \"<parameter>firefox</parameter>\",\n"
      "        \"maxInstances\": <parameter>5</parameter>,\n"
      "        \"version\": \"<parameter>16</parameter>\",\n"
      "        \"firefox_binary\": \"<parameter>/path/to/firefox16</parameter>\"\n"
      "      },\n"
      "      {\n"
      "        \"browserName\": \"<parameter>chrome</parameter>\",\n"
      "        \"maxInstances\": <parameter>5</parameter>,\n"
      "        \"seleniumProtocol\": \"<parameter>WebDriver</parameter>\"\n"
      "      },\n"
      "      {\n"
      "        \"platform\": \"<parameter>WINDOWS</parameter>\",\n"
      "        \"browserName\": \"<parameter>internet explorer</parameter>\",\n"
      "        \"maxInstances\": <parameter>1</parameter>,\n"
      "        \"seleniumProtocol\": \"<parameter>WebDriver</parameter>\"\n"
      "      }\n"
      "    ],\n"
      "  \"configuration\":\n"
      "  {\n"
      "    \"proxy\": \"org.openqa.grid.selenium.proxy.DefaultRemoteProxy\",\n"
      "    \"maxSession\": 5,\n"
      "    \"port\": 5555,\n"
      "    \"host\": ip,\n"
      "    \"register\": true,\n"
      "    \"registerCycle\": 5000,\n"
      "    \"hubPort\": 4444\n"
      "  }\n"
      "}"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2600
#, no-c-format
msgid "Starting a Grid Node"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2602
#, no-c-format
msgid "A TestBench grid node listens to calls from the hub and is capable of opening a browser. The grid node service is included in the Vaadin TestBench JAR and you can start it with the following command:"
msgstr ""

#. Tag: screen
#: chapter-testbench.xml:2608
#, no-c-format
msgid ""
      "<prompt>$</prompt> <command>java</command> -jar \\\n"
      "       vaadin-testbench-standalone-&version.testbench;.jar \\\n"
      "       -role node \\\n"
      "       -hub <parameter>http://localhost:4444/grid/register</parameter>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2610
#, no-c-format
msgid "The node registers itself in the grid hub. You need to give the address of the hub either with the <parameter>-hub</parameter> parameter or in the node configuration file as described in <xref linkend=\"testbench.grid.node-configuration\"/>."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2617
#, no-c-format
msgid "You can run one grid node in the same host as the hub, as is done in the example above with the localhost address."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2625
#, no-c-format
msgid "The browsers installed in the node can be defined either with a command-line parameter or with a configuration file in JSON format, as described in <xref linkend=\"testbench.grid.node-configuration\"/>."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2631
#, no-c-format
msgid "On command-line, you can issue a <parameter>-browser</parameter> option to define the browser capabilities. It must be followed by a comma-separated list of property-value definitions, such as the following:"
msgstr ""

#. Tag: screen
#: chapter-testbench.xml:2637
#, no-c-format
msgid ""
      "-browser \"browserName=firefox,version=10,firefox_binary=/path/to/firefox10\" \\\n"
      "-browser \"browserName=firefox,version=16,firefox_binary=/path/to/firefox16\" \\\n"
      "-browser \"browserName=chrome,maxInstances=5\" \\\n"
      "-browser \"browserName=internet explorer,maxInstances=1,platform=WINDOWS\""
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2639
#, no-c-format
msgid "The configuration properties are described in <xref linkend=\"testbench.grid.node-configuration\"/>."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2646
#, no-c-format
msgid "Browser Driver Parameters"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2648
#, no-c-format
msgid "If you use Chrome or Internet Explorer, their remote driver executables must be in the system path (in the <literal>PATH</literal> environment variable) or be given with a command-line parameter to the node service:"
msgstr ""

#. Tag: term
#: chapter-testbench.xml:2657
#, no-c-format
msgid "<term>Internet Explorer</term>"
msgstr ""

#. Tag: parameter
#: chapter-testbench.xml:2659
#, no-c-format
msgid "-Dwebdriver.ie.driver=C:\\path\\to\\IEDriverServer.exe"
msgstr ""

#. Tag: term
#: chapter-testbench.xml:2663
#, no-c-format
msgid "<term>Google Chrome</term>"
msgstr ""

#. Tag: parameter
#: chapter-testbench.xml:2665
#, no-c-format
msgid "-Dwebdriver.chrome.driver=/path/to/ChromeDriver"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2673
#, no-c-format
msgid "Mobile Testing"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2675
#, no-c-format
msgid "Vaadin TestBench includes an iPhone and an Android driver, with which you can test on mobile devices. The tests can be run either in a device or in an emulator/simulator."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2681
#, no-c-format
msgid "The actual testing is just like with any WebDriver, using either the <classname>IPhoneDriver</classname> or the <classname>AndroidDriver</classname>. The Android driver assumes that the hub (<filename>android-server</filename>) is installed in the emulator and forwarded to port 8080 in localhost, while the iPhone driver assumes port 3001. You can also use the <classname>RemoteWebDriver</classname> with either the <methodname>iphone()</methodname> or the <methodname>android()</methodname> capability, and specify the hub URI explicitly."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2693
#, no-c-format
msgid "The mobile testing setup is covered in detail in the Selenium documentation for both the <link xlink:href=\"http://code.google.com/p/selenium/wiki/IPhoneDriver\">IPhoneDriver</link> and the <link xlink:href=\"http://code.google.com/p/selenium/wiki/AndroidDriver\">AndroidDriver</link>."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2704
#, no-c-format
msgid "Headless Testing"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2706
#, no-c-format
msgid "TestBench (3.1 and later) supports fully-featured headless testing with PhantomJS (<link xlink:href=\"http://phantomjs.org\">http://phantomjs.org</link>), a headless browser based on WebKit. It has fast native support for various web standards: JavaScript, DOM handling, CSS selector, JSON, Canvas, and SVG."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2714
#, no-c-format
msgid "Headless testing using PhantomJS allows for around 15% faster test execution without having to start a graphical web browser, even when performing screenshot-based testing! This also makes it possible to run full-scale functional tests on the front-end directly on a build server, without the need to install any web browsers."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2722
#, no-c-format
msgid "It is usually best to use a graphical browser to develop the test cases, as it is possible to see interactively what happens while the tests are being executed. Once the tests are working correctly in a graphical browser, you can migrate them to run on the PhantomJS headless browser."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2730
#, no-c-format
msgid "Basic Setup for Running Headless Tests"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2732
#, no-c-format
msgid "The only set up required is to install the PhantomJS binary. Follow the instructions for your operating system at <link xlink:href=\"http://phantomjs.org/download.html\">PhantomJS download page</link>, and place the binary in the system path."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2739
#, no-c-format
msgid "The PhantomJSDriver dependency is already included in Vaadin TestBench."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2744
#, no-c-format
msgid "Creating a Headless WebDriver Instance"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2746
#, no-c-format
msgid "Creating an instance of the <classname>PhantomJSDriver</classname> is just as easy as creating an instance of <classname>FirefoxDriver</classname>."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:2751
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[setDriver(TestBench.createDriver(\n"
      "    new PhantomJSDriver(DesiredCapabilities.phantomjs())));]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2753
#, no-c-format
msgid "Some tests may fail because of the small default window size in PhantomJS. Such tests are, for example, tests containing elements that pop up and might go off-screen when the window is small. To make them work better, specify a size for the window:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:2760
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[getDriver().manage().window().setSize(\n"
      "        new Dimension(1024, 768));]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2762
#, no-c-format
msgid "Nothing else is needed to run tests headlessly."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2769
#, no-c-format
msgid "Running Headless Tests in a Distributed Environment"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2771
#, no-c-format
msgid "Running PhantomJS in a distributed grid is equally easy. First, install PhantomJS in the nodes by following the instructions in <xref linkend=\"testbench.headless.running\"/>. Then, start PhantomJS using the following command:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:2778
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[phantomjs --webdriver=8080 \\\n"
      "          --webdriver-selenium-grid-hub=http://127.0.0.1:4444]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2780
#, no-c-format
msgid "The above will start PhantomJS in the WebDriver mode and register it with a grid hub running at <literal>127.0.0.1:4444</literal>. After this, running tests in the grid is as easy as passing <methodname>DesiredCapabilities.phantomjs()</methodname> to the <literal>RemoteWebDriver</literal> constructor."
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:2788
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[setDriver(new RemoteWebDriver(\n"
      "        DesiredCapabilities.phantomjs()));]]>"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2793
#, no-c-format
msgid "Known Issues"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2795
#, no-c-format
msgid "This section provides information and instructions on a few features that are known to be difficult to use or need modification to work."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2801
#, no-c-format
msgid "Testing the LoginForm"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2803
#, no-c-format
msgid "Please note that, as of Vaadin 7, <classname>LoginForm</classname> has been deprecated and should no longer be used. This section is here to inform those still using Vaadin 6.x and testing with Vaadin TestBench."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2809
#, no-c-format
msgid "Replaying interactions in the <classname>LoginForm</classname> component is somewhat tricky because the identifier of the <literal>iframe</literal> element changes every time the application is restarted, so it can not be used for selecting it. The use of an iframe element means that recordings have to select the target frame before fields can be correctly identified."
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2818
#, no-c-format
msgid "Selecting a Frame in JUnit Code"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2820
#, no-c-format
msgid "Selecting the correct frame in JUnit code by index number can be done as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:2825
#, no-c-format
msgid ""
      "<![CDATA[// Select frame by its 0-based index\n"
      "getDriver().switchTo().frame(2);]]>"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2827
#, no-c-format
msgid "Or by the XPath with:"
msgstr ""

#. Tag: programlisting
#: chapter-testbench.xml:2831
#, no-c-format
msgid ""
      "<![CDATA[WebElement frame = getDriver().\n"
      "    findElement(By.xpath(\"//id('login')//iframe\"));\n"
      "getDriver().switchTo().frame(frame);]]>"
msgstr ""

#. Tag: title
#: chapter-testbench.xml:2836
#, no-c-format
msgid "Running Firefox Tests on Mac OS X"
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2838
#, no-c-format
msgid "Firefox needs to have focus in the main window for any focus events to be triggered. This sometimes causes problems if something interferes with the focus. For example, a <classname>TextField</classname> that has an input prompt relies on the JavaScript <methodname>onFocus()</methodname> event to clear the prompt when the field is focused."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2846
#, no-c-format
msgid "The problem occurs when OS X considers the Java process of an application using TestBench (or the node service) to have a native user interface capability, as with AWT or Swing, even when they are not used. This causes the focus to switch from Firefox to the process using TestBench, causing tests requiring focus to fail. To remedy this problem, you need to start the JVM in which the tests are running with the <parameter>-Djava.awt.headless=true</parameter> parameter to disable the user interface capability of the Java process."
msgstr ""

#. Tag: para
#: chapter-testbench.xml:2857
#, no-c-format
msgid "Note that the same problem is present also when debugging tests with Firefox. We therefore recommend using Chrome for debugging tests, unless Firefox is necessary."
msgstr ""

